
MiniProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a75c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800a8fc  0800a8fc  0000b8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad40  0800ad40  0000c06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ad40  0800ad40  0000bd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad48  0800ad48  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad48  0800ad48  0000bd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad4c  0800ad4c  0000bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800ad50  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ccc  2000006c  0800adbc  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d38  0800adbc  0000cd38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021197  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c52  00000000  00000000  0002d233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  00031e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000159d  00000000  00000000  00033a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5fb  00000000  00000000  00034fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023700  00000000  00000000  000515d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4761  00000000  00000000  00074cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119439  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ff4  00000000  00000000  0011947c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00121470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a8e4 	.word	0x0800a8e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800a8e4 	.word	0x0800a8e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <dec_to_bcd>:
#define DS1302_IO_READ()     HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)
#define DS1302_IO_INPUT_MODE()  ds1302_set_pin_input()
#define DS1302_IO_OUTPUT_MODE() ds1302_set_pin_output()

// BCD 변환 함수
static uint8_t dec_to_bcd(uint8_t val) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
    return ((val / 10) << 4) | (val % 10);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <dec_to_bcd+0x48>)
 80005ba:	fba2 2303 	umull	r2, r3, r2, r3
 80005be:	08db      	lsrs	r3, r3, #3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	b258      	sxtb	r0, r3
 80005c8:	79fa      	ldrb	r2, [r7, #7]
 80005ca:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <dec_to_bcd+0x48>)
 80005cc:	fba3 1302 	umull	r1, r3, r3, r2
 80005d0:	08d9      	lsrs	r1, r3, #3
 80005d2:	460b      	mov	r3, r1
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	440b      	add	r3, r1
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	4303      	orrs	r3, r0
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	b2db      	uxtb	r3, r3
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	cccccccd 	.word	0xcccccccd

080005f8 <ds1302_set_pin_output>:

// GPIO 모드 설정 함수
void ds1302_set_pin_output(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800060c:	2320      	movs	r3, #32
 800060e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4803      	ldr	r0, [pc, #12]	@ (800062c <ds1302_set_pin_output+0x34>)
 800061e:	f001 ff7f 	bl	8002520 <HAL_GPIO_Init>
}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020000 	.word	0x40020000

08000630 <ds1302_write_byte>:
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

// 바이트 쓰기
static void ds1302_write_byte(uint8_t byte) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
    DS1302_IO_OUTPUT_MODE();
 800063a:	f7ff ffdd 	bl	80005f8 <ds1302_set_pin_output>
    for (int i = 0; i < 8; ++i) {
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e01f      	b.n	8000684 <ds1302_write_byte+0x54>
        (byte & 0x01) ? DS1302_IO_HIGH() : DS1302_IO_LOW();
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d005      	beq.n	800065a <ds1302_write_byte+0x2a>
 800064e:	2201      	movs	r2, #1
 8000650:	2120      	movs	r1, #32
 8000652:	4810      	ldr	r0, [pc, #64]	@ (8000694 <ds1302_write_byte+0x64>)
 8000654:	f002 f900 	bl	8002858 <HAL_GPIO_WritePin>
 8000658:	e004      	b.n	8000664 <ds1302_write_byte+0x34>
 800065a:	2200      	movs	r2, #0
 800065c:	2120      	movs	r1, #32
 800065e:	480d      	ldr	r0, [pc, #52]	@ (8000694 <ds1302_write_byte+0x64>)
 8000660:	f002 f8fa 	bl	8002858 <HAL_GPIO_WritePin>
        DS1302_CLK_HIGH();
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	@ 0x40
 8000668:	480a      	ldr	r0, [pc, #40]	@ (8000694 <ds1302_write_byte+0x64>)
 800066a:	f002 f8f5 	bl	8002858 <HAL_GPIO_WritePin>
        byte >>= 1;
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	085b      	lsrs	r3, r3, #1
 8000672:	71fb      	strb	r3, [r7, #7]
        DS1302_CLK_LOW();
 8000674:	2200      	movs	r2, #0
 8000676:	2140      	movs	r1, #64	@ 0x40
 8000678:	4806      	ldr	r0, [pc, #24]	@ (8000694 <ds1302_write_byte+0x64>)
 800067a:	f002 f8ed 	bl	8002858 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; ++i) {
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2b07      	cmp	r3, #7
 8000688:	dddc      	ble.n	8000644 <ds1302_write_byte+0x14>
    }
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40020000 	.word	0x40020000

08000698 <DS1302_SetTime>:

// DS1302에 시간 쓰기
void DS1302_SetTime(RTC_TimeTypeDef* time, RTC_DateTypeDef* date) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
    DS1302_CE_LOW();
 80006a2:	2200      	movs	r2, #0
 80006a4:	2180      	movs	r1, #128	@ 0x80
 80006a6:	483b      	ldr	r0, [pc, #236]	@ (8000794 <DS1302_SetTime+0xfc>)
 80006a8:	f002 f8d6 	bl	8002858 <HAL_GPIO_WritePin>
    DS1302_CLK_LOW();
 80006ac:	2200      	movs	r2, #0
 80006ae:	2140      	movs	r1, #64	@ 0x40
 80006b0:	4838      	ldr	r0, [pc, #224]	@ (8000794 <DS1302_SetTime+0xfc>)
 80006b2:	f002 f8d1 	bl	8002858 <HAL_GPIO_WritePin>
    DS1302_CE_HIGH();
 80006b6:	2201      	movs	r2, #1
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	4836      	ldr	r0, [pc, #216]	@ (8000794 <DS1302_SetTime+0xfc>)
 80006bc:	f002 f8cc 	bl	8002858 <HAL_GPIO_WritePin>

    // Write protect 해제
    ds1302_write_byte(0x8E); // Control register address
 80006c0:	208e      	movs	r0, #142	@ 0x8e
 80006c2:	f7ff ffb5 	bl	8000630 <ds1302_write_byte>
    ds1302_write_byte(0x00); // Disable write protect
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff ffb2 	bl	8000630 <ds1302_write_byte>

    // 시간 설정
    ds1302_write_byte(0x80); // Seconds (write)
 80006cc:	2080      	movs	r0, #128	@ 0x80
 80006ce:	f7ff ffaf 	bl	8000630 <ds1302_write_byte>
    ds1302_write_byte(dec_to_bcd(time->Seconds));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff68 	bl	80005ac <dec_to_bcd>
 80006dc:	4603      	mov	r3, r0
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffa6 	bl	8000630 <ds1302_write_byte>

    ds1302_write_byte(0x82); // Minutes
 80006e4:	2082      	movs	r0, #130	@ 0x82
 80006e6:	f7ff ffa3 	bl	8000630 <ds1302_write_byte>
    ds1302_write_byte(dec_to_bcd(time->Minutes));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	785b      	ldrb	r3, [r3, #1]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff5c 	bl	80005ac <dec_to_bcd>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff9a 	bl	8000630 <ds1302_write_byte>

    ds1302_write_byte(0x84); // Hours
 80006fc:	2084      	movs	r0, #132	@ 0x84
 80006fe:	f7ff ff97 	bl	8000630 <ds1302_write_byte>
    ds1302_write_byte(dec_to_bcd(time->Hours));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff50 	bl	80005ac <dec_to_bcd>
 800070c:	4603      	mov	r3, r0
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff8e 	bl	8000630 <ds1302_write_byte>

    ds1302_write_byte(0x86); // Date
 8000714:	2086      	movs	r0, #134	@ 0x86
 8000716:	f7ff ff8b 	bl	8000630 <ds1302_write_byte>
    ds1302_write_byte(dec_to_bcd(date->Date));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff44 	bl	80005ac <dec_to_bcd>
 8000724:	4603      	mov	r3, r0
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff82 	bl	8000630 <ds1302_write_byte>

    ds1302_write_byte(0x88); // Month
 800072c:	2088      	movs	r0, #136	@ 0x88
 800072e:	f7ff ff7f 	bl	8000630 <ds1302_write_byte>
    ds1302_write_byte(dec_to_bcd(date->Month));
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	785b      	ldrb	r3, [r3, #1]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff38 	bl	80005ac <dec_to_bcd>
 800073c:	4603      	mov	r3, r0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff76 	bl	8000630 <ds1302_write_byte>

    ds1302_write_byte(0x8A); // Day of week
 8000744:	208a      	movs	r0, #138	@ 0x8a
 8000746:	f7ff ff73 	bl	8000630 <ds1302_write_byte>
    ds1302_write_byte(dec_to_bcd(date->WeekDay));
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff2c 	bl	80005ac <dec_to_bcd>
 8000754:	4603      	mov	r3, r0
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff6a 	bl	8000630 <ds1302_write_byte>

    ds1302_write_byte(0x8C); // Year
 800075c:	208c      	movs	r0, #140	@ 0x8c
 800075e:	f7ff ff67 	bl	8000630 <ds1302_write_byte>
    ds1302_write_byte(dec_to_bcd(date->Year));
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	78db      	ldrb	r3, [r3, #3]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff20 	bl	80005ac <dec_to_bcd>
 800076c:	4603      	mov	r3, r0
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff5e 	bl	8000630 <ds1302_write_byte>

    // Write protect 다시 설정
    ds1302_write_byte(0x8E); // Control register
 8000774:	208e      	movs	r0, #142	@ 0x8e
 8000776:	f7ff ff5b 	bl	8000630 <ds1302_write_byte>
    ds1302_write_byte(0x80); // Enable write protect
 800077a:	2080      	movs	r0, #128	@ 0x80
 800077c:	f7ff ff58 	bl	8000630 <ds1302_write_byte>

    DS1302_CE_LOW();
 8000780:	2200      	movs	r2, #0
 8000782:	2180      	movs	r1, #128	@ 0x80
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <DS1302_SetTime+0xfc>)
 8000786:	f002 f867 	bl	8002858 <HAL_GPIO_WritePin>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020000 	.word	0x40020000

08000798 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of LCDMutex */
  LCDMutexHandle = osMutexNew(&LCDMutex_attributes);
 800079c:	481e      	ldr	r0, [pc, #120]	@ (8000818 <MX_FREERTOS_Init+0x80>)
 800079e:	f005 fc1d 	bl	8005fdc <osMutexNew>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a1d      	ldr	r2, [pc, #116]	@ (800081c <MX_FREERTOS_Init+0x84>)
 80007a6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  lcdQueue = xQueueCreate(LCD_QUEUE_LENGTH, LCD_QUEUE_ITEM_SIZE);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2120      	movs	r1, #32
 80007ac:	2004      	movs	r0, #4
 80007ae:	f006 fb34 	bl	8006e1a <xQueueGenericCreate>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000820 <MX_FREERTOS_Init+0x88>)
 80007b6:	6013      	str	r3, [r2, #0]
  if (lcdQueue == NULL) {
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_FREERTOS_Init+0x88>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d101      	bne.n	80007c4 <MX_FREERTOS_Init+0x2c>
      Error_Handler();  // 큐 생성 실패 시 에러 처리
 80007c0:	f001 f8b2 	bl	8001928 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TimeTask */
  TimeTaskHandle = osThreadNew(StartTimeTask, NULL, &TimeTask_attributes);
 80007c4:	4a17      	ldr	r2, [pc, #92]	@ (8000824 <MX_FREERTOS_Init+0x8c>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4817      	ldr	r0, [pc, #92]	@ (8000828 <MX_FREERTOS_Init+0x90>)
 80007ca:	f005 fb5a 	bl	8005e82 <osThreadNew>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a16      	ldr	r2, [pc, #88]	@ (800082c <MX_FREERTOS_Init+0x94>)
 80007d2:	6013      	str	r3, [r2, #0]

  /* creation of AlarmTask */
  AlarmTaskHandle = osThreadNew(StartAlarmTask, NULL, &AlarmTask_attributes);
 80007d4:	4a16      	ldr	r2, [pc, #88]	@ (8000830 <MX_FREERTOS_Init+0x98>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	4816      	ldr	r0, [pc, #88]	@ (8000834 <MX_FREERTOS_Init+0x9c>)
 80007da:	f005 fb52 	bl	8005e82 <osThreadNew>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <MX_FREERTOS_Init+0xa0>)
 80007e2:	6013      	str	r3, [r2, #0]

  /* creation of IRTask */
  IRTaskHandle = osThreadNew(StartIRTask, NULL, &IRTask_attributes);
 80007e4:	4a15      	ldr	r2, [pc, #84]	@ (800083c <MX_FREERTOS_Init+0xa4>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4815      	ldr	r0, [pc, #84]	@ (8000840 <MX_FREERTOS_Init+0xa8>)
 80007ea:	f005 fb4a 	bl	8005e82 <osThreadNew>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a14      	ldr	r2, [pc, #80]	@ (8000844 <MX_FREERTOS_Init+0xac>)
 80007f2:	6013      	str	r3, [r2, #0]

  /* creation of UIStateTask */
  UIStateTaskHandle = osThreadNew(StartUIStateTask, NULL, &UIStateTask_attributes);
 80007f4:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <MX_FREERTOS_Init+0xb0>)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4814      	ldr	r0, [pc, #80]	@ (800084c <MX_FREERTOS_Init+0xb4>)
 80007fa:	f005 fb42 	bl	8005e82 <osThreadNew>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a13      	ldr	r2, [pc, #76]	@ (8000850 <MX_FREERTOS_Init+0xb8>)
 8000802:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 8000804:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <MX_FREERTOS_Init+0xbc>)
 8000806:	2100      	movs	r1, #0
 8000808:	4813      	ldr	r0, [pc, #76]	@ (8000858 <MX_FREERTOS_Init+0xc0>)
 800080a:	f005 fb3a 	bl	8005e82 <osThreadNew>
 800080e:	4603      	mov	r3, r0
 8000810:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_FREERTOS_Init+0xc4>)
 8000812:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	0800ab34 	.word	0x0800ab34
 800081c:	200000c4 	.word	0x200000c4
 8000820:	200000a0 	.word	0x200000a0
 8000824:	0800aa80 	.word	0x0800aa80
 8000828:	08000861 	.word	0x08000861
 800082c:	200000b0 	.word	0x200000b0
 8000830:	0800aaa4 	.word	0x0800aaa4
 8000834:	080008e5 	.word	0x080008e5
 8000838:	200000b4 	.word	0x200000b4
 800083c:	0800aac8 	.word	0x0800aac8
 8000840:	080009a1 	.word	0x080009a1
 8000844:	200000b8 	.word	0x200000b8
 8000848:	0800aaec 	.word	0x0800aaec
 800084c:	08001111 	.word	0x08001111
 8000850:	200000bc 	.word	0x200000bc
 8000854:	0800ab10 	.word	0x0800ab10
 8000858:	080012b5 	.word	0x080012b5
 800085c:	200000c0 	.word	0x200000c0

08000860 <StartTimeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTimeTask */
void StartTimeTask(void *argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	@ 0x50
 8000864:	af02      	add	r7, sp, #8
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeTask */
    LCD_Init(&hi2c1);
 8000868:	481a      	ldr	r0, [pc, #104]	@ (80008d4 <StartTimeTask+0x74>)
 800086a:	f000 feee 	bl	800164a <LCD_Init>
    TickType_t xLastWakeTime = xTaskGetTickCount();
 800086e:	f007 fc93 	bl	8008198 <xTaskGetTickCount>
 8000872:	4603      	mov	r3, r0
 8000874:	647b      	str	r3, [r7, #68]	@ 0x44
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    char buf[LCD_QUEUE_ITEM_SIZE];

    for (;;) {
    	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000876:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800087a:	2200      	movs	r2, #0
 800087c:	4619      	mov	r1, r3
 800087e:	4816      	ldr	r0, [pc, #88]	@ (80008d8 <StartTimeTask+0x78>)
 8000880:	f003 fb5d 	bl	8003f3e <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000884:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	4812      	ldr	r0, [pc, #72]	@ (80008d8 <StartTimeTask+0x78>)
 800088e:	f003 fc38 	bl	8004102 <HAL_RTC_GetDate>

		snprintf(buf, sizeof(buf), "Time: %02d:%02d:%02d",
				 sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000892:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
		snprintf(buf, sizeof(buf), "Time: %02d:%02d:%02d",
 8000896:	4619      	mov	r1, r3
				 sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000898:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800089c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
		snprintf(buf, sizeof(buf), "Time: %02d:%02d:%02d",
 80008a0:	f107 000c 	add.w	r0, r7, #12
 80008a4:	9201      	str	r2, [sp, #4]
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	460b      	mov	r3, r1
 80008aa:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <StartTimeTask+0x7c>)
 80008ac:	2120      	movs	r1, #32
 80008ae:	f008 fe63 	bl	8009578 <sniprintf>

		// Queue 전송 (블로킹 안 함)
		xQueueSend(lcdQueue, buf, 0);
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <StartTimeTask+0x80>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f107 010c 	add.w	r1, r7, #12
 80008ba:	2300      	movs	r3, #0
 80008bc:	2200      	movs	r2, #0
 80008be:	f006 fbc3 	bl	8007048 <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(1000));
 80008c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008ca:	4618      	mov	r0, r3
 80008cc:	f007 fa92 	bl	8007df4 <vTaskDelayUntil>
    	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008d0:	bf00      	nop
 80008d2:	e7d0      	b.n	8000876 <StartTimeTask+0x16>
 80008d4:	200000cc 	.word	0x200000cc
 80008d8:	2000014c 	.word	0x2000014c
 80008dc:	0800a93c 	.word	0x0800a93c
 80008e0:	200000a0 	.word	0x200000a0

080008e4 <StartAlarmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAlarmTask */
void StartAlarmTask(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAlarmTask */
	RTC_TimeTypeDef sTime;
	static uint8_t alarm_triggered = 0;

	for (;;) {
		if (!alarm_triggered) { // 이전에 !alarm_setting_mode였음
 80008ec:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <StartAlarmTask+0xa4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d143      	bne.n	800097c <StartAlarmTask+0x98>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	2200      	movs	r2, #0
 80008fa:	4619      	mov	r1, r3
 80008fc:	4823      	ldr	r0, [pc, #140]	@ (800098c <StartAlarmTask+0xa8>)
 80008fe:	f003 fb1e 	bl	8003f3e <HAL_RTC_GetTime>
			if (sTime.Hours == alarm_hour &&
 8000902:	7a3a      	ldrb	r2, [r7, #8]
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <StartAlarmTask+0xac>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	d137      	bne.n	800097c <StartAlarmTask+0x98>
				sTime.Minutes == alarm_min &&
 800090c:	7a7a      	ldrb	r2, [r7, #9]
 800090e:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <StartAlarmTask+0xb0>)
 8000910:	781b      	ldrb	r3, [r3, #0]
			if (sTime.Hours == alarm_hour &&
 8000912:	429a      	cmp	r2, r3
 8000914:	d132      	bne.n	800097c <StartAlarmTask+0x98>
		        sTime.Seconds >= alarm_sec &&
 8000916:	7aba      	ldrb	r2, [r7, #10]
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <StartAlarmTask+0xb4>)
 800091a:	781b      	ldrb	r3, [r3, #0]
				sTime.Minutes == alarm_min &&
 800091c:	429a      	cmp	r2, r3
 800091e:	d32d      	bcc.n	800097c <StartAlarmTask+0x98>
		        sTime.Seconds < alarm_sec + 2) {
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <StartAlarmTask+0xb4>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	7aba      	ldrb	r2, [r7, #10]
		        sTime.Seconds >= alarm_sec &&
 8000928:	4293      	cmp	r3, r2
 800092a:	db27      	blt.n	800097c <StartAlarmTask+0x98>

				alarm_triggered = 1;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <StartAlarmTask+0xa4>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]

				for (int i = 0; i < 5; ++i) {
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
 8000936:	e01e      	b.n	8000976 <StartAlarmTask+0x92>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // 부저 ON
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800093e:	4817      	ldr	r0, [pc, #92]	@ (800099c <StartAlarmTask+0xb8>)
 8000940:	f001 ff8a 	bl	8002858 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // LED ON
 8000944:	2201      	movs	r2, #1
 8000946:	2110      	movs	r1, #16
 8000948:	4814      	ldr	r0, [pc, #80]	@ (800099c <StartAlarmTask+0xb8>)
 800094a:	f001 ff85 	bl	8002858 <HAL_GPIO_WritePin>
					osDelay(250);
 800094e:	20fa      	movs	r0, #250	@ 0xfa
 8000950:	f005 fb29 	bl	8005fa6 <osDelay>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // 부저 OFF
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800095a:	4810      	ldr	r0, [pc, #64]	@ (800099c <StartAlarmTask+0xb8>)
 800095c:	f001 ff7c 	bl	8002858 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // LED OFF
 8000960:	2200      	movs	r2, #0
 8000962:	2110      	movs	r1, #16
 8000964:	480d      	ldr	r0, [pc, #52]	@ (800099c <StartAlarmTask+0xb8>)
 8000966:	f001 ff77 	bl	8002858 <HAL_GPIO_WritePin>
					osDelay(250);
 800096a:	20fa      	movs	r0, #250	@ 0xfa
 800096c:	f005 fb1b 	bl	8005fa6 <osDelay>
				for (int i = 0; i < 5; ++i) {
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	3301      	adds	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	2b04      	cmp	r3, #4
 800097a:	dddd      	ble.n	8000938 <StartAlarmTask+0x54>
				}
			}
		}
		osDelay(500);
 800097c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000980:	f005 fb11 	bl	8005fa6 <osDelay>
		if (!alarm_triggered) { // 이전에 !alarm_setting_mode였음
 8000984:	e7b2      	b.n	80008ec <StartAlarmTask+0x8>
 8000986:	bf00      	nop
 8000988:	200000c8 	.word	0x200000c8
 800098c:	2000014c 	.word	0x2000014c
 8000990:	20000127 	.word	0x20000127
 8000994:	20000128 	.word	0x20000128
 8000998:	20000129 	.word	0x20000129
 800099c:	40020000 	.word	0x40020000

080009a0 <StartIRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIRTask */
void StartIRTask(void *argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	@ 0x38
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIRTask */
	for (;;) {
		if (ir_key_ready) {
 80009a8:	4bab      	ldr	r3, [pc, #684]	@ (8000c58 <StartIRTask+0x2b8>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 8389 	beq.w	80010c6 <StartIRTask+0x726>
		  uint8_t cmd = (ir_data >> 16) & 0xFF;
 80009b4:	4ba9      	ldr	r3, [pc, #676]	@ (8000c5c <StartIRTask+0x2bc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	0c1b      	lsrs	r3, r3, #16
 80009ba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		  ir_key_ready = 0;
 80009be:	4ba6      	ldr	r3, [pc, #664]	@ (8000c58 <StartIRTask+0x2b8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]

		  if (cmd == 0x44) { // << 버튼: 시간 설정 진입 또는 완료
 80009c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009c8:	2b44      	cmp	r3, #68	@ 0x44
 80009ca:	f040 80a6 	bne.w	8000b1a <StartIRTask+0x17a>
			if (current_mode == MODE_IDLE) {
 80009ce:	4ba4      	ldr	r3, [pc, #656]	@ (8000c60 <StartIRTask+0x2c0>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d13d      	bne.n	8000a52 <StartIRTask+0xb2>
			  current_mode = MODE_SET_TIME;
 80009d6:	4ba2      	ldr	r3, [pc, #648]	@ (8000c60 <StartIRTask+0x2c0>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
			  selected_time_field = TIME_FIELD_HOUR;
 80009dc:	4ba1      	ldr	r3, [pc, #644]	@ (8000c64 <StartIRTask+0x2c4>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]

			  setup_hour_digits[0] = setup_hour_digits[1] = 0;
 80009e2:	4ba1      	ldr	r3, [pc, #644]	@ (8000c68 <StartIRTask+0x2c8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	705a      	strb	r2, [r3, #1]
 80009e8:	4b9f      	ldr	r3, [pc, #636]	@ (8000c68 <StartIRTask+0x2c8>)
 80009ea:	785a      	ldrb	r2, [r3, #1]
 80009ec:	4b9e      	ldr	r3, [pc, #632]	@ (8000c68 <StartIRTask+0x2c8>)
 80009ee:	701a      	strb	r2, [r3, #0]
			  setup_min_digits[0] = setup_min_digits[1] = 0;
 80009f0:	4b9e      	ldr	r3, [pc, #632]	@ (8000c6c <StartIRTask+0x2cc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	705a      	strb	r2, [r3, #1]
 80009f6:	4b9d      	ldr	r3, [pc, #628]	@ (8000c6c <StartIRTask+0x2cc>)
 80009f8:	785a      	ldrb	r2, [r3, #1]
 80009fa:	4b9c      	ldr	r3, [pc, #624]	@ (8000c6c <StartIRTask+0x2cc>)
 80009fc:	701a      	strb	r2, [r3, #0]
			  setup_sec_digits[0] = setup_sec_digits[1] = 0;
 80009fe:	4b9c      	ldr	r3, [pc, #624]	@ (8000c70 <StartIRTask+0x2d0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	705a      	strb	r2, [r3, #1]
 8000a04:	4b9a      	ldr	r3, [pc, #616]	@ (8000c70 <StartIRTask+0x2d0>)
 8000a06:	785a      	ldrb	r2, [r3, #1]
 8000a08:	4b99      	ldr	r3, [pc, #612]	@ (8000c70 <StartIRTask+0x2d0>)
 8000a0a:	701a      	strb	r2, [r3, #0]
			  setup_hour_input_idx = setup_min_input_idx = setup_sec_input_idx = 0;
 8000a0c:	4b99      	ldr	r3, [pc, #612]	@ (8000c74 <StartIRTask+0x2d4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	4b98      	ldr	r3, [pc, #608]	@ (8000c74 <StartIRTask+0x2d4>)
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	4b98      	ldr	r3, [pc, #608]	@ (8000c78 <StartIRTask+0x2d8>)
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	4b97      	ldr	r3, [pc, #604]	@ (8000c78 <StartIRTask+0x2d8>)
 8000a1c:	781a      	ldrb	r2, [r3, #0]
 8000a1e:	4b97      	ldr	r3, [pc, #604]	@ (8000c7c <StartIRTask+0x2dc>)
 8000a20:	701a      	strb	r2, [r3, #0]

			  osMutexAcquire(LCDMutexHandle, osWaitForever);
 8000a22:	4b97      	ldr	r3, [pc, #604]	@ (8000c80 <StartIRTask+0x2e0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f005 fb5c 	bl	80060e8 <osMutexAcquire>
			  LCD_SetCursor(1, 0);
 8000a30:	2100      	movs	r1, #0
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 fe29 	bl	800168a <LCD_SetCursor>
			  LCD_Print("Set Time Mode     ");
 8000a38:	4892      	ldr	r0, [pc, #584]	@ (8000c84 <StartIRTask+0x2e4>)
 8000a3a:	f000 fe41 	bl	80016c0 <LCD_Print>
			  osMutexRelease(LCDMutexHandle);
 8000a3e:	4b90      	ldr	r3, [pc, #576]	@ (8000c80 <StartIRTask+0x2e0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f005 fb9b 	bl	800617e <osMutexRelease>
			  osDelay(1000);
 8000a48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a4c:	f005 faab 	bl	8005fa6 <osDelay>
 8000a50:	e337      	b.n	80010c2 <StartIRTask+0x722>
			}
			else if (current_mode == MODE_SET_TIME) {
 8000a52:	4b83      	ldr	r3, [pc, #524]	@ (8000c60 <StartIRTask+0x2c0>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	f040 8333 	bne.w	80010c2 <StartIRTask+0x722>
			  RTC_DateTypeDef date;
			  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000a5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	4888      	ldr	r0, [pc, #544]	@ (8000c88 <StartIRTask+0x2e8>)
 8000a66:	f003 fb4c 	bl	8004102 <HAL_RTC_GetDate>

			  setup_time.Hours = setup_hour_digits[0] * 10 + setup_hour_digits[1];
 8000a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8000c68 <StartIRTask+0x2c8>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b7b      	ldr	r3, [pc, #492]	@ (8000c68 <StartIRTask+0x2c8>)
 8000a7a:	785b      	ldrb	r3, [r3, #1]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b82      	ldr	r3, [pc, #520]	@ (8000c8c <StartIRTask+0x2ec>)
 8000a82:	701a      	strb	r2, [r3, #0]
			  setup_time.Minutes = setup_min_digits[0] * 10 + setup_min_digits[1];
 8000a84:	4b79      	ldr	r3, [pc, #484]	@ (8000c6c <StartIRTask+0x2cc>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b76      	ldr	r3, [pc, #472]	@ (8000c6c <StartIRTask+0x2cc>)
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	4413      	add	r3, r2
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8000c8c <StartIRTask+0x2ec>)
 8000a9c:	705a      	strb	r2, [r3, #1]
			  setup_time.Seconds = setup_sec_digits[0] * 10 + setup_sec_digits[1];
 8000a9e:	4b74      	ldr	r3, [pc, #464]	@ (8000c70 <StartIRTask+0x2d0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b70      	ldr	r3, [pc, #448]	@ (8000c70 <StartIRTask+0x2d0>)
 8000aae:	785b      	ldrb	r3, [r3, #1]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b75      	ldr	r3, [pc, #468]	@ (8000c8c <StartIRTask+0x2ec>)
 8000ab6:	709a      	strb	r2, [r3, #2]

			  HAL_RTC_SetTime(&hrtc, &setup_time, RTC_FORMAT_BIN);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4974      	ldr	r1, [pc, #464]	@ (8000c8c <StartIRTask+0x2ec>)
 8000abc:	4872      	ldr	r0, [pc, #456]	@ (8000c88 <StartIRTask+0x2e8>)
 8000abe:	f003 f9a4 	bl	8003e0a <HAL_RTC_SetTime>
			  DS1302_SetTime(&setup_time, &date);
 8000ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4870      	ldr	r0, [pc, #448]	@ (8000c8c <StartIRTask+0x2ec>)
 8000aca:	f7ff fde5 	bl	8000698 <DS1302_SetTime>

			  current_mode = MODE_IDLE;
 8000ace:	4b64      	ldr	r3, [pc, #400]	@ (8000c60 <StartIRTask+0x2c0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
			  selected_time_field = TIME_FIELD_NONE;
 8000ad4:	4b63      	ldr	r3, [pc, #396]	@ (8000c64 <StartIRTask+0x2c4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]

			  osMutexAcquire(LCDMutexHandle, osWaitForever);
 8000ada:	4b69      	ldr	r3, [pc, #420]	@ (8000c80 <StartIRTask+0x2e0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 fb00 	bl	80060e8 <osMutexAcquire>
			  LCD_SetCursor(1, 0);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2001      	movs	r0, #1
 8000aec:	f000 fdcd 	bl	800168a <LCD_SetCursor>
			  LCD_Print("Time Set Done     ");
 8000af0:	4867      	ldr	r0, [pc, #412]	@ (8000c90 <StartIRTask+0x2f0>)
 8000af2:	f000 fde5 	bl	80016c0 <LCD_Print>
			  osMutexRelease(LCDMutexHandle);
 8000af6:	4b62      	ldr	r3, [pc, #392]	@ (8000c80 <StartIRTask+0x2e0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f005 fb3f 	bl	800617e <osMutexRelease>

			  time_set_done_flag = 1;
 8000b00:	4b64      	ldr	r3, [pc, #400]	@ (8000c94 <StartIRTask+0x2f4>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
			  time_set_done_tick = osKernelGetTickCount();
 8000b06:	f005 f9a7 	bl	8005e58 <osKernelGetTickCount>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a62      	ldr	r2, [pc, #392]	@ (8000c98 <StartIRTask+0x2f8>)
 8000b0e:	6013      	str	r3, [r2, #0]
			  osDelay(1000);
 8000b10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b14:	f005 fa47 	bl	8005fa6 <osDelay>
 8000b18:	e2d3      	b.n	80010c2 <StartIRTask+0x722>
			}
		  }

		  else if (cmd == 0x43) { // Play 버튼: 알람 설정 진입 또는 완료
 8000b1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b1e:	2b43      	cmp	r3, #67	@ 0x43
 8000b20:	f040 80d6 	bne.w	8000cd0 <StartIRTask+0x330>
			if (current_mode == MODE_IDLE) {
 8000b24:	4b4e      	ldr	r3, [pc, #312]	@ (8000c60 <StartIRTask+0x2c0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d13d      	bne.n	8000ba8 <StartIRTask+0x208>
			  current_mode = MODE_SET_ALARM;
 8000b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000c60 <StartIRTask+0x2c0>)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	701a      	strb	r2, [r3, #0]
			  selected_alarm_field = ALARM_FIELD_HOUR;
 8000b32:	4b5a      	ldr	r3, [pc, #360]	@ (8000c9c <StartIRTask+0x2fc>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]

			  alarm_hour_input_idx = alarm_min_input_idx = alarm_sec_input_idx = 0;
 8000b38:	4b59      	ldr	r3, [pc, #356]	@ (8000ca0 <StartIRTask+0x300>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	4b58      	ldr	r3, [pc, #352]	@ (8000ca0 <StartIRTask+0x300>)
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	4b58      	ldr	r3, [pc, #352]	@ (8000ca4 <StartIRTask+0x304>)
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	4b57      	ldr	r3, [pc, #348]	@ (8000ca4 <StartIRTask+0x304>)
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	4b57      	ldr	r3, [pc, #348]	@ (8000ca8 <StartIRTask+0x308>)
 8000b4c:	701a      	strb	r2, [r3, #0]
			  alarm_hour_digits[0] = alarm_hour_digits[1] = 0;
 8000b4e:	4b57      	ldr	r3, [pc, #348]	@ (8000cac <StartIRTask+0x30c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	705a      	strb	r2, [r3, #1]
 8000b54:	4b55      	ldr	r3, [pc, #340]	@ (8000cac <StartIRTask+0x30c>)
 8000b56:	785a      	ldrb	r2, [r3, #1]
 8000b58:	4b54      	ldr	r3, [pc, #336]	@ (8000cac <StartIRTask+0x30c>)
 8000b5a:	701a      	strb	r2, [r3, #0]
			  alarm_min_digits[0] = alarm_min_digits[1] = 0;
 8000b5c:	4b54      	ldr	r3, [pc, #336]	@ (8000cb0 <StartIRTask+0x310>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	705a      	strb	r2, [r3, #1]
 8000b62:	4b53      	ldr	r3, [pc, #332]	@ (8000cb0 <StartIRTask+0x310>)
 8000b64:	785a      	ldrb	r2, [r3, #1]
 8000b66:	4b52      	ldr	r3, [pc, #328]	@ (8000cb0 <StartIRTask+0x310>)
 8000b68:	701a      	strb	r2, [r3, #0]
			  alarm_sec_digits[0] = alarm_sec_digits[1] = 0;
 8000b6a:	4b52      	ldr	r3, [pc, #328]	@ (8000cb4 <StartIRTask+0x314>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	705a      	strb	r2, [r3, #1]
 8000b70:	4b50      	ldr	r3, [pc, #320]	@ (8000cb4 <StartIRTask+0x314>)
 8000b72:	785a      	ldrb	r2, [r3, #1]
 8000b74:	4b4f      	ldr	r3, [pc, #316]	@ (8000cb4 <StartIRTask+0x314>)
 8000b76:	701a      	strb	r2, [r3, #0]

			  osMutexAcquire(LCDMutexHandle, osWaitForever);
 8000b78:	4b41      	ldr	r3, [pc, #260]	@ (8000c80 <StartIRTask+0x2e0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	4618      	mov	r0, r3
 8000b82:	f005 fab1 	bl	80060e8 <osMutexAcquire>
			  LCD_SetCursor(1, 0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 fd7e 	bl	800168a <LCD_SetCursor>
			  LCD_Print("Setup Alarm...");
 8000b8e:	484a      	ldr	r0, [pc, #296]	@ (8000cb8 <StartIRTask+0x318>)
 8000b90:	f000 fd96 	bl	80016c0 <LCD_Print>
			  osMutexRelease(LCDMutexHandle);
 8000b94:	4b3a      	ldr	r3, [pc, #232]	@ (8000c80 <StartIRTask+0x2e0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f005 faf0 	bl	800617e <osMutexRelease>
			  osDelay(1000);
 8000b9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ba2:	f005 fa00 	bl	8005fa6 <osDelay>
 8000ba6:	e28c      	b.n	80010c2 <StartIRTask+0x722>
			}
			else if (current_mode == MODE_SET_ALARM) {
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c60 <StartIRTask+0x2c0>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	f040 8288 	bne.w	80010c2 <StartIRTask+0x722>
			  alarm_hour = alarm_hour_digits[0] * 10 + alarm_hour_digits[1];
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8000cac <StartIRTask+0x30c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cac <StartIRTask+0x30c>)
 8000bc2:	785b      	ldrb	r3, [r3, #1]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8000cbc <StartIRTask+0x31c>)
 8000bca:	701a      	strb	r2, [r3, #0]
			  alarm_min = alarm_min_digits[0] * 10 + alarm_min_digits[1];
 8000bcc:	4b38      	ldr	r3, [pc, #224]	@ (8000cb0 <StartIRTask+0x310>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b35      	ldr	r3, [pc, #212]	@ (8000cb0 <StartIRTask+0x310>)
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	4413      	add	r3, r2
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b37      	ldr	r3, [pc, #220]	@ (8000cc0 <StartIRTask+0x320>)
 8000be4:	701a      	strb	r2, [r3, #0]
			  alarm_sec = alarm_sec_digits[0] * 10 + alarm_sec_digits[1];
 8000be6:	4b33      	ldr	r3, [pc, #204]	@ (8000cb4 <StartIRTask+0x314>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb4 <StartIRTask+0x314>)
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b31      	ldr	r3, [pc, #196]	@ (8000cc4 <StartIRTask+0x324>)
 8000bfe:	701a      	strb	r2, [r3, #0]
			  current_mode = MODE_IDLE;
 8000c00:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <StartIRTask+0x2c0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
			  alarm_is_set = true;
 8000c06:	4b30      	ldr	r3, [pc, #192]	@ (8000cc8 <StartIRTask+0x328>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]

			  char msg[25];
			  sprintf(msg, "Alarm: %02d:%02d:%02d  ", alarm_hour, alarm_min, alarm_sec);
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cbc <StartIRTask+0x31c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc0 <StartIRTask+0x320>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <StartIRTask+0x324>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f107 000c 	add.w	r0, r7, #12
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	460b      	mov	r3, r1
 8000c24:	4929      	ldr	r1, [pc, #164]	@ (8000ccc <StartIRTask+0x32c>)
 8000c26:	f008 fcdd 	bl	80095e4 <siprintf>
			  osMutexAcquire(LCDMutexHandle, osWaitForever);
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <StartIRTask+0x2e0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c32:	4618      	mov	r0, r3
 8000c34:	f005 fa58 	bl	80060e8 <osMutexAcquire>
			  LCD_SetCursor(1, 0);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f000 fd25 	bl	800168a <LCD_SetCursor>
			  LCD_Print(msg);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fd3b 	bl	80016c0 <LCD_Print>
			  osMutexRelease(LCDMutexHandle);
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <StartIRTask+0x2e0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f005 fa95 	bl	800617e <osMutexRelease>
 8000c54:	e235      	b.n	80010c2 <StartIRTask+0x722>
 8000c56:	bf00      	nop
 8000c58:	20000125 	.word	0x20000125
 8000c5c:	20000120 	.word	0x20000120
 8000c60:	2000009c 	.word	0x2000009c
 8000c64:	2000009d 	.word	0x2000009d
 8000c68:	2000013c 	.word	0x2000013c
 8000c6c:	20000140 	.word	0x20000140
 8000c70:	20000144 	.word	0x20000144
 8000c74:	20000148 	.word	0x20000148
 8000c78:	20000147 	.word	0x20000147
 8000c7c:	20000146 	.word	0x20000146
 8000c80:	200000c4 	.word	0x200000c4
 8000c84:	0800a954 	.word	0x0800a954
 8000c88:	2000014c 	.word	0x2000014c
 8000c8c:	20000088 	.word	0x20000088
 8000c90:	0800a968 	.word	0x0800a968
 8000c94:	200000a4 	.word	0x200000a4
 8000c98:	200000a8 	.word	0x200000a8
 8000c9c:	2000009e 	.word	0x2000009e
 8000ca0:	2000012c 	.word	0x2000012c
 8000ca4:	2000012b 	.word	0x2000012b
 8000ca8:	2000012a 	.word	0x2000012a
 8000cac:	20000130 	.word	0x20000130
 8000cb0:	20000134 	.word	0x20000134
 8000cb4:	20000138 	.word	0x20000138
 8000cb8:	0800a97c 	.word	0x0800a97c
 8000cbc:	20000127 	.word	0x20000127
 8000cc0:	20000128 	.word	0x20000128
 8000cc4:	20000129 	.word	0x20000129
 8000cc8:	200000ac 	.word	0x200000ac
 8000ccc:	0800a98c 	.word	0x0800a98c
			}
		  }

		  // 시/분/초 필드 선택
		  else if (cmd == 0x45) { // CH-
 8000cd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000cd4:	2b45      	cmp	r3, #69	@ 0x45
 8000cd6:	d110      	bne.n	8000cfa <StartIRTask+0x35a>
			if (current_mode == MODE_SET_TIME) selected_time_field = TIME_FIELD_HOUR;
 8000cd8:	4bac      	ldr	r3, [pc, #688]	@ (8000f8c <StartIRTask+0x5ec>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d103      	bne.n	8000ce8 <StartIRTask+0x348>
 8000ce0:	4bab      	ldr	r3, [pc, #684]	@ (8000f90 <StartIRTask+0x5f0>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e1ec      	b.n	80010c2 <StartIRTask+0x722>
			else if (current_mode == MODE_SET_ALARM) selected_alarm_field = ALARM_FIELD_HOUR;
 8000ce8:	4ba8      	ldr	r3, [pc, #672]	@ (8000f8c <StartIRTask+0x5ec>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	f040 81e8 	bne.w	80010c2 <StartIRTask+0x722>
 8000cf2:	4ba8      	ldr	r3, [pc, #672]	@ (8000f94 <StartIRTask+0x5f4>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e1e3      	b.n	80010c2 <StartIRTask+0x722>
		  }
		  else if (cmd == 0x46) { // CH
 8000cfa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000cfe:	2b46      	cmp	r3, #70	@ 0x46
 8000d00:	d110      	bne.n	8000d24 <StartIRTask+0x384>
			if (current_mode == MODE_SET_TIME) selected_time_field = TIME_FIELD_MINUTE;
 8000d02:	4ba2      	ldr	r3, [pc, #648]	@ (8000f8c <StartIRTask+0x5ec>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d103      	bne.n	8000d12 <StartIRTask+0x372>
 8000d0a:	4ba1      	ldr	r3, [pc, #644]	@ (8000f90 <StartIRTask+0x5f0>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e1d7      	b.n	80010c2 <StartIRTask+0x722>
			else if (current_mode == MODE_SET_ALARM) selected_alarm_field = ALARM_FIELD_MINUTE;
 8000d12:	4b9e      	ldr	r3, [pc, #632]	@ (8000f8c <StartIRTask+0x5ec>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	f040 81d3 	bne.w	80010c2 <StartIRTask+0x722>
 8000d1c:	4b9d      	ldr	r3, [pc, #628]	@ (8000f94 <StartIRTask+0x5f4>)
 8000d1e:	2202      	movs	r2, #2
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e1ce      	b.n	80010c2 <StartIRTask+0x722>
		  }
		  else if (cmd == 0x47) { // CH+
 8000d24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d28:	2b47      	cmp	r3, #71	@ 0x47
 8000d2a:	d110      	bne.n	8000d4e <StartIRTask+0x3ae>
			if (current_mode == MODE_SET_TIME) selected_time_field = TIME_FIELD_SECOND;
 8000d2c:	4b97      	ldr	r3, [pc, #604]	@ (8000f8c <StartIRTask+0x5ec>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d103      	bne.n	8000d3c <StartIRTask+0x39c>
 8000d34:	4b96      	ldr	r3, [pc, #600]	@ (8000f90 <StartIRTask+0x5f0>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e1c2      	b.n	80010c2 <StartIRTask+0x722>
			else if (current_mode == MODE_SET_ALARM) selected_alarm_field = ALARM_FIELD_SECOND;
 8000d3c:	4b93      	ldr	r3, [pc, #588]	@ (8000f8c <StartIRTask+0x5ec>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	f040 81be 	bne.w	80010c2 <StartIRTask+0x722>
 8000d46:	4b93      	ldr	r3, [pc, #588]	@ (8000f94 <StartIRTask+0x5f4>)
 8000d48:	2203      	movs	r2, #3
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e1b9      	b.n	80010c2 <StartIRTask+0x722>
		  }

		  // 숫자 입력 (공통)
		  else if (cmd == 0x16 || cmd == 0x0C || cmd == 0x18 || cmd == 0x5E ||
 8000d4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d52:	2b16      	cmp	r3, #22
 8000d54:	d024      	beq.n	8000da0 <StartIRTask+0x400>
 8000d56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d5a:	2b0c      	cmp	r3, #12
 8000d5c:	d020      	beq.n	8000da0 <StartIRTask+0x400>
 8000d5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d62:	2b18      	cmp	r3, #24
 8000d64:	d01c      	beq.n	8000da0 <StartIRTask+0x400>
 8000d66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d6a:	2b5e      	cmp	r3, #94	@ 0x5e
 8000d6c:	d018      	beq.n	8000da0 <StartIRTask+0x400>
 8000d6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d014      	beq.n	8000da0 <StartIRTask+0x400>
				   cmd == 0x08 || cmd == 0x1C || cmd == 0x5A || cmd == 0x42 ||
 8000d76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d7a:	2b1c      	cmp	r3, #28
 8000d7c:	d010      	beq.n	8000da0 <StartIRTask+0x400>
 8000d7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d82:	2b5a      	cmp	r3, #90	@ 0x5a
 8000d84:	d00c      	beq.n	8000da0 <StartIRTask+0x400>
 8000d86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d8a:	2b42      	cmp	r3, #66	@ 0x42
 8000d8c:	d008      	beq.n	8000da0 <StartIRTask+0x400>
 8000d8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d92:	2b52      	cmp	r3, #82	@ 0x52
 8000d94:	d004      	beq.n	8000da0 <StartIRTask+0x400>
				   cmd == 0x52 || cmd == 0x4A) {
 8000d96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d9a:	2b4a      	cmp	r3, #74	@ 0x4a
 8000d9c:	f040 8158 	bne.w	8001050 <StartIRTask+0x6b0>
			uint8_t num = 0xFF;
 8000da0:	23ff      	movs	r3, #255	@ 0xff
 8000da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			switch (cmd) {
 8000da6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000daa:	2b1c      	cmp	r3, #28
 8000dac:	dc74      	bgt.n	8000e98 <StartIRTask+0x4f8>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	da42      	bge.n	8000e38 <StartIRTask+0x498>
 8000db2:	e09e      	b.n	8000ef2 <StartIRTask+0x552>
 8000db4:	3b42      	subs	r3, #66	@ 0x42
 8000db6:	2b1c      	cmp	r3, #28
 8000db8:	f200 809b 	bhi.w	8000ef2 <StartIRTask+0x552>
 8000dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc4 <StartIRTask+0x424>)
 8000dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc2:	bf00      	nop
 8000dc4:	08000edb 	.word	0x08000edb
 8000dc8:	08000ef3 	.word	0x08000ef3
 8000dcc:	08000ef3 	.word	0x08000ef3
 8000dd0:	08000ef3 	.word	0x08000ef3
 8000dd4:	08000ef3 	.word	0x08000ef3
 8000dd8:	08000ef3 	.word	0x08000ef3
 8000ddc:	08000ef3 	.word	0x08000ef3
 8000de0:	08000ef3 	.word	0x08000ef3
 8000de4:	08000eeb 	.word	0x08000eeb
 8000de8:	08000ef3 	.word	0x08000ef3
 8000dec:	08000ef3 	.word	0x08000ef3
 8000df0:	08000ef3 	.word	0x08000ef3
 8000df4:	08000ef3 	.word	0x08000ef3
 8000df8:	08000ef3 	.word	0x08000ef3
 8000dfc:	08000ef3 	.word	0x08000ef3
 8000e00:	08000ef3 	.word	0x08000ef3
 8000e04:	08000ee3 	.word	0x08000ee3
 8000e08:	08000ef3 	.word	0x08000ef3
 8000e0c:	08000ef3 	.word	0x08000ef3
 8000e10:	08000ef3 	.word	0x08000ef3
 8000e14:	08000ef3 	.word	0x08000ef3
 8000e18:	08000ef3 	.word	0x08000ef3
 8000e1c:	08000ef3 	.word	0x08000ef3
 8000e20:	08000ef3 	.word	0x08000ef3
 8000e24:	08000ed3 	.word	0x08000ed3
 8000e28:	08000ef3 	.word	0x08000ef3
 8000e2c:	08000ef3 	.word	0x08000ef3
 8000e30:	08000ef3 	.word	0x08000ef3
 8000e34:	08000ebb 	.word	0x08000ebb
 8000e38:	3b08      	subs	r3, #8
 8000e3a:	2b14      	cmp	r3, #20
 8000e3c:	d859      	bhi.n	8000ef2 <StartIRTask+0x552>
 8000e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e44 <StartIRTask+0x4a4>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000ec3 	.word	0x08000ec3
 8000e48:	08000ef3 	.word	0x08000ef3
 8000e4c:	08000ef3 	.word	0x08000ef3
 8000e50:	08000ef3 	.word	0x08000ef3
 8000e54:	08000eab 	.word	0x08000eab
 8000e58:	08000ef3 	.word	0x08000ef3
 8000e5c:	08000ef3 	.word	0x08000ef3
 8000e60:	08000ef3 	.word	0x08000ef3
 8000e64:	08000ef3 	.word	0x08000ef3
 8000e68:	08000ef3 	.word	0x08000ef3
 8000e6c:	08000ef3 	.word	0x08000ef3
 8000e70:	08000ef3 	.word	0x08000ef3
 8000e74:	08000ef3 	.word	0x08000ef3
 8000e78:	08000ef3 	.word	0x08000ef3
 8000e7c:	08000ea3 	.word	0x08000ea3
 8000e80:	08000ef3 	.word	0x08000ef3
 8000e84:	08000eb3 	.word	0x08000eb3
 8000e88:	08000ef3 	.word	0x08000ef3
 8000e8c:	08000ef3 	.word	0x08000ef3
 8000e90:	08000ef3 	.word	0x08000ef3
 8000e94:	08000ecb 	.word	0x08000ecb
 8000e98:	2b5e      	cmp	r3, #94	@ 0x5e
 8000e9a:	dc2a      	bgt.n	8000ef2 <StartIRTask+0x552>
 8000e9c:	2b42      	cmp	r3, #66	@ 0x42
 8000e9e:	da89      	bge.n	8000db4 <StartIRTask+0x414>
 8000ea0:	e027      	b.n	8000ef2 <StartIRTask+0x552>
			  case 0x16: num = 0; break;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ea8:	e023      	b.n	8000ef2 <StartIRTask+0x552>
			  case 0x0C: num = 1; break;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000eb0:	e01f      	b.n	8000ef2 <StartIRTask+0x552>
			  case 0x18: num = 2; break;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000eb8:	e01b      	b.n	8000ef2 <StartIRTask+0x552>
			  case 0x5E: num = 3; break;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ec0:	e017      	b.n	8000ef2 <StartIRTask+0x552>
			  case 0x08: num = 4; break;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ec8:	e013      	b.n	8000ef2 <StartIRTask+0x552>
			  case 0x1C: num = 5; break;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ed0:	e00f      	b.n	8000ef2 <StartIRTask+0x552>
			  case 0x5A: num = 6; break;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ed8:	e00b      	b.n	8000ef2 <StartIRTask+0x552>
			  case 0x42: num = 7; break;
 8000eda:	2307      	movs	r3, #7
 8000edc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ee0:	e007      	b.n	8000ef2 <StartIRTask+0x552>
			  case 0x52: num = 8; break;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ee8:	e003      	b.n	8000ef2 <StartIRTask+0x552>
			  case 0x4A: num = 9; break;
 8000eea:	2309      	movs	r3, #9
 8000eec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ef0:	bf00      	nop
			}

			if (current_mode == MODE_SET_TIME && selected_time_field != TIME_FIELD_NONE) {
 8000ef2:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <StartIRTask+0x5ec>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d15a      	bne.n	8000fb0 <StartIRTask+0x610>
 8000efa:	4b25      	ldr	r3, [pc, #148]	@ (8000f90 <StartIRTask+0x5f0>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d056      	beq.n	8000fb0 <StartIRTask+0x610>
			  if (selected_time_field == TIME_FIELD_HOUR) {
 8000f02:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <StartIRTask+0x5f0>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d112      	bne.n	8000f30 <StartIRTask+0x590>
				setup_hour_digits[setup_hour_input_idx] = num;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <StartIRTask+0x5f8>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4a22      	ldr	r2, [pc, #136]	@ (8000f9c <StartIRTask+0x5fc>)
 8000f12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f16:	5453      	strb	r3, [r2, r1]
				setup_hour_input_idx = (setup_hour_input_idx + 1) % 2;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <StartIRTask+0x5f8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	bfb8      	it	lt
 8000f26:	425b      	neglt	r3, r3
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <StartIRTask+0x5f8>)
 8000f2c:	701a      	strb	r2, [r3, #0]
			  if (selected_time_field == TIME_FIELD_HOUR) {
 8000f2e:	e08d      	b.n	800104c <StartIRTask+0x6ac>
			  }
			  else if (selected_time_field == TIME_FIELD_MINUTE) {
 8000f30:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <StartIRTask+0x5f0>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d112      	bne.n	8000f5e <StartIRTask+0x5be>
				setup_min_digits[setup_min_input_idx] = num;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <StartIRTask+0x600>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4a19      	ldr	r2, [pc, #100]	@ (8000fa4 <StartIRTask+0x604>)
 8000f40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f44:	5453      	strb	r3, [r2, r1]
				setup_min_input_idx = (setup_min_input_idx + 1) % 2;
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <StartIRTask+0x600>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	bfb8      	it	lt
 8000f54:	425b      	neglt	r3, r3
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <StartIRTask+0x600>)
 8000f5a:	701a      	strb	r2, [r3, #0]
			  if (selected_time_field == TIME_FIELD_HOUR) {
 8000f5c:	e076      	b.n	800104c <StartIRTask+0x6ac>
			  }
			  else if (selected_time_field == TIME_FIELD_SECOND) {
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <StartIRTask+0x5f0>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d172      	bne.n	800104c <StartIRTask+0x6ac>
				setup_sec_digits[setup_sec_input_idx] = num;
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <StartIRTask+0x608>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fac <StartIRTask+0x60c>)
 8000f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f72:	5453      	strb	r3, [r2, r1]
				setup_sec_input_idx = (setup_sec_input_idx + 1) % 2;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <StartIRTask+0x608>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	bfb8      	it	lt
 8000f82:	425b      	neglt	r3, r3
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <StartIRTask+0x608>)
 8000f88:	701a      	strb	r2, [r3, #0]
			  if (selected_time_field == TIME_FIELD_HOUR) {
 8000f8a:	e05f      	b.n	800104c <StartIRTask+0x6ac>
 8000f8c:	2000009c 	.word	0x2000009c
 8000f90:	2000009d 	.word	0x2000009d
 8000f94:	2000009e 	.word	0x2000009e
 8000f98:	20000146 	.word	0x20000146
 8000f9c:	2000013c 	.word	0x2000013c
 8000fa0:	20000147 	.word	0x20000147
 8000fa4:	20000140 	.word	0x20000140
 8000fa8:	20000148 	.word	0x20000148
 8000fac:	20000144 	.word	0x20000144
			  }
			}
			else if (current_mode == MODE_SET_ALARM && selected_alarm_field != ALARM_FIELD_NONE) {
 8000fb0:	4b47      	ldr	r3, [pc, #284]	@ (80010d0 <StartIRTask+0x730>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	f040 8083 	bne.w	80010c0 <StartIRTask+0x720>
 8000fba:	4b46      	ldr	r3, [pc, #280]	@ (80010d4 <StartIRTask+0x734>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d07e      	beq.n	80010c0 <StartIRTask+0x720>
			  if (selected_alarm_field == ALARM_FIELD_HOUR) {
 8000fc2:	4b44      	ldr	r3, [pc, #272]	@ (80010d4 <StartIRTask+0x734>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d112      	bne.n	8000ff0 <StartIRTask+0x650>
				alarm_hour_digits[alarm_hour_input_idx] = num;
 8000fca:	4b43      	ldr	r3, [pc, #268]	@ (80010d8 <StartIRTask+0x738>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4a42      	ldr	r2, [pc, #264]	@ (80010dc <StartIRTask+0x73c>)
 8000fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fd6:	5453      	strb	r3, [r2, r1]
				alarm_hour_input_idx = (alarm_hour_input_idx + 1) % 2;
 8000fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80010d8 <StartIRTask+0x738>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	bfb8      	it	lt
 8000fe6:	425b      	neglt	r3, r3
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b3b      	ldr	r3, [pc, #236]	@ (80010d8 <StartIRTask+0x738>)
 8000fec:	701a      	strb	r2, [r3, #0]
				   cmd == 0x52 || cmd == 0x4A) {
 8000fee:	e067      	b.n	80010c0 <StartIRTask+0x720>
			  }
			  else if (selected_alarm_field == ALARM_FIELD_MINUTE) {
 8000ff0:	4b38      	ldr	r3, [pc, #224]	@ (80010d4 <StartIRTask+0x734>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d112      	bne.n	800101e <StartIRTask+0x67e>
				alarm_min_digits[alarm_min_input_idx] = num;
 8000ff8:	4b39      	ldr	r3, [pc, #228]	@ (80010e0 <StartIRTask+0x740>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4a39      	ldr	r2, [pc, #228]	@ (80010e4 <StartIRTask+0x744>)
 8001000:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001004:	5453      	strb	r3, [r2, r1]
				alarm_min_input_idx = (alarm_min_input_idx + 1) % 2;
 8001006:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <StartIRTask+0x740>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	bfb8      	it	lt
 8001014:	425b      	neglt	r3, r3
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b31      	ldr	r3, [pc, #196]	@ (80010e0 <StartIRTask+0x740>)
 800101a:	701a      	strb	r2, [r3, #0]
				   cmd == 0x52 || cmd == 0x4A) {
 800101c:	e050      	b.n	80010c0 <StartIRTask+0x720>
			  }
			  else if (selected_alarm_field == ALARM_FIELD_SECOND) {
 800101e:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <StartIRTask+0x734>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b03      	cmp	r3, #3
 8001024:	d14c      	bne.n	80010c0 <StartIRTask+0x720>
				alarm_sec_digits[alarm_sec_input_idx] = num;
 8001026:	4b30      	ldr	r3, [pc, #192]	@ (80010e8 <StartIRTask+0x748>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	4a2f      	ldr	r2, [pc, #188]	@ (80010ec <StartIRTask+0x74c>)
 800102e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001032:	5453      	strb	r3, [r2, r1]
				alarm_sec_input_idx = (alarm_sec_input_idx + 1) % 2;
 8001034:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <StartIRTask+0x748>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <StartIRTask+0x748>)
 8001048:	701a      	strb	r2, [r3, #0]
				   cmd == 0x52 || cmd == 0x4A) {
 800104a:	e039      	b.n	80010c0 <StartIRTask+0x720>
			  if (selected_time_field == TIME_FIELD_HOUR) {
 800104c:	bf00      	nop
				   cmd == 0x52 || cmd == 0x4A) {
 800104e:	e037      	b.n	80010c0 <StartIRTask+0x720>
			  }
			}
		  }

		  // EQ 버튼: 시간/알람 설정 취소
		  else if (cmd == 0x09) {
 8001050:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001054:	2b09      	cmp	r3, #9
 8001056:	d134      	bne.n	80010c2 <StartIRTask+0x722>
			if (current_mode == MODE_SET_TIME || current_mode == MODE_SET_ALARM) {
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <StartIRTask+0x730>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d003      	beq.n	8001068 <StartIRTask+0x6c8>
 8001060:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <StartIRTask+0x730>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d10b      	bne.n	8001080 <StartIRTask+0x6e0>
			  current_mode = MODE_IDLE;
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <StartIRTask+0x730>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
			  selected_time_field = TIME_FIELD_NONE;
 800106e:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <StartIRTask+0x750>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
			  selected_alarm_field = ALARM_FIELD_NONE;
 8001074:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <StartIRTask+0x734>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
			  alarm_is_set = false;
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <StartIRTask+0x754>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
			  }
			  alarm_hour = 0;
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <StartIRTask+0x758>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
			  alarm_min = 0;
 8001086:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <StartIRTask+0x75c>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
			  alarm_sec = 0;
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <StartIRTask+0x760>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]

			  force_lcd_refresh = true;
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <StartIRTask+0x764>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]

			  osMutexAcquire(LCDMutexHandle, osWaitForever);
 8001098:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <StartIRTask+0x768>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	4618      	mov	r0, r3
 80010a2:	f005 f821 	bl	80060e8 <osMutexAcquire>
			  LCD_SetCursor(1, 0);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 faee 	bl	800168a <LCD_SetCursor>
			  LCD_Print("                ");
 80010ae:	4817      	ldr	r0, [pc, #92]	@ (800110c <StartIRTask+0x76c>)
 80010b0:	f000 fb06 	bl	80016c0 <LCD_Print>
			  osMutexRelease(LCDMutexHandle);
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <StartIRTask+0x768>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f005 f860 	bl	800617e <osMutexRelease>
 80010be:	e000      	b.n	80010c2 <StartIRTask+0x722>
				   cmd == 0x52 || cmd == 0x4A) {
 80010c0:	bf00      	nop
			}

		  reset_ir_state();  // 수신 완료 후 초기화
 80010c2:	f000 fa9b 	bl	80015fc <reset_ir_state>
		}
		osDelay(30);
 80010c6:	201e      	movs	r0, #30
 80010c8:	f004 ff6d 	bl	8005fa6 <osDelay>
		if (ir_key_ready) {
 80010cc:	e46c      	b.n	80009a8 <StartIRTask+0x8>
 80010ce:	bf00      	nop
 80010d0:	2000009c 	.word	0x2000009c
 80010d4:	2000009e 	.word	0x2000009e
 80010d8:	2000012a 	.word	0x2000012a
 80010dc:	20000130 	.word	0x20000130
 80010e0:	2000012b 	.word	0x2000012b
 80010e4:	20000134 	.word	0x20000134
 80010e8:	2000012c 	.word	0x2000012c
 80010ec:	20000138 	.word	0x20000138
 80010f0:	2000009d 	.word	0x2000009d
 80010f4:	200000ac 	.word	0x200000ac
 80010f8:	20000127 	.word	0x20000127
 80010fc:	20000128 	.word	0x20000128
 8001100:	20000129 	.word	0x20000129
 8001104:	200000ad 	.word	0x200000ad
 8001108:	200000c4 	.word	0x200000c4
 800110c:	0800a9a4 	.word	0x0800a9a4

08001110 <StartUIStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUIStateTask */
void StartUIStateTask(void *argument)
{
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b091      	sub	sp, #68	@ 0x44
 8001114:	af06      	add	r7, sp, #24
 8001116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUIStateTask */
	char buf[32];
	for (;;) {
		osMutexAcquire(LCDMutexHandle, osWaitForever);
 8001118:	4b54      	ldr	r3, [pc, #336]	@ (800126c <StartUIStateTask+0x15c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	4618      	mov	r0, r3
 8001122:	f004 ffe1 	bl	80060e8 <osMutexAcquire>

		if (time_set_done_flag) {
 8001126:	4b52      	ldr	r3, [pc, #328]	@ (8001270 <StartUIStateTask+0x160>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d014      	beq.n	8001158 <StartUIStateTask+0x48>
			// 메시지 표시한 지 1초가 넘으면 초기 화면으로 복귀
			if ((osKernelGetTickCount() - time_set_done_tick) > 1000) {  // 1000 ticks = 1초 (기본 1ms tick)
 800112e:	f004 fe93 	bl	8005e58 <osKernelGetTickCount>
 8001132:	4602      	mov	r2, r0
 8001134:	4b4f      	ldr	r3, [pc, #316]	@ (8001274 <StartUIStateTask+0x164>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800113e:	f240 808b 	bls.w	8001258 <StartUIStateTask+0x148>
				time_set_done_flag = 0;
 8001142:	4b4b      	ldr	r3, [pc, #300]	@ (8001270 <StartUIStateTask+0x160>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

				// 메시지 지우고 초기화
				LCD_SetCursor(1, 0);
 8001148:	2100      	movs	r1, #0
 800114a:	2001      	movs	r0, #1
 800114c:	f000 fa9d 	bl	800168a <LCD_SetCursor>
				LCD_Print("                ");
 8001150:	4849      	ldr	r0, [pc, #292]	@ (8001278 <StartUIStateTask+0x168>)
 8001152:	f000 fab5 	bl	80016c0 <LCD_Print>
 8001156:	e07f      	b.n	8001258 <StartUIStateTask+0x148>
			}
			// else "Time Set Done" 메시지 유지 (아래에서 안 덮어씀)
		}
		else if (current_mode == MODE_SET_ALARM) {
 8001158:	4b48      	ldr	r3, [pc, #288]	@ (800127c <StartUIStateTask+0x16c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d126      	bne.n	80011ae <StartUIStateTask+0x9e>
			snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
					alarm_hour_digits[0], alarm_hour_digits[1],
 8001160:	4b47      	ldr	r3, [pc, #284]	@ (8001280 <StartUIStateTask+0x170>)
 8001162:	781b      	ldrb	r3, [r3, #0]
			snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 8001164:	461e      	mov	r6, r3
					alarm_hour_digits[0], alarm_hour_digits[1],
 8001166:	4b46      	ldr	r3, [pc, #280]	@ (8001280 <StartUIStateTask+0x170>)
 8001168:	785b      	ldrb	r3, [r3, #1]
			snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 800116a:	461a      	mov	r2, r3
					alarm_min_digits[0], alarm_min_digits[1],
 800116c:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <StartUIStateTask+0x174>)
 800116e:	781b      	ldrb	r3, [r3, #0]
			snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 8001170:	4619      	mov	r1, r3
					alarm_min_digits[0], alarm_min_digits[1],
 8001172:	4b44      	ldr	r3, [pc, #272]	@ (8001284 <StartUIStateTask+0x174>)
 8001174:	785b      	ldrb	r3, [r3, #1]
			snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 8001176:	461c      	mov	r4, r3
					alarm_sec_digits[0], alarm_sec_digits[1]);
 8001178:	4b43      	ldr	r3, [pc, #268]	@ (8001288 <StartUIStateTask+0x178>)
 800117a:	781b      	ldrb	r3, [r3, #0]
			snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 800117c:	461d      	mov	r5, r3
					alarm_sec_digits[0], alarm_sec_digits[1]);
 800117e:	4b42      	ldr	r3, [pc, #264]	@ (8001288 <StartUIStateTask+0x178>)
 8001180:	785b      	ldrb	r3, [r3, #1]
			snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 8001182:	f107 0008 	add.w	r0, r7, #8
 8001186:	9304      	str	r3, [sp, #16]
 8001188:	9503      	str	r5, [sp, #12]
 800118a:	9402      	str	r4, [sp, #8]
 800118c:	9101      	str	r1, [sp, #4]
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	4633      	mov	r3, r6
 8001192:	4a3e      	ldr	r2, [pc, #248]	@ (800128c <StartUIStateTask+0x17c>)
 8001194:	2120      	movs	r1, #32
 8001196:	f008 f9ef 	bl	8009578 <sniprintf>
			LCD_SetCursor(1, 0);
 800119a:	2100      	movs	r1, #0
 800119c:	2001      	movs	r0, #1
 800119e:	f000 fa74 	bl	800168a <LCD_SetCursor>
			LCD_Print(buf);
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fa8a 	bl	80016c0 <LCD_Print>
 80011ac:	e054      	b.n	8001258 <StartUIStateTask+0x148>
		}
		else if (current_mode == MODE_SET_TIME) {
 80011ae:	4b33      	ldr	r3, [pc, #204]	@ (800127c <StartUIStateTask+0x16c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d126      	bne.n	8001204 <StartUIStateTask+0xf4>
			snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
					setup_hour_digits[0], setup_hour_digits[1],
 80011b6:	4b36      	ldr	r3, [pc, #216]	@ (8001290 <StartUIStateTask+0x180>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
			snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 80011ba:	461e      	mov	r6, r3
					setup_hour_digits[0], setup_hour_digits[1],
 80011bc:	4b34      	ldr	r3, [pc, #208]	@ (8001290 <StartUIStateTask+0x180>)
 80011be:	785b      	ldrb	r3, [r3, #1]
			snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 80011c0:	461a      	mov	r2, r3
					setup_min_digits[0], setup_min_digits[1],
 80011c2:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <StartUIStateTask+0x184>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
			snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 80011c6:	4619      	mov	r1, r3
					setup_min_digits[0], setup_min_digits[1],
 80011c8:	4b32      	ldr	r3, [pc, #200]	@ (8001294 <StartUIStateTask+0x184>)
 80011ca:	785b      	ldrb	r3, [r3, #1]
			snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 80011cc:	461c      	mov	r4, r3
					setup_sec_digits[0], setup_sec_digits[1]);
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <StartUIStateTask+0x188>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
			snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 80011d2:	461d      	mov	r5, r3
					setup_sec_digits[0], setup_sec_digits[1]);
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <StartUIStateTask+0x188>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
			snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 80011d8:	f107 0008 	add.w	r0, r7, #8
 80011dc:	9304      	str	r3, [sp, #16]
 80011de:	9503      	str	r5, [sp, #12]
 80011e0:	9402      	str	r4, [sp, #8]
 80011e2:	9101      	str	r1, [sp, #4]
 80011e4:	9200      	str	r2, [sp, #0]
 80011e6:	4633      	mov	r3, r6
 80011e8:	4a2c      	ldr	r2, [pc, #176]	@ (800129c <StartUIStateTask+0x18c>)
 80011ea:	2120      	movs	r1, #32
 80011ec:	f008 f9c4 	bl	8009578 <sniprintf>
			LCD_SetCursor(1, 0);
 80011f0:	2100      	movs	r1, #0
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 fa49 	bl	800168a <LCD_SetCursor>
			LCD_Print(buf);
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fa5f 	bl	80016c0 <LCD_Print>
 8001202:	e029      	b.n	8001258 <StartUIStateTask+0x148>
		}
		else {
		    // 기본 모드
		    if (current_mode == MODE_IDLE) {
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <StartUIStateTask+0x16c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d125      	bne.n	8001258 <StartUIStateTask+0x148>
		        if (alarm_is_set) {
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <StartUIStateTask+0x190>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01a      	beq.n	800124a <StartUIStateTask+0x13a>
		            snprintf(buf, sizeof(buf), "Alarm: %02d:%02d:%02d  ", alarm_hour, alarm_min, alarm_sec);
 8001214:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <StartUIStateTask+0x194>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <StartUIStateTask+0x198>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <StartUIStateTask+0x19c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f107 0008 	add.w	r0, r7, #8
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	460b      	mov	r3, r1
 800122e:	4a20      	ldr	r2, [pc, #128]	@ (80012b0 <StartUIStateTask+0x1a0>)
 8001230:	2120      	movs	r1, #32
 8001232:	f008 f9a1 	bl	8009578 <sniprintf>
		            LCD_SetCursor(1, 0);
 8001236:	2100      	movs	r1, #0
 8001238:	2001      	movs	r0, #1
 800123a:	f000 fa26 	bl	800168a <LCD_SetCursor>
		            LCD_Print(buf);
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fa3c 	bl	80016c0 <LCD_Print>
 8001248:	e006      	b.n	8001258 <StartUIStateTask+0x148>
		        } else {
		            // 알람 설정이 꺼져 있으면 항상 LCD 클리어
		            LCD_SetCursor(1, 0);
 800124a:	2100      	movs	r1, #0
 800124c:	2001      	movs	r0, #1
 800124e:	f000 fa1c 	bl	800168a <LCD_SetCursor>
		            LCD_Print("                ");
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <StartUIStateTask+0x168>)
 8001254:	f000 fa34 	bl	80016c0 <LCD_Print>
		        }
		    }
		}


		osMutexRelease(LCDMutexHandle);
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <StartUIStateTask+0x15c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f004 ff8e 	bl	800617e <osMutexRelease>
		osDelay(200);
 8001262:	20c8      	movs	r0, #200	@ 0xc8
 8001264:	f004 fe9f 	bl	8005fa6 <osDelay>
		osMutexAcquire(LCDMutexHandle, osWaitForever);
 8001268:	e756      	b.n	8001118 <StartUIStateTask+0x8>
 800126a:	bf00      	nop
 800126c:	200000c4 	.word	0x200000c4
 8001270:	200000a4 	.word	0x200000a4
 8001274:	200000a8 	.word	0x200000a8
 8001278:	0800a9a4 	.word	0x0800a9a4
 800127c:	2000009c 	.word	0x2000009c
 8001280:	20000130 	.word	0x20000130
 8001284:	20000134 	.word	0x20000134
 8001288:	20000138 	.word	0x20000138
 800128c:	0800a9b8 	.word	0x0800a9b8
 8001290:	2000013c 	.word	0x2000013c
 8001294:	20000140 	.word	0x20000140
 8001298:	20000144 	.word	0x20000144
 800129c:	0800a9d0 	.word	0x0800a9d0
 80012a0:	200000ac 	.word	0x200000ac
 80012a4:	20000127 	.word	0x20000127
 80012a8:	20000128 	.word	0x20000128
 80012ac:	20000129 	.word	0x20000129
 80012b0:	0800a98c 	.word	0x0800a98c

080012b4 <StartLCDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  char msg[LCD_QUEUE_ITEM_SIZE];
  /* Infinite loop */
  for(;;)
  {
	// 큐에서 메시지 수신 (무한 대기)
	 if (xQueueReceive(lcdQueue, msg, portMAX_DELAY) == pdPASS) {
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <StartLCDTask+0x4c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f107 0108 	add.w	r1, r7, #8
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 f85d 	bl	8007388 <xQueueReceive>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d1f3      	bne.n	80012bc <StartLCDTask+0x8>
		 osMutexAcquire(LCDMutexHandle, osWaitForever);
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <StartLCDTask+0x50>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 ff03 	bl	80060e8 <osMutexAcquire>
		 LCD_SetCursor(0, 0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2000      	movs	r0, #0
 80012e6:	f000 f9d0 	bl	800168a <LCD_SetCursor>
		 LCD_Print(msg);
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f9e6 	bl	80016c0 <LCD_Print>
		 osMutexRelease(LCDMutexHandle);
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <StartLCDTask+0x50>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 ff40 	bl	800617e <osMutexRelease>
	 if (xQueueReceive(lcdQueue, msg, portMAX_DELAY) == pdPASS) {
 80012fe:	e7dd      	b.n	80012bc <StartLCDTask+0x8>
 8001300:	200000a0 	.word	0x200000a0
 8001304:	200000c4 	.word	0x200000c4

08001308 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b4a      	ldr	r3, [pc, #296]	@ (800144c <MX_GPIO_Init+0x144>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a49      	ldr	r2, [pc, #292]	@ (800144c <MX_GPIO_Init+0x144>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b47      	ldr	r3, [pc, #284]	@ (800144c <MX_GPIO_Init+0x144>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b43      	ldr	r3, [pc, #268]	@ (800144c <MX_GPIO_Init+0x144>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a42      	ldr	r2, [pc, #264]	@ (800144c <MX_GPIO_Init+0x144>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b40      	ldr	r3, [pc, #256]	@ (800144c <MX_GPIO_Init+0x144>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	4b3c      	ldr	r3, [pc, #240]	@ (800144c <MX_GPIO_Init+0x144>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a3b      	ldr	r2, [pc, #236]	@ (800144c <MX_GPIO_Init+0x144>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b39      	ldr	r3, [pc, #228]	@ (800144c <MX_GPIO_Init+0x144>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b35      	ldr	r3, [pc, #212]	@ (800144c <MX_GPIO_Init+0x144>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a34      	ldr	r2, [pc, #208]	@ (800144c <MX_GPIO_Init+0x144>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b32      	ldr	r3, [pc, #200]	@ (800144c <MX_GPIO_Init+0x144>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|DS1302_CLK_Pin|DS1302_RST_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 8001394:	482e      	ldr	r0, [pc, #184]	@ (8001450 <MX_GPIO_Init+0x148>)
 8001396:	f001 fa5f 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800139a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4828      	ldr	r0, [pc, #160]	@ (8001454 <MX_GPIO_Init+0x14c>)
 80013b2:	f001 f8b5 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Receiver_Pin */
  GPIO_InitStruct.Pin = IR_Receiver_Pin;
 80013b6:	2301      	movs	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013ba:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80013be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_Receiver_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4821      	ldr	r0, [pc, #132]	@ (8001450 <MX_GPIO_Init+0x148>)
 80013cc:	f001 f8a8 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin DS1302_CLK_Pin DS1302_RST_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|DS1302_CLK_Pin|DS1302_RST_Pin;
 80013d0:	23b0      	movs	r3, #176	@ 0xb0
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	481a      	ldr	r0, [pc, #104]	@ (8001450 <MX_GPIO_Init+0x148>)
 80013e8:	f001 f89a 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS1302_IO_Pin */
  GPIO_InitStruct.Pin = DS1302_IO_Pin;
 80013ec:	2340      	movs	r3, #64	@ 0x40
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS1302_IO_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4814      	ldr	r0, [pc, #80]	@ (8001450 <MX_GPIO_Init+0x148>)
 8001400:	f001 f88e 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001404:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800140e:	2302      	movs	r3, #2
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <MX_GPIO_Init+0x148>)
 800141e:	f001 f87f 	bl	8002520 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2105      	movs	r1, #5
 8001426:	2006      	movs	r0, #6
 8001428:	f000 ffb1 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800142c:	2006      	movs	r0, #6
 800142e:	f000 ffca 	bl	80023c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2105      	movs	r1, #5
 8001436:	2028      	movs	r0, #40	@ 0x28
 8001438:	f000 ffa9 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800143c:	2028      	movs	r0, #40	@ 0x28
 800143e:	f000 ffc2 	bl	80023c6 <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020800 	.word	0x40020800

08001458 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <MX_I2C1_Init+0x54>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001464:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <MX_I2C1_Init+0x58>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001476:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001496:	f001 fa11 	bl	80028bc <HAL_I2C_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a0:	f000 fa42 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200000cc 	.word	0x200000cc
 80014ac:	40005400 	.word	0x40005400
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	@ (8001538 <HAL_I2C_MspInit+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12c      	bne.n	8001530 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <HAL_I2C_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a17      	ldr	r2, [pc, #92]	@ (800153c <HAL_I2C_MspInit+0x88>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_I2C_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f8:	2312      	movs	r3, #18
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001504:	2304      	movs	r3, #4
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	480c      	ldr	r0, [pc, #48]	@ (8001540 <HAL_I2C_MspInit+0x8c>)
 8001510:	f001 f806 	bl	8002520 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <HAL_I2C_MspInit+0x88>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	4a07      	ldr	r2, [pc, #28]	@ (800153c <HAL_I2C_MspInit+0x88>)
 800151e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001522:	6413      	str	r3, [r2, #64]	@ 0x40
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <HAL_I2C_MspInit+0x88>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	@ 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40005400 	.word	0x40005400
 800153c:	40023800 	.word	0x40023800
 8001540:	40020400 	.word	0x40020400

08001544 <check_ir>:
#include "ir_decode.h"
#include "main.h"

void check_ir(uint16_t period)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
    if (!receiving) {
 800154e:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <check_ir+0xa8>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d113      	bne.n	8001580 <check_ir+0x3c>
        if (period > LEADER_MIN && period < LEADER_MAX) {  // 리더 코드 감지 (데이터 수신 시작)
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800155e:	4293      	cmp	r3, r2
 8001560:	d940      	bls.n	80015e4 <check_ir+0xa0>
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	f241 527b 	movw	r2, #5499	@ 0x157b
 8001568:	4293      	cmp	r3, r2
 800156a:	d83b      	bhi.n	80015e4 <check_ir+0xa0>
            receiving = 1;
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <check_ir+0xa8>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
            bit_cnt = 0;
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <check_ir+0xac>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
            ir_data = 0;
 8001578:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <check_ir+0xb0>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
        }
        return;
 800157e:	e031      	b.n	80015e4 <check_ir+0xa0>
    }

    ir_data >>= 1;  // 한 칸 시프트
 8001580:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <check_ir+0xb0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	4a1b      	ldr	r2, [pc, #108]	@ (80015f4 <check_ir+0xb0>)
 8001588:	6013      	str	r3, [r2, #0]

    // 1비트 구간이면 MSB를 1로 설정
    if (period > BIT1_MIN && period < BIT1_MAX) {
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	f240 526e 	movw	r2, #1390	@ 0x56e
 8001590:	4293      	cmp	r3, r2
 8001592:	d90b      	bls.n	80015ac <check_ir+0x68>
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800159a:	4293      	cmp	r3, r2
 800159c:	d806      	bhi.n	80015ac <check_ir+0x68>
        ir_data |= 0x80000000;
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <check_ir+0xb0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015a6:	4a13      	ldr	r2, [pc, #76]	@ (80015f4 <check_ir+0xb0>)
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e00a      	b.n	80015c2 <check_ir+0x7e>
    }
    // 0비트 구간도 아니고 1비트 구간도 아니면 잘못된 신호로 간주
    else if (!(period > BIT0_MIN && period < BIT0_MAX)) {
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 80015b2:	d303      	bcc.n	80015bc <check_ir+0x78>
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	f5b3 7f3f 	cmp.w	r3, #764	@ 0x2fc
 80015ba:	d902      	bls.n	80015c2 <check_ir+0x7e>
        reset_ir_state();
 80015bc:	f000 f81e 	bl	80015fc <reset_ir_state>
        return;
 80015c0:	e011      	b.n	80015e6 <check_ir+0xa2>
    }

    // 32비트 수신 완료 시
    if (++bit_cnt == 32) {
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <check_ir+0xac>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4a08      	ldr	r2, [pc, #32]	@ (80015f0 <check_ir+0xac>)
 80015ce:	4619      	mov	r1, r3
 80015d0:	7011      	strb	r1, [r2, #0]
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	d107      	bne.n	80015e6 <check_ir+0xa2>
        ir_key_ready = 1;
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <check_ir+0xb4>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
        receiving = 0;
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <check_ir+0xa8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e000      	b.n	80015e6 <check_ir+0xa2>
        return;
 80015e4:	bf00      	nop
    }
}
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000126 	.word	0x20000126
 80015f0:	20000124 	.word	0x20000124
 80015f4:	20000120 	.word	0x20000120
 80015f8:	20000125 	.word	0x20000125

080015fc <reset_ir_state>:

void reset_ir_state(void) // 신호의 유효값을 벗어나면 해당 값들을 0으로 초기화
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
    ir_data = 0;
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <reset_ir_state+0x28>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
    bit_cnt = 0;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <reset_ir_state+0x2c>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
    receiving = 0;
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <reset_ir_state+0x30>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    ir_key_ready = 0;
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <reset_ir_state+0x34>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000120 	.word	0x20000120
 8001628:	20000124 	.word	0x20000124
 800162c:	20000126 	.word	0x20000126
 8001630:	20000125 	.word	0x20000125

08001634 <LCD_Delay>:

static void LCD_Send_Cmd(uint8_t cmd);
static void LCD_Send_Data(uint8_t data);
static void LCD_Send(uint8_t data, uint8_t mode);

static void LCD_Delay(uint32_t ms) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    osDelay(ms);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f004 fcb2 	bl	8005fa6 <osDelay>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef *hi2c) {
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
    LCD_Delay(50);
 8001652:	2032      	movs	r0, #50	@ 0x32
 8001654:	f7ff ffee 	bl	8001634 <LCD_Delay>
    LCD_Send_Cmd(0x33);
 8001658:	2033      	movs	r0, #51	@ 0x33
 800165a:	f000 f846 	bl	80016ea <LCD_Send_Cmd>
    LCD_Send_Cmd(0x32);
 800165e:	2032      	movs	r0, #50	@ 0x32
 8001660:	f000 f843 	bl	80016ea <LCD_Send_Cmd>
    LCD_Send_Cmd(0x28);
 8001664:	2028      	movs	r0, #40	@ 0x28
 8001666:	f000 f840 	bl	80016ea <LCD_Send_Cmd>
    LCD_Send_Cmd(0x0C);
 800166a:	200c      	movs	r0, #12
 800166c:	f000 f83d 	bl	80016ea <LCD_Send_Cmd>
    LCD_Send_Cmd(0x06);
 8001670:	2006      	movs	r0, #6
 8001672:	f000 f83a 	bl	80016ea <LCD_Send_Cmd>
    LCD_Send_Cmd(0x01);
 8001676:	2001      	movs	r0, #1
 8001678:	f000 f837 	bl	80016ea <LCD_Send_Cmd>
    LCD_Delay(5);
 800167c:	2005      	movs	r0, #5
 800167e:	f7ff ffd9 	bl	8001634 <LCD_Delay>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	460a      	mov	r2, r1
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	4613      	mov	r3, r2
 8001698:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? 0x80 + col : 0xC0 + col;
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <LCD_SetCursor+0x1e>
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	3b80      	subs	r3, #128	@ 0x80
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	e002      	b.n	80016ae <LCD_SetCursor+0x24>
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	3b40      	subs	r3, #64	@ 0x40
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	73fb      	strb	r3, [r7, #15]
    LCD_Send_Cmd(addr);
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f819 	bl	80016ea <LCD_Send_Cmd>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <LCD_Print>:

void LCD_Print(char *str) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    while (*str) {
 80016c8:	e006      	b.n	80016d8 <LCD_Print+0x18>
        LCD_Send_Data(*str++);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f821 	bl	800171a <LCD_Send_Data>
    while (*str) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f4      	bne.n	80016ca <LCD_Print+0xa>
    }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <LCD_Send_Cmd>:
void LCD_Clear(void) {
    LCD_Send_Cmd(0x01);
    LCD_Delay(2);
}

static void LCD_Send_Cmd(uint8_t cmd) {
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd & 0xF0, 0);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f023 030f 	bic.w	r3, r3, #15
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f824 	bl	800174c <LCD_Send>
    LCD_Send((cmd << 4) & 0xF0, 0);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f81d 	bl	800174c <LCD_Send>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <LCD_Send_Data>:

static void LCD_Send_Data(uint8_t data) {
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data & 0xF0, 1);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f023 030f 	bic.w	r3, r3, #15
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2101      	movs	r1, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f80c 	bl	800174c <LCD_Send>
    LCD_Send((data << 4) & 0xF0, 1);
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2101      	movs	r1, #1
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f805 	bl	800174c <LCD_Send>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <LCD_Send>:

static void LCD_Send(uint8_t data, uint8_t mode) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af02      	add	r7, sp, #8
 8001752:	4603      	mov	r3, r0
 8001754:	460a      	mov	r2, r1
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	4613      	mov	r3, r2
 800175a:	71bb      	strb	r3, [r7, #6]
    uint8_t data_u = data | (mode ? 0x01 : 0x00) | 0x08; // backlight
 800175c:	79bb      	ldrb	r3, [r7, #6]
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	b25a      	sxtb	r2, r3
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	4313      	orrs	r3, r2
 8001770:	b25b      	sxtb	r3, r3
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	b25b      	sxtb	r3, r3
 8001778:	73fb      	strb	r3, [r7, #15]
    uint8_t en_high = data_u | 0x04;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	73bb      	strb	r3, [r7, #14]
    uint8_t en_low  = data_u & ~0x04;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[2] = {en_high, en_low};
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	723b      	strb	r3, [r7, #8]
 800178e:	7b7b      	ldrb	r3, [r7, #13]
 8001790:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, 2, 100);
 8001792:	f107 0208 	add.w	r2, r7, #8
 8001796:	2364      	movs	r3, #100	@ 0x64
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2302      	movs	r3, #2
 800179c:	214e      	movs	r1, #78	@ 0x4e
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <LCD_Send+0x68>)
 80017a0:	f001 f9d0 	bl	8002b44 <HAL_I2C_Master_Transmit>
    LCD_Delay(1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f7ff ff45 	bl	8001634 <LCD_Delay>
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200000cc 	.word	0x200000cc

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017bc:	f000 fc9a 	bl	80020f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c0:	f000 f822 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c4:	f7ff fda0 	bl	8001308 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017c8:	f000 fbde 	bl	8001f88 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017cc:	f7ff fe44 	bl	8001458 <MX_I2C1_Init>
  MX_RTC_Init();
 80017d0:	f000 f8b0 	bl	8001934 <MX_RTC_Init>
  MX_TIM2_Init();
 80017d4:	f000 fb66 	bl	8001ea4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); // TIM2 타이머 시작
 80017d8:	4809      	ldr	r0, [pc, #36]	@ (8001800 <main+0x48>)
 80017da:	f002 ffa7 	bl	800472c <HAL_TIM_Base_Start>
  reset_ir_state();
 80017de:	f7ff ff0d 	bl	80015fc <reset_ir_state>

  // 처음 한 번만 RTC 설정
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x0000);  // 강제 초기화 (개발 중 1회)
 80017e2:	2200      	movs	r2, #0
 80017e4:	2101      	movs	r1, #1
 80017e6:	4807      	ldr	r0, [pc, #28]	@ (8001804 <main+0x4c>)
 80017e8:	f002 ff2c 	bl	8004644 <HAL_RTCEx_BKUPWrite>
  //if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2) {
      Parse_CompileTime_And_Set_RTC();  // 최초 1회만 설정
 80017ec:	f000 f962 	bl	8001ab4 <Parse_CompileTime_And_Set_RTC>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80017f0:	f004 fae8 	bl	8005dc4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017f4:	f7fe ffd0 	bl	8000798 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80017f8:	f004 fb08 	bl	8005e0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <main+0x44>
 8001800:	20000170 	.word	0x20000170
 8001804:	2000014c 	.word	0x2000014c

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	@ 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	2230      	movs	r2, #48	@ 0x30
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f007 ff49 	bl	80096ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <SystemClock_Config+0xd0>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	4a28      	ldr	r2, [pc, #160]	@ (80018d8 <SystemClock_Config+0xd0>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	@ 0x40
 800183c:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <SystemClock_Config+0xd0>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <SystemClock_Config+0xd4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a22      	ldr	r2, [pc, #136]	@ (80018dc <SystemClock_Config+0xd4>)
 8001852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <SystemClock_Config+0xd4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001864:	230a      	movs	r3, #10
 8001866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001868:	2301      	movs	r3, #1
 800186a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186c:	2310      	movs	r3, #16
 800186e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001870:	2301      	movs	r3, #1
 8001872:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001874:	2302      	movs	r3, #2
 8001876:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001878:	2300      	movs	r3, #0
 800187a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800187c:	2310      	movs	r3, #16
 800187e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001880:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001884:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001886:	2304      	movs	r3, #4
 8001888:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800188a:	2304      	movs	r3, #4
 800188c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fcb0 	bl	80031f8 <HAL_RCC_OscConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800189e:	f000 f843 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a2:	230f      	movs	r3, #15
 80018a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a6:	2302      	movs	r3, #2
 80018a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2102      	movs	r1, #2
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 ff12 	bl	80036e8 <HAL_RCC_ClockConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018ca:	f000 f82d 	bl	8001928 <Error_Handler>
  }
}
 80018ce:	bf00      	nop
 80018d0:	3750      	adds	r7, #80	@ 0x50
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40007000 	.word	0x40007000

080018e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d113      	bne.n	8001918 <HAL_GPIO_EXTI_Callback+0x38>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80018f0:	2101      	movs	r1, #1
 80018f2:	480b      	ldr	r0, [pc, #44]	@ (8001920 <HAL_GPIO_EXTI_Callback+0x40>)
 80018f4:	f000 ff98 	bl	8002828 <HAL_GPIO_ReadPin>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d104      	bne.n	8001908 <HAL_GPIO_EXTI_Callback+0x28>
        {
            __HAL_TIM_SET_COUNTER(&htim2, 0); // Rising : 시간 초기
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x44>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24
        {
            uint16_t delta = __HAL_TIM_GET_COUNTER(&htim2); // Falling : 시간 측정
            check_ir(delta);
        }
    }
}
 8001906:	e007      	b.n	8001918 <HAL_GPIO_EXTI_Callback+0x38>
            uint16_t delta = __HAL_TIM_GET_COUNTER(&htim2); // Falling : 시간 측정
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x44>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	81fb      	strh	r3, [r7, #14]
            check_ir(delta);
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe16 	bl	8001544 <check_ir>
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020000 	.word	0x40020000
 8001924:	20000170 	.word	0x20000170

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <Error_Handler+0x8>

08001934 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b090      	sub	sp, #64	@ 0x40
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800193a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800194e:	463b      	mov	r3, r7
 8001950:	2228      	movs	r2, #40	@ 0x28
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f007 feaa 	bl	80096ae <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800195a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a44 <MX_RTC_Init+0x110>)
 800195c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a48 <MX_RTC_Init+0x114>)
 800195e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001960:	4b38      	ldr	r3, [pc, #224]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001966:	4b37      	ldr	r3, [pc, #220]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001968:	227f      	movs	r2, #127	@ 0x7f
 800196a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800196c:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <MX_RTC_Init+0x110>)
 800196e:	22ff      	movs	r2, #255	@ 0xff
 8001970:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001978:	4b32      	ldr	r3, [pc, #200]	@ (8001a44 <MX_RTC_Init+0x110>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001984:	482f      	ldr	r0, [pc, #188]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001986:	f002 f9bf 	bl	8003d08 <HAL_RTC_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001990:	f7ff ffca 	bl	8001928 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b2:	2201      	movs	r2, #1
 80019b4:	4619      	mov	r1, r3
 80019b6:	4823      	ldr	r0, [pc, #140]	@ (8001a44 <MX_RTC_Init+0x110>)
 80019b8:	f002 fa27 	bl	8003e0a <HAL_RTC_SetTime>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80019c2:	f7ff ffb1 	bl	8001928 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e2:	2201      	movs	r2, #1
 80019e4:	4619      	mov	r1, r3
 80019e6:	4817      	ldr	r0, [pc, #92]	@ (8001a44 <MX_RTC_Init+0x110>)
 80019e8:	f002 fb07 	bl	8003ffa <HAL_RTC_SetDate>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80019f2:	f7ff ff99 	bl	8001928 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001a2e:	f002 fbb7 	bl	80041a0 <HAL_RTC_SetAlarm_IT>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001a38:	f7ff ff76 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	3740      	adds	r7, #64	@ 0x40
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000014c 	.word	0x2000014c
 8001a48:	40002800 	.word	0x40002800

08001a4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
 8001a64:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a10      	ldr	r2, [pc, #64]	@ (8001aac <HAL_RTC_MspInit+0x60>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d119      	bne.n	8001aa4 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a70:	2302      	movs	r3, #2
 8001a72:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a78:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 f852 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a8a:	f7ff ff4d 	bl	8001928 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_RTC_MspInit+0x64>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2105      	movs	r1, #5
 8001a98:	2029      	movs	r0, #41	@ 0x29
 8001a9a:	f000 fc78 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a9e:	2029      	movs	r0, #41	@ 0x29
 8001aa0:	f000 fc91 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40002800 	.word	0x40002800
 8001ab0:	42470e3c 	.word	0x42470e3c

08001ab4 <Parse_CompileTime_And_Set_RTC>:
  }
}

/* USER CODE BEGIN 1 */
void Parse_CompileTime_And_Set_RTC(void)
{
 8001ab4:	b5b0      	push	{r4, r5, r7, lr}
 8001ab6:	b09c      	sub	sp, #112	@ 0x70
 8001ab8:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8001aba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8001aca:	2300      	movs	r3, #0
 8001acc:	64bb      	str	r3, [r7, #72]	@ 0x48

    char time_str[] = __TIME__;
 8001ace:	4a4b      	ldr	r2, [pc, #300]	@ (8001bfc <Parse_CompileTime_And_Set_RTC+0x148>)
 8001ad0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ad4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad6:	c303      	stmia	r3!, {r0, r1}
 8001ad8:	701a      	strb	r2, [r3, #0]
    sTime.Hours = atoi(strtok(time_str, ":"));
 8001ada:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ade:	4948      	ldr	r1, [pc, #288]	@ (8001c00 <Parse_CompileTime_And_Set_RTC+0x14c>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f007 fdff 	bl	80096e4 <strtok>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f007 fbfb 	bl	80092e4 <atoi>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    sTime.Minutes = atoi(strtok(NULL, ":"));
 8001af6:	4942      	ldr	r1, [pc, #264]	@ (8001c00 <Parse_CompileTime_And_Set_RTC+0x14c>)
 8001af8:	2000      	movs	r0, #0
 8001afa:	f007 fdf3 	bl	80096e4 <strtok>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f007 fbef 	bl	80092e4 <atoi>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    sTime.Seconds = atoi(strtok(NULL, ":"));
 8001b0e:	493c      	ldr	r1, [pc, #240]	@ (8001c00 <Parse_CompileTime_And_Set_RTC+0x14c>)
 8001b10:	2000      	movs	r0, #0
 8001b12:	f007 fde7 	bl	80096e4 <strtok>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f007 fbe3 	bl	80092e4 <atoi>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    char date_str[] = __DATE__;
 8001b26:	4a37      	ldr	r2, [pc, #220]	@ (8001c04 <Parse_CompileTime_And_Set_RTC+0x150>)
 8001b28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    char *month_str = strtok(date_str, " ");
 8001b32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b36:	4934      	ldr	r1, [pc, #208]	@ (8001c08 <Parse_CompileTime_And_Set_RTC+0x154>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f007 fdd3 	bl	80096e4 <strtok>
 8001b3e:	66b8      	str	r0, [r7, #104]	@ 0x68
    char *day_str = strtok(NULL, " ");
 8001b40:	4931      	ldr	r1, [pc, #196]	@ (8001c08 <Parse_CompileTime_And_Set_RTC+0x154>)
 8001b42:	2000      	movs	r0, #0
 8001b44:	f007 fdce 	bl	80096e4 <strtok>
 8001b48:	6678      	str	r0, [r7, #100]	@ 0x64
    char *year_str = strtok(NULL, " ");
 8001b4a:	492f      	ldr	r1, [pc, #188]	@ (8001c08 <Parse_CompileTime_And_Set_RTC+0x154>)
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f007 fdc9 	bl	80096e4 <strtok>
 8001b52:	6638      	str	r0, [r7, #96]	@ 0x60

    const char* months[] = {
 8001b54:	4b2d      	ldr	r3, [pc, #180]	@ (8001c0c <Parse_CompileTime_And_Set_RTC+0x158>)
 8001b56:	463c      	mov	r4, r7
 8001b58:	461d      	mov	r5, r3
 8001b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        "Jan","Feb","Mar","Apr","May","Jun",
        "Jul","Aug","Sep","Oct","Nov","Dec"
    };
    for (int i = 0; i < 12; i++) {
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b6e:	e017      	b.n	8001ba0 <Parse_CompileTime_And_Set_RTC+0xec>
        if (strncmp(month_str, months[i], 3) == 0) {
 8001b70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	3370      	adds	r3, #112	@ 0x70
 8001b76:	443b      	add	r3, r7
 8001b78:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001b82:	f007 fd9c 	bl	80096be <strncmp>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d106      	bne.n	8001b9a <Parse_CompileTime_And_Set_RTC+0xe6>
            sDate.Month = i + 1;
 8001b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            break;
 8001b98:	e005      	b.n	8001ba6 <Parse_CompileTime_And_Set_RTC+0xf2>
    for (int i = 0; i < 12; i++) {
 8001b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ba2:	2b0b      	cmp	r3, #11
 8001ba4:	dde4      	ble.n	8001b70 <Parse_CompileTime_And_Set_RTC+0xbc>
        }
    }

    sDate.Date = atoi(day_str);
 8001ba6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001ba8:	f007 fb9c 	bl	80092e4 <atoi>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    sDate.Year = atoi(year_str) - 2000;
 8001bb4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001bb6:	f007 fb95 	bl	80092e4 <atoi>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	3330      	adds	r3, #48	@ 0x30
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    sDate.WeekDay = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001bcc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <Parse_CompileTime_And_Set_RTC+0x15c>)
 8001bd6:	f002 f918 	bl	8003e0a <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001bda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bde:	2200      	movs	r2, #0
 8001be0:	4619      	mov	r1, r3
 8001be2:	480b      	ldr	r0, [pc, #44]	@ (8001c10 <Parse_CompileTime_And_Set_RTC+0x15c>)
 8001be4:	f002 fa09 	bl	8003ffa <HAL_RTC_SetDate>

    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001be8:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8001bec:	2101      	movs	r1, #1
 8001bee:	4808      	ldr	r0, [pc, #32]	@ (8001c10 <Parse_CompileTime_And_Set_RTC+0x15c>)
 8001bf0:	f002 fd28 	bl	8004644 <HAL_RTCEx_BKUPWrite>
}
 8001bf4:	bf00      	nop
 8001bf6:	3770      	adds	r7, #112	@ 0x70
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfc:	0800a9f0 	.word	0x0800a9f0
 8001c00:	0800a9e8 	.word	0x0800a9e8
 8001c04:	0800a9fc 	.word	0x0800a9fc
 8001c08:	0800a9ec 	.word	0x0800a9ec
 8001c0c:	0800aa38 	.word	0x0800aa38
 8001c10:	2000014c 	.word	0x2000014c

08001c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_MspInit+0x54>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <HAL_MspInit+0x54>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <HAL_MspInit+0x54>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_MspInit+0x54>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <HAL_MspInit+0x54>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <HAL_MspInit+0x54>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	210f      	movs	r1, #15
 8001c56:	f06f 0001 	mvn.w	r0, #1
 8001c5a:	f000 fb98 	bl	800238e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <NMI_Handler+0x4>

08001c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <MemManage_Handler+0x4>

08001c84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <BusFault_Handler+0x4>

08001c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <UsageFault_Handler+0x4>

08001c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca6:	f000 fa77 	bl	8002198 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001caa:	f006 fddf 	bl	800886c <xTaskGetSchedulerState>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d001      	beq.n	8001cb8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001cb4:	f004 ff38 	bl	8006b28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Receiver_Pin);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f000 fde3 	bl	800288c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <TIM2_IRQHandler+0x10>)
 8001cd2:	f002 fd85 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000170 	.word	0x20000170

08001ce0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <USART2_IRQHandler+0x10>)
 8001ce6:	f003 f957 	bl	8004f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200001b8 	.word	0x200001b8

08001cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cf8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cfc:	f000 fdc6 	bl	800288c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001d08:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <RTC_Alarm_IRQHandler+0x10>)
 8001d0a:	f002 fb8d 	bl	8004428 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000014c 	.word	0x2000014c

08001d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_kill>:

int _kill(int pid, int sig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d32:	f007 fdd7 	bl	80098e4 <__errno>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2216      	movs	r2, #22
 8001d3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe7 	bl	8001d28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5a:	bf00      	nop
 8001d5c:	e7fd      	b.n	8001d5a <_exit+0x12>

08001d5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e00a      	b.n	8001d86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d70:	f3af 8000 	nop.w
 8001d74:	4601      	mov	r1, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	60ba      	str	r2, [r7, #8]
 8001d7c:	b2ca      	uxtb	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbf0      	blt.n	8001d70 <_read+0x12>
  }

  return len;
 8001d8e:	687b      	ldr	r3, [r7, #4]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e009      	b.n	8001dbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	60ba      	str	r2, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	dbf1      	blt.n	8001daa <_write+0x12>
  }
  return len;
 8001dc6:	687b      	ldr	r3, [r7, #4]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_close>:

int _close(int file)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_isatty>:

int _isatty(int file)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	@ (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	@ (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f007 fd3c 	bl	80098e4 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	@ (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20020000 	.word	0x20020000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	2000016c 	.word	0x2000016c
 8001ea0:	20004d38 	.word	0x20004d38

08001ea4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	463b      	mov	r3, r7
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <MX_TIM2_Init+0x94>)
 8001ec2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ec6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <MX_TIM2_Init+0x94>)
 8001eca:	2253      	movs	r2, #83	@ 0x53
 8001ecc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <MX_TIM2_Init+0x94>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <MX_TIM2_Init+0x94>)
 8001ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <MX_TIM2_Init+0x94>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <MX_TIM2_Init+0x94>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ee8:	4813      	ldr	r0, [pc, #76]	@ (8001f38 <MX_TIM2_Init+0x94>)
 8001eea:	f002 fbcf 	bl	800468c <HAL_TIM_Base_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ef4:	f7ff fd18 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	4619      	mov	r1, r3
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <MX_TIM2_Init+0x94>)
 8001f06:	f002 fd5b 	bl	80049c0 <HAL_TIM_ConfigClockSource>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f10:	f7ff fd0a 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <MX_TIM2_Init+0x94>)
 8001f22:	f002 ff67 	bl	8004df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f2c:	f7ff fcfc 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000170 	.word	0x20000170

08001f3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f4c:	d115      	bne.n	8001f7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <HAL_TIM_Base_MspInit+0x48>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a0b      	ldr	r2, [pc, #44]	@ (8001f84 <HAL_TIM_Base_MspInit+0x48>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_TIM_Base_MspInit+0x48>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2105      	movs	r1, #5
 8001f6e:	201c      	movs	r0, #28
 8001f70:	f000 fa0d 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f74:	201c      	movs	r0, #28
 8001f76:	f000 fa26 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	@ (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	@ (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fc0:	f002 ff9a 	bl	8004ef8 <HAL_UART_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fca:	f7ff fcad 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200001b8 	.word	0x200001b8
 8001fd8:	40004400 	.word	0x40004400

08001fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	@ 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8002070 <HAL_UART_MspInit+0x94>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d133      	bne.n	8002066 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <HAL_UART_MspInit+0x98>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <HAL_UART_MspInit+0x98>)
 8002008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800200c:	6413      	str	r3, [r2, #64]	@ 0x40
 800200e:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <HAL_UART_MspInit+0x98>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_UART_MspInit+0x98>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <HAL_UART_MspInit+0x98>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6313      	str	r3, [r2, #48]	@ 0x30
 800202a:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <HAL_UART_MspInit+0x98>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002036:	230c      	movs	r3, #12
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002046:	2307      	movs	r3, #7
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	4809      	ldr	r0, [pc, #36]	@ (8002078 <HAL_UART_MspInit+0x9c>)
 8002052:	f000 fa65 	bl	8002520 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2105      	movs	r1, #5
 800205a:	2026      	movs	r0, #38	@ 0x26
 800205c:	f000 f997 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002060:	2026      	movs	r0, #38	@ 0x26
 8002062:	f000 f9b0 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	@ 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40004400 	.word	0x40004400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002080:	f000 f826 	bl	80020d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002086:	490d      	ldr	r1, [pc, #52]	@ (80020bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800209c:	4c0a      	ldr	r4, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020aa:	f007 fc21 	bl	80098f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7ff fb83 	bl	80017b8 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80020c0:	0800ad50 	.word	0x0800ad50
  ldr r2, =_sbss
 80020c4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80020c8:	20004d38 	.word	0x20004d38

080020cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>
	...

080020d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <SystemInit+0x20>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020da:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <SystemInit+0x20>)
 80020dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <HAL_Init+0x40>)
 80020fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002104:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <HAL_Init+0x40>)
 800210a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a07      	ldr	r2, [pc, #28]	@ (8002134 <HAL_Init+0x40>)
 8002116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211c:	2003      	movs	r0, #3
 800211e:	f000 f92b 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002122:	200f      	movs	r0, #15
 8002124:	f000 f808 	bl	8002138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002128:	f7ff fd74 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023c00 	.word	0x40023c00

08002138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <HAL_InitTick+0x54>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_InitTick+0x58>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f943 	bl	80023e2 <HAL_SYSTICK_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00e      	b.n	8002184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d80a      	bhi.n	8002182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f000 f90b 	bl	800238e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4a06      	ldr	r2, [pc, #24]	@ (8002194 <HAL_InitTick+0x5c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000000 	.word	0x20000000
 8002190:	20000008 	.word	0x20000008
 8002194:	20000004 	.word	0x20000004

08002198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_IncTick+0x20>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_IncTick+0x24>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <HAL_IncTick+0x24>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000008 	.word	0x20000008
 80021bc:	20000200 	.word	0x20000200

080021c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;
 80021c4:	4b03      	ldr	r3, [pc, #12]	@ (80021d4 <HAL_GetTick+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000200 	.word	0x20000200

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4907      	ldr	r1, [pc, #28]	@ (8002274 <__NVIC_EnableIRQ+0x38>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	@ (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	@ 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	@ 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002344:	d301      	bcc.n	800234a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <SysTick_Config+0x40>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002352:	210f      	movs	r1, #15
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f7ff ff8e 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <SysTick_Config+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002362:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <SysTick_Config+0x40>)
 8002364:	2207      	movs	r2, #7
 8002366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	e000e010 	.word	0xe000e010

08002378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff29 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a0:	f7ff ff3e 	bl	8002220 <__NVIC_GetPriorityGrouping>
 80023a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	6978      	ldr	r0, [r7, #20]
 80023ac:	f7ff ff8e 	bl	80022cc <NVIC_EncodePriority>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff5d 	bl	8002278 <__NVIC_SetPriority>
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff31 	bl	800223c <__NVIC_EnableIRQ>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffa2 	bl	8002334 <SysTick_Config>
 80023f0:	4603      	mov	r3, r0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002406:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff feda 	bl	80021c0 <HAL_GetTick>
 800240c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d008      	beq.n	800242c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2280      	movs	r2, #128	@ 0x80
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e052      	b.n	80024d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0216 	bic.w	r2, r2, #22
 800243a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800244a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <HAL_DMA_Abort+0x62>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0208 	bic.w	r2, r2, #8
 800246a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247c:	e013      	b.n	80024a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800247e:	f7ff fe9f 	bl	80021c0 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b05      	cmp	r3, #5
 800248a:	d90c      	bls.n	80024a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e015      	b.n	80024d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e4      	bne.n	800247e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b8:	223f      	movs	r2, #63	@ 0x3f
 80024ba:	409a      	lsls	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d004      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2280      	movs	r2, #128	@ 0x80
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e00c      	b.n	8002512 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2205      	movs	r2, #5
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	@ 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e159      	b.n	80027f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	f040 8148 	bne.w	80027ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d005      	beq.n	8002572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256e:	2b02      	cmp	r3, #2
 8002570:	d130      	bne.n	80025d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 0201 	and.w	r2, r3, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d017      	beq.n	8002610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d123      	bne.n	8002664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a2 	beq.w	80027ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b57      	ldr	r3, [pc, #348]	@ (8002808 <HAL_GPIO_Init+0x2e8>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	4a56      	ldr	r2, [pc, #344]	@ (8002808 <HAL_GPIO_Init+0x2e8>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b6:	4b54      	ldr	r3, [pc, #336]	@ (8002808 <HAL_GPIO_Init+0x2e8>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c2:	4a52      	ldr	r2, [pc, #328]	@ (800280c <HAL_GPIO_Init+0x2ec>)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a49      	ldr	r2, [pc, #292]	@ (8002810 <HAL_GPIO_Init+0x2f0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d019      	beq.n	8002722 <HAL_GPIO_Init+0x202>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a48      	ldr	r2, [pc, #288]	@ (8002814 <HAL_GPIO_Init+0x2f4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_GPIO_Init+0x1fe>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a47      	ldr	r2, [pc, #284]	@ (8002818 <HAL_GPIO_Init+0x2f8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00d      	beq.n	800271a <HAL_GPIO_Init+0x1fa>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a46      	ldr	r2, [pc, #280]	@ (800281c <HAL_GPIO_Init+0x2fc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <HAL_GPIO_Init+0x1f6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a45      	ldr	r2, [pc, #276]	@ (8002820 <HAL_GPIO_Init+0x300>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_GPIO_Init+0x1f2>
 800270e:	2304      	movs	r3, #4
 8002710:	e008      	b.n	8002724 <HAL_GPIO_Init+0x204>
 8002712:	2307      	movs	r3, #7
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x204>
 8002716:	2303      	movs	r3, #3
 8002718:	e004      	b.n	8002724 <HAL_GPIO_Init+0x204>
 800271a:	2302      	movs	r3, #2
 800271c:	e002      	b.n	8002724 <HAL_GPIO_Init+0x204>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_GPIO_Init+0x204>
 8002722:	2300      	movs	r3, #0
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f002 0203 	and.w	r2, r2, #3
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4093      	lsls	r3, r2
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002734:	4935      	ldr	r1, [pc, #212]	@ (800280c <HAL_GPIO_Init+0x2ec>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002742:	4b38      	ldr	r3, [pc, #224]	@ (8002824 <HAL_GPIO_Init+0x304>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002766:	4a2f      	ldr	r2, [pc, #188]	@ (8002824 <HAL_GPIO_Init+0x304>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800276c:	4b2d      	ldr	r3, [pc, #180]	@ (8002824 <HAL_GPIO_Init+0x304>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002790:	4a24      	ldr	r2, [pc, #144]	@ (8002824 <HAL_GPIO_Init+0x304>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002796:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <HAL_GPIO_Init+0x304>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002824 <HAL_GPIO_Init+0x304>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c0:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <HAL_GPIO_Init+0x304>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002824 <HAL_GPIO_Init+0x304>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3301      	adds	r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	f67f aea2 	bls.w	800253c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3724      	adds	r7, #36	@ 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40013c00 	.word	0x40013c00

08002828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e001      	b.n	800284a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002874:	e003      	b.n	800287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002896:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028a2:	4a05      	ldr	r2, [pc, #20]	@ (80028b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff f818 	bl	80018e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e12b      	b.n	8002b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fde6 	bl	80014b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	@ 0x24
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800290e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800291e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002920:	f001 f8da 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8002924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a81      	ldr	r2, [pc, #516]	@ (8002b30 <HAL_I2C_Init+0x274>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d807      	bhi.n	8002940 <HAL_I2C_Init+0x84>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a80      	ldr	r2, [pc, #512]	@ (8002b34 <HAL_I2C_Init+0x278>)
 8002934:	4293      	cmp	r3, r2
 8002936:	bf94      	ite	ls
 8002938:	2301      	movls	r3, #1
 800293a:	2300      	movhi	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e006      	b.n	800294e <HAL_I2C_Init+0x92>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a7d      	ldr	r2, [pc, #500]	@ (8002b38 <HAL_I2C_Init+0x27c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	bf94      	ite	ls
 8002948:	2301      	movls	r3, #1
 800294a:	2300      	movhi	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0e7      	b.n	8002b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a78      	ldr	r2, [pc, #480]	@ (8002b3c <HAL_I2C_Init+0x280>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9b      	lsrs	r3, r3, #18
 8002960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a6a      	ldr	r2, [pc, #424]	@ (8002b30 <HAL_I2C_Init+0x274>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d802      	bhi.n	8002990 <HAL_I2C_Init+0xd4>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3301      	adds	r3, #1
 800298e:	e009      	b.n	80029a4 <HAL_I2C_Init+0xe8>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	4a69      	ldr	r2, [pc, #420]	@ (8002b40 <HAL_I2C_Init+0x284>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	3301      	adds	r3, #1
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	495c      	ldr	r1, [pc, #368]	@ (8002b30 <HAL_I2C_Init+0x274>)
 80029c0:	428b      	cmp	r3, r1
 80029c2:	d819      	bhi.n	80029f8 <HAL_I2C_Init+0x13c>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1e59      	subs	r1, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d2:	1c59      	adds	r1, r3, #1
 80029d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029d8:	400b      	ands	r3, r1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_I2C_Init+0x138>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1e59      	subs	r1, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f2:	e051      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 80029f4:	2304      	movs	r3, #4
 80029f6:	e04f      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <HAL_I2C_Init+0x168>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e012      	b.n	8002a4a <HAL_I2C_Init+0x18e>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1e58      	subs	r0, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	0099      	lsls	r1, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Init+0x196>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e022      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10e      	bne.n	8002a78 <HAL_I2C_Init+0x1bc>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1e58      	subs	r0, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	440b      	add	r3, r1
 8002a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a76:	e00f      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e58      	subs	r0, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	0099      	lsls	r1, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	6809      	ldr	r1, [r1, #0]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6911      	ldr	r1, [r2, #16]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68d2      	ldr	r2, [r2, #12]
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	000186a0 	.word	0x000186a0
 8002b34:	001e847f 	.word	0x001e847f
 8002b38:	003d08ff 	.word	0x003d08ff
 8002b3c:	431bde83 	.word	0x431bde83
 8002b40:	10624dd3 	.word	0x10624dd3

08002b44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	460b      	mov	r3, r1
 8002b52:	817b      	strh	r3, [r7, #10]
 8002b54:	4613      	mov	r3, r2
 8002b56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff fb32 	bl	80021c0 <HAL_GetTick>
 8002b5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	f040 80e0 	bne.w	8002d2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2319      	movs	r3, #25
 8002b72:	2201      	movs	r2, #1
 8002b74:	4970      	ldr	r1, [pc, #448]	@ (8002d38 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f964 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
 8002b84:	e0d3      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0x50>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e0cc      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d007      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2221      	movs	r2, #33	@ 0x21
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	893a      	ldrh	r2, [r7, #8]
 8002bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4a50      	ldr	r2, [pc, #320]	@ (8002d3c <HAL_I2C_Master_Transmit+0x1f8>)
 8002bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f89c 	bl	8002d40 <I2C_MasterRequestWrite>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e08d      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c28:	e066      	b.n	8002cf8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fa22 	bl	8003078 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d107      	bne.n	8002c52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e06b      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	781a      	ldrb	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d11b      	bne.n	8002ccc <HAL_I2C_Master_Transmit+0x188>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d017      	beq.n	8002ccc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	6a39      	ldr	r1, [r7, #32]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fa19 	bl	8003108 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d107      	bne.n	8002cf4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e01a      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d194      	bne.n	8002c2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	00100002 	.word	0x00100002
 8002d3c:	ffff0000 	.word	0xffff0000

08002d40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d006      	beq.n	8002d6a <I2C_MasterRequestWrite+0x2a>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d003      	beq.n	8002d6a <I2C_MasterRequestWrite+0x2a>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d68:	d108      	bne.n	8002d7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e00b      	b.n	8002d94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	2b12      	cmp	r3, #18
 8002d82:	d107      	bne.n	8002d94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f84f 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dba:	d103      	bne.n	8002dc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e035      	b.n	8002e34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dd0:	d108      	bne.n	8002de4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002de0:	611a      	str	r2, [r3, #16]
 8002de2:	e01b      	b.n	8002e1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002de4:	897b      	ldrh	r3, [r7, #10]
 8002de6:	11db      	asrs	r3, r3, #7
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0306 	and.w	r3, r3, #6
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f063 030f 	orn	r3, r3, #15
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	490e      	ldr	r1, [pc, #56]	@ (8002e3c <I2C_MasterRequestWrite+0xfc>)
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f898 	bl	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e010      	b.n	8002e34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4907      	ldr	r1, [pc, #28]	@ (8002e40 <I2C_MasterRequestWrite+0x100>)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f888 	bl	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	00010008 	.word	0x00010008
 8002e40:	00010002 	.word	0x00010002

08002e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e54:	e048      	b.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d044      	beq.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5e:	f7ff f9af 	bl	80021c0 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d302      	bcc.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d139      	bne.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	0c1b      	lsrs	r3, r3, #16
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d10d      	bne.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	43da      	mvns	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	e00c      	b.n	8002eb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d116      	bne.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e023      	b.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	0c1b      	lsrs	r3, r3, #16
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d10d      	bne.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	e00c      	b.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	43da      	mvns	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d093      	beq.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f46:	e071      	b.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f56:	d123      	bne.n	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	f043 0204 	orr.w	r2, r3, #4
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e067      	b.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa6:	d041      	beq.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa8:	f7ff f90a 	bl	80021c0 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d302      	bcc.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d136      	bne.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10c      	bne.n	8002fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	e00b      	b.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d016      	beq.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e021      	b.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	0c1b      	lsrs	r3, r3, #16
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10c      	bne.n	8003050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	43da      	mvns	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4013      	ands	r3, r2
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e00b      	b.n	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	f47f af6d 	bne.w	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003084:	e034      	b.n	80030f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f886 	bl	8003198 <I2C_IsAcknowledgeFailed>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e034      	b.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d028      	beq.n	80030f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309e:	f7ff f88f 	bl	80021c0 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11d      	bne.n	80030f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030be:	2b80      	cmp	r3, #128	@ 0x80
 80030c0:	d016      	beq.n	80030f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e007      	b.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fa:	2b80      	cmp	r3, #128	@ 0x80
 80030fc:	d1c3      	bne.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003114:	e034      	b.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f83e 	bl	8003198 <I2C_IsAcknowledgeFailed>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e034      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d028      	beq.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7ff f847 	bl	80021c0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11d      	bne.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b04      	cmp	r3, #4
 8003150:	d016      	beq.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e007      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d1c3      	bne.n	8003116 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ae:	d11b      	bne.n	80031e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e267      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d075      	beq.n	8003302 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003216:	4b88      	ldr	r3, [pc, #544]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b04      	cmp	r3, #4
 8003220:	d00c      	beq.n	800323c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003222:	4b85      	ldr	r3, [pc, #532]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800322a:	2b08      	cmp	r3, #8
 800322c:	d112      	bne.n	8003254 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322e:	4b82      	ldr	r3, [pc, #520]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800323a:	d10b      	bne.n	8003254 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	4b7e      	ldr	r3, [pc, #504]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d05b      	beq.n	8003300 <HAL_RCC_OscConfig+0x108>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d157      	bne.n	8003300 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e242      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800325c:	d106      	bne.n	800326c <HAL_RCC_OscConfig+0x74>
 800325e:	4b76      	ldr	r3, [pc, #472]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a75      	ldr	r2, [pc, #468]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e01d      	b.n	80032a8 <HAL_RCC_OscConfig+0xb0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x98>
 8003276:	4b70      	ldr	r3, [pc, #448]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6f      	ldr	r2, [pc, #444]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 800327c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b6d      	ldr	r3, [pc, #436]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6c      	ldr	r2, [pc, #432]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0xb0>
 8003290:	4b69      	ldr	r3, [pc, #420]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a68      	ldr	r2, [pc, #416]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b66      	ldr	r3, [pc, #408]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a65      	ldr	r2, [pc, #404]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 80032a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d013      	beq.n	80032d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fe ff86 	bl	80021c0 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fe ff82 	bl	80021c0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	@ 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e207      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0xc0>
 80032d6:	e014      	b.n	8003302 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fe ff72 	bl	80021c0 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fe ff6e 	bl	80021c0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	@ 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e1f3      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	4b51      	ldr	r3, [pc, #324]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0xe8>
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d063      	beq.n	80033d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800330e:	4b4a      	ldr	r3, [pc, #296]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00b      	beq.n	8003332 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331a:	4b47      	ldr	r3, [pc, #284]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003322:	2b08      	cmp	r3, #8
 8003324:	d11c      	bne.n	8003360 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b44      	ldr	r3, [pc, #272]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d116      	bne.n	8003360 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003332:	4b41      	ldr	r3, [pc, #260]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_RCC_OscConfig+0x152>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d001      	beq.n	800334a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e1c7      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334a:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4937      	ldr	r1, [pc, #220]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335e:	e03a      	b.n	80033d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d020      	beq.n	80033aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003368:	4b34      	ldr	r3, [pc, #208]	@ (800343c <HAL_RCC_OscConfig+0x244>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fe ff27 	bl	80021c0 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003376:	f7fe ff23 	bl	80021c0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e1a8      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003394:	4b28      	ldr	r3, [pc, #160]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4925      	ldr	r1, [pc, #148]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]
 80033a8:	e015      	b.n	80033d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033aa:	4b24      	ldr	r3, [pc, #144]	@ (800343c <HAL_RCC_OscConfig+0x244>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe ff06 	bl	80021c0 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b8:	f7fe ff02 	bl	80021c0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e187      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d036      	beq.n	8003450 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d016      	beq.n	8003418 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ea:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <HAL_RCC_OscConfig+0x248>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fe fee6 	bl	80021c0 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f8:	f7fe fee2 	bl	80021c0 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e167      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <HAL_RCC_OscConfig+0x240>)
 800340c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x200>
 8003416:	e01b      	b.n	8003450 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003418:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <HAL_RCC_OscConfig+0x248>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341e:	f7fe fecf 	bl	80021c0 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	e00e      	b.n	8003444 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003426:	f7fe fecb 	bl	80021c0 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d907      	bls.n	8003444 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e150      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
 8003438:	40023800 	.word	0x40023800
 800343c:	42470000 	.word	0x42470000
 8003440:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	4b88      	ldr	r3, [pc, #544]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ea      	bne.n	8003426 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8097 	beq.w	800358c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003462:	4b81      	ldr	r3, [pc, #516]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10f      	bne.n	800348e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	4b7d      	ldr	r3, [pc, #500]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	4a7c      	ldr	r2, [pc, #496]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800347c:	6413      	str	r3, [r2, #64]	@ 0x40
 800347e:	4b7a      	ldr	r3, [pc, #488]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348e:	4b77      	ldr	r3, [pc, #476]	@ (800366c <HAL_RCC_OscConfig+0x474>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d118      	bne.n	80034cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349a:	4b74      	ldr	r3, [pc, #464]	@ (800366c <HAL_RCC_OscConfig+0x474>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a73      	ldr	r2, [pc, #460]	@ (800366c <HAL_RCC_OscConfig+0x474>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a6:	f7fe fe8b 	bl	80021c0 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fe fe87 	bl	80021c0 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e10c      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	4b6a      	ldr	r3, [pc, #424]	@ (800366c <HAL_RCC_OscConfig+0x474>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x2ea>
 80034d4:	4b64      	ldr	r3, [pc, #400]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d8:	4a63      	ldr	r2, [pc, #396]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e0:	e01c      	b.n	800351c <HAL_RCC_OscConfig+0x324>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x30c>
 80034ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6713      	str	r3, [r2, #112]	@ 0x70
 8003502:	e00b      	b.n	800351c <HAL_RCC_OscConfig+0x324>
 8003504:	4b58      	ldr	r3, [pc, #352]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003508:	4a57      	ldr	r2, [pc, #348]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003510:	4b55      	ldr	r3, [pc, #340]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	4a54      	ldr	r2, [pc, #336]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003516:	f023 0304 	bic.w	r3, r3, #4
 800351a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d015      	beq.n	8003550 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fe fe4c 	bl	80021c0 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352a:	e00a      	b.n	8003542 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7fe fe48 	bl	80021c0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e0cb      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003542:	4b49      	ldr	r3, [pc, #292]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0ee      	beq.n	800352c <HAL_RCC_OscConfig+0x334>
 800354e:	e014      	b.n	800357a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003550:	f7fe fe36 	bl	80021c0 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003556:	e00a      	b.n	800356e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fe fe32 	bl	80021c0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e0b5      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356e:	4b3e      	ldr	r3, [pc, #248]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1ee      	bne.n	8003558 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800357a:	7dfb      	ldrb	r3, [r7, #23]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d105      	bne.n	800358c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003580:	4b39      	ldr	r3, [pc, #228]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	4a38      	ldr	r2, [pc, #224]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80a1 	beq.w	80036d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003596:	4b34      	ldr	r3, [pc, #208]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d05c      	beq.n	800365c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d141      	bne.n	800362e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035aa:	4b31      	ldr	r3, [pc, #196]	@ (8003670 <HAL_RCC_OscConfig+0x478>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe fe06 	bl	80021c0 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe fe02 	bl	80021c0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e087      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	4b27      	ldr	r3, [pc, #156]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	019b      	lsls	r3, r3, #6
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	3b01      	subs	r3, #1
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	061b      	lsls	r3, r3, #24
 80035fa:	491b      	ldr	r1, [pc, #108]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003600:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x478>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fe fddb 	bl	80021c0 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fe fdd7 	bl	80021c0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e05c      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003620:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x416>
 800362c:	e054      	b.n	80036d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362e:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <HAL_RCC_OscConfig+0x478>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe fdc4 	bl	80021c0 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fe fdc0 	bl	80021c0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e045      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_RCC_OscConfig+0x470>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x444>
 800365a:	e03d      	b.n	80036d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e038      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
 8003668:	40023800 	.word	0x40023800
 800366c:	40007000 	.word	0x40007000
 8003670:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003674:	4b1b      	ldr	r3, [pc, #108]	@ (80036e4 <HAL_RCC_OscConfig+0x4ec>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d028      	beq.n	80036d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d121      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d11a      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d111      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	3b01      	subs	r3, #1
 80036be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800

080036e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0cc      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4b68      	ldr	r3, [pc, #416]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d90c      	bls.n	8003724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b65      	ldr	r3, [pc, #404]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b63      	ldr	r3, [pc, #396]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0b8      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d020      	beq.n	8003772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800373c:	4b59      	ldr	r3, [pc, #356]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a58      	ldr	r2, [pc, #352]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003746:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003754:	4b53      	ldr	r3, [pc, #332]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4a52      	ldr	r2, [pc, #328]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800375e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003760:	4b50      	ldr	r3, [pc, #320]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	494d      	ldr	r1, [pc, #308]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d044      	beq.n	8003808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	4b47      	ldr	r3, [pc, #284]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d119      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e07f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d003      	beq.n	80037a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	4b3f      	ldr	r3, [pc, #252]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e06f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	4b3b      	ldr	r3, [pc, #236]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e067      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4b37      	ldr	r3, [pc, #220]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4934      	ldr	r1, [pc, #208]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d8:	f7fe fcf2 	bl	80021c0 <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7fe fcee 	bl	80021c0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e04f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	4b2b      	ldr	r3, [pc, #172]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 020c 	and.w	r2, r3, #12
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d1eb      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003808:	4b25      	ldr	r3, [pc, #148]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d20c      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b22      	ldr	r3, [pc, #136]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b20      	ldr	r3, [pc, #128]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e032      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383c:	4b19      	ldr	r3, [pc, #100]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4916      	ldr	r1, [pc, #88]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385a:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	490e      	ldr	r1, [pc, #56]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800386e:	f000 f821 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	490a      	ldr	r1, [pc, #40]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	fa22 f303 	lsr.w	r3, r2, r3
 8003886:	4a09      	ldr	r2, [pc, #36]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800388a:	4b09      	ldr	r3, [pc, #36]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe fc52 	bl	8002138 <HAL_InitTick>

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023c00 	.word	0x40023c00
 80038a4:	40023800 	.word	0x40023800
 80038a8:	0800ab44 	.word	0x0800ab44
 80038ac:	20000000 	.word	0x20000000
 80038b0:	20000004 	.word	0x20000004

080038b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b8:	b094      	sub	sp, #80	@ 0x50
 80038ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038cc:	4b79      	ldr	r3, [pc, #484]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d00d      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x40>
 80038d8:	2b08      	cmp	r3, #8
 80038da:	f200 80e1 	bhi.w	8003aa0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x34>
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d003      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x3a>
 80038e6:	e0db      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038e8:	4b73      	ldr	r3, [pc, #460]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ec:	e0db      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ee:	4b73      	ldr	r3, [pc, #460]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x208>)
 80038f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038f2:	e0d8      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038f4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038fe:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d063      	beq.n	80039d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	099b      	lsrs	r3, r3, #6
 8003910:	2200      	movs	r2, #0
 8003912:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003914:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391c:	633b      	str	r3, [r7, #48]	@ 0x30
 800391e:	2300      	movs	r3, #0
 8003920:	637b      	str	r3, [r7, #52]	@ 0x34
 8003922:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003926:	4622      	mov	r2, r4
 8003928:	462b      	mov	r3, r5
 800392a:	f04f 0000 	mov.w	r0, #0
 800392e:	f04f 0100 	mov.w	r1, #0
 8003932:	0159      	lsls	r1, r3, #5
 8003934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003938:	0150      	lsls	r0, r2, #5
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4621      	mov	r1, r4
 8003940:	1a51      	subs	r1, r2, r1
 8003942:	6139      	str	r1, [r7, #16]
 8003944:	4629      	mov	r1, r5
 8003946:	eb63 0301 	sbc.w	r3, r3, r1
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003958:	4659      	mov	r1, fp
 800395a:	018b      	lsls	r3, r1, #6
 800395c:	4651      	mov	r1, sl
 800395e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003962:	4651      	mov	r1, sl
 8003964:	018a      	lsls	r2, r1, #6
 8003966:	4651      	mov	r1, sl
 8003968:	ebb2 0801 	subs.w	r8, r2, r1
 800396c:	4659      	mov	r1, fp
 800396e:	eb63 0901 	sbc.w	r9, r3, r1
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800397e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003986:	4690      	mov	r8, r2
 8003988:	4699      	mov	r9, r3
 800398a:	4623      	mov	r3, r4
 800398c:	eb18 0303 	adds.w	r3, r8, r3
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	462b      	mov	r3, r5
 8003994:	eb49 0303 	adc.w	r3, r9, r3
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039a6:	4629      	mov	r1, r5
 80039a8:	024b      	lsls	r3, r1, #9
 80039aa:	4621      	mov	r1, r4
 80039ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039b0:	4621      	mov	r1, r4
 80039b2:	024a      	lsls	r2, r1, #9
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ba:	2200      	movs	r2, #0
 80039bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039c4:	f7fc fc5c 	bl	8000280 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4613      	mov	r3, r2
 80039ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039d0:	e058      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d2:	4b38      	ldr	r3, [pc, #224]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	2200      	movs	r2, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	4611      	mov	r1, r2
 80039de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039e2:	623b      	str	r3, [r7, #32]
 80039e4:	2300      	movs	r3, #0
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039ec:	4642      	mov	r2, r8
 80039ee:	464b      	mov	r3, r9
 80039f0:	f04f 0000 	mov.w	r0, #0
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	0159      	lsls	r1, r3, #5
 80039fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039fe:	0150      	lsls	r0, r2, #5
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4641      	mov	r1, r8
 8003a06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a24:	ebb2 040a 	subs.w	r4, r2, sl
 8003a28:	eb63 050b 	sbc.w	r5, r3, fp
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	00eb      	lsls	r3, r5, #3
 8003a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3a:	00e2      	lsls	r2, r4, #3
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	461d      	mov	r5, r3
 8003a40:	4643      	mov	r3, r8
 8003a42:	18e3      	adds	r3, r4, r3
 8003a44:	603b      	str	r3, [r7, #0]
 8003a46:	464b      	mov	r3, r9
 8003a48:	eb45 0303 	adc.w	r3, r5, r3
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	028b      	lsls	r3, r1, #10
 8003a5e:	4621      	mov	r1, r4
 8003a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a64:	4621      	mov	r1, r4
 8003a66:	028a      	lsls	r2, r1, #10
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a6e:	2200      	movs	r2, #0
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	61fa      	str	r2, [r7, #28]
 8003a74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a78:	f7fc fc02 	bl	8000280 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4613      	mov	r3, r2
 8003a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a84:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a9e:	e002      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3750      	adds	r7, #80	@ 0x50
 8003aac:	46bd      	mov	sp, r7
 8003aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	00f42400 	.word	0x00f42400
 8003abc:	007a1200 	.word	0x007a1200

08003ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000000 	.word	0x20000000

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003adc:	f7ff fff0 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0a9b      	lsrs	r3, r3, #10
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	@ (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	0800ab54 	.word	0x0800ab54

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b04:	f7ff ffdc 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0b5b      	lsrs	r3, r3, #13
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	@ (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	0800ab54 	.word	0x0800ab54

08003b28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d038      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b50:	4b68      	ldr	r3, [pc, #416]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b56:	f7fe fb33 	bl	80021c0 <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b5e:	f7fe fb2f 	bl	80021c0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e0bd      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b70:	4b61      	ldr	r3, [pc, #388]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	019b      	lsls	r3, r3, #6
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	071b      	lsls	r3, r3, #28
 8003b8e:	495a      	ldr	r1, [pc, #360]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b96:	4b57      	ldr	r3, [pc, #348]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b9c:	f7fe fb10 	bl	80021c0 <HAL_GetTick>
 8003ba0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ba4:	f7fe fb0c 	bl	80021c0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e09a      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bb6:	4b50      	ldr	r3, [pc, #320]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8083 	beq.w	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	4b48      	ldr	r3, [pc, #288]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	4a47      	ldr	r2, [pc, #284]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be0:	4b45      	ldr	r3, [pc, #276]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bec:	4b43      	ldr	r3, [pc, #268]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a42      	ldr	r2, [pc, #264]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bf8:	f7fe fae2 	bl	80021c0 <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c00:	f7fe fade 	bl	80021c0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e06c      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003c12:	4b3a      	ldr	r3, [pc, #232]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c1e:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c26:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d02f      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d028      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c44:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c46:	4b2e      	ldr	r3, [pc, #184]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c52:	4a29      	ldr	r2, [pc, #164]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c58:	4b27      	ldr	r3, [pc, #156]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d114      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe faac 	bl	80021c0 <HAL_GetTick>
 8003c68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7fe faa8 	bl	80021c0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e034      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c82:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0ee      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003c9c:	4b16      	ldr	r3, [pc, #88]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb0:	4911      	ldr	r1, [pc, #68]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
 8003cb6:	e005      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003cc2:	6093      	str	r3, [r2, #8]
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd0:	4909      	ldr	r1, [pc, #36]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7d1a      	ldrb	r2, [r3, #20]
 8003ce6:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003ce8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	42470068 	.word	0x42470068
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	42470e40 	.word	0x42470e40
 8003d04:	424711e0 	.word	0x424711e0

08003d08 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e073      	b.n	8003e02 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	7f5b      	ldrb	r3, [r3, #29]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd fe8e 	bl	8001a4c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d055      	beq.n	8003df0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	22ca      	movs	r2, #202	@ 0xca
 8003d4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2253      	movs	r2, #83	@ 0x53
 8003d52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fbdd 	bl	8004514 <RTC_EnterInitMode>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d12c      	bne.n	8003dbe <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d76:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6899      	ldr	r1, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6919      	ldr	r1, [r3, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	041a      	lsls	r2, r3, #16
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fbe4 	bl	8004582 <RTC_ExitInitMode>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d110      	bne.n	8003de6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	22ff      	movs	r2, #255	@ 0xff
 8003dec:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dee:	e001      	b.n	8003df4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e0a:	b590      	push	{r4, r7, lr}
 8003e0c:	b087      	sub	sp, #28
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	7f1b      	ldrb	r3, [r3, #28]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_RTC_SetTime+0x1c>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e087      	b.n	8003f36 <HAL_RTC_SetTime+0x12c>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d126      	bne.n	8003e86 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fbbb 	bl	80045cc <RTC_ByteToBcd2>
 8003e56:	4603      	mov	r3, r0
 8003e58:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fbb4 	bl	80045cc <RTC_ByteToBcd2>
 8003e64:	4603      	mov	r3, r0
 8003e66:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e68:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	789b      	ldrb	r3, [r3, #2]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fbac 	bl	80045cc <RTC_ByteToBcd2>
 8003e74:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e76:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	78db      	ldrb	r3, [r3, #3]
 8003e7e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e018      	b.n	8003eb8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2200      	movs	r2, #0
 8003e98:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ea6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003eac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	78db      	ldrb	r3, [r3, #3]
 8003eb2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	22ca      	movs	r2, #202	@ 0xca
 8003ebe:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2253      	movs	r2, #83	@ 0x53
 8003ec6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fb23 	bl	8004514 <RTC_EnterInitMode>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d120      	bne.n	8003f1a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003ee2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003ee6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ef6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6899      	ldr	r1, [r3, #8]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fb36 	bl	8004582 <RTC_ExitInitMode>
 8003f16:	4603      	mov	r3, r0
 8003f18:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	22ff      	movs	r2, #255	@ 0xff
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]

  return status;
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}

08003f3e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003f70:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003f74:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	0a1b      	lsrs	r3, r3, #8
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	0d9b      	lsrs	r3, r3, #22
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d11a      	bne.n	8003ff0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fb22 	bl	8004608 <RTC_Bcd2ToByte>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fb19 	bl	8004608 <RTC_Bcd2ToByte>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	789b      	ldrb	r3, [r3, #2]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fb10 	bl	8004608 <RTC_Bcd2ToByte>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ffa:	b590      	push	{r4, r7, lr}
 8003ffc:	b087      	sub	sp, #28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	7f1b      	ldrb	r3, [r3, #28]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_RTC_SetDate+0x1c>
 8004012:	2302      	movs	r3, #2
 8004014:	e071      	b.n	80040fa <HAL_RTC_SetDate+0x100>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2202      	movs	r2, #2
 8004020:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10e      	bne.n	8004046 <HAL_RTC_SetDate+0x4c>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	785b      	ldrb	r3, [r3, #1]
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	f023 0310 	bic.w	r3, r3, #16
 800403c:	b2db      	uxtb	r3, r3
 800403e:	330a      	adds	r3, #10
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11c      	bne.n	8004086 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	78db      	ldrb	r3, [r3, #3]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fabb 	bl	80045cc <RTC_ByteToBcd2>
 8004056:	4603      	mov	r3, r0
 8004058:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	785b      	ldrb	r3, [r3, #1]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fab4 	bl	80045cc <RTC_ByteToBcd2>
 8004064:	4603      	mov	r3, r0
 8004066:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004068:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	789b      	ldrb	r3, [r3, #2]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 faac 	bl	80045cc <RTC_ByteToBcd2>
 8004074:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004076:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e00e      	b.n	80040a4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	78db      	ldrb	r3, [r3, #3]
 800408a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004092:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004098:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	22ca      	movs	r2, #202	@ 0xca
 80040aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2253      	movs	r2, #83	@ 0x53
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fa2d 	bl	8004514 <RTC_EnterInitMode>
 80040ba:	4603      	mov	r3, r0
 80040bc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10c      	bne.n	80040de <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040ce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80040d2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fa54 	bl	8004582 <RTC_ExitInitMode>
 80040da:	4603      	mov	r3, r0
 80040dc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80040de:	7cfb      	ldrb	r3, [r7, #19]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	22ff      	movs	r2, #255	@ 0xff
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	771a      	strb	r2, [r3, #28]

  return status;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd90      	pop	{r4, r7, pc}

08004102 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800411c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004120:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	b2da      	uxtb	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	b2da      	uxtb	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	0b5b      	lsrs	r3, r3, #13
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d11a      	bne.n	8004196 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	78db      	ldrb	r3, [r3, #3]
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fa4f 	bl	8004608 <RTC_Bcd2ToByte>
 800416a:	4603      	mov	r3, r0
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fa46 	bl	8004608 <RTC_Bcd2ToByte>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	789b      	ldrb	r3, [r3, #2]
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fa3d 	bl	8004608 <RTC_Bcd2ToByte>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b089      	sub	sp, #36	@ 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80041ac:	4b9b      	ldr	r3, [pc, #620]	@ (800441c <HAL_RTC_SetAlarm_IT+0x27c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a9b      	ldr	r2, [pc, #620]	@ (8004420 <HAL_RTC_SetAlarm_IT+0x280>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	0adb      	lsrs	r3, r3, #11
 80041b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041bc:	fb02 f303 	mul.w	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	7f1b      	ldrb	r3, [r3, #28]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_RTC_SetAlarm_IT+0x36>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e11e      	b.n	8004414 <HAL_RTC_SetAlarm_IT+0x274>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2202      	movs	r2, #2
 80041e0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d137      	bne.n	8004258 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2200      	movs	r2, #0
 80041fa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 f9e3 	bl	80045cc <RTC_ByteToBcd2>
 8004206:	4603      	mov	r3, r0
 8004208:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f9dc 	bl	80045cc <RTC_ByteToBcd2>
 8004214:	4603      	mov	r3, r0
 8004216:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004218:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	789b      	ldrb	r3, [r3, #2]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f9d4 	bl	80045cc <RTC_ByteToBcd2>
 8004224:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004226:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	78db      	ldrb	r3, [r3, #3]
 800422e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004230:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f9c6 	bl	80045cc <RTC_ByteToBcd2>
 8004240:	4603      	mov	r3, r0
 8004242:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8004244:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800424c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004252:	4313      	orrs	r3, r2
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	e023      	b.n	80042a0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2200      	movs	r2, #0
 800426a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004278:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800427e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	78db      	ldrb	r3, [r3, #3]
 8004284:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004286:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800428e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8004290:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004296:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800429c:	4313      	orrs	r3, r2
 800429e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	22ca      	movs	r2, #202	@ 0xca
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2253      	movs	r2, #83	@ 0x53
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c4:	d142      	bne.n	800434c <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80042e6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	22ff      	movs	r2, #255	@ 0xff
 80042fa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2203      	movs	r2, #3
 8004300:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e083      	b.n	8004414 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0e6      	beq.n	80042e8 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004338:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	e04c      	b.n	80043e6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800435a:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800436c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800436e:	4b2b      	ldr	r3, [pc, #172]	@ (800441c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2b      	ldr	r2, [pc, #172]	@ (8004420 <HAL_RTC_SetAlarm_IT+0x280>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	0adb      	lsrs	r3, r3, #11
 800437a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3b01      	subs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	22ff      	movs	r2, #255	@ 0xff
 8004396:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2203      	movs	r2, #3
 800439c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e035      	b.n	8004414 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0e6      	beq.n	8004384 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d4:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80043e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004424 <HAL_RTC_SetAlarm_IT+0x284>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004424 <HAL_RTC_SetAlarm_IT+0x284>)
 80043ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80043f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004424 <HAL_RTC_SetAlarm_IT+0x284>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	4a0b      	ldr	r2, [pc, #44]	@ (8004424 <HAL_RTC_SetAlarm_IT+0x284>)
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043fc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	22ff      	movs	r2, #255	@ 0xff
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3724      	adds	r7, #36	@ 0x24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd90      	pop	{r4, r7, pc}
 800441c:	20000000 	.word	0x20000000
 8004420:	10624dd3 	.word	0x10624dd3
 8004424:	40013c00 	.word	0x40013c00

08004428 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004430:	4b1f      	ldr	r3, [pc, #124]	@ (80044b0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004432:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004436:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d012      	beq.n	800446c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00b      	beq.n	800446c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004464:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f824 	bl	80044b4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d012      	beq.n	80044a0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00b      	beq.n	80044a0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004498:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f8ec 	bl	8004678 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	775a      	strb	r2, [r3, #29]
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40013c00 	.word	0x40013c00

080044b4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004510 <HAL_RTC_WaitForSynchro+0x48>)
 80044da:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044dc:	f7fd fe70 	bl	80021c0 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044e2:	e009      	b.n	80044f8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044e4:	f7fd fe6c 	bl	80021c0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044f2:	d901      	bls.n	80044f8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e007      	b.n	8004508 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0ee      	beq.n	80044e4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	00013f5f 	.word	0x00013f5f

08004514 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d122      	bne.n	8004578 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004540:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004542:	f7fd fe3d 	bl	80021c0 <HAL_GetTick>
 8004546:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004548:	e00c      	b.n	8004564 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800454a:	f7fd fe39 	bl	80021c0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004558:	d904      	bls.n	8004564 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2204      	movs	r2, #4
 800455e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <RTC_EnterInitMode+0x64>
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d1e8      	bne.n	800454a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004578:	7bfb      	ldrb	r3, [r7, #15]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800459c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ff8b 	bl	80044c8 <HAL_RTC_WaitForSynchro>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d004      	beq.n	80045c2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2204      	movs	r2, #4
 80045bc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80045da:	e005      	b.n	80045e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3301      	adds	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	3b0a      	subs	r3, #10
 80045e6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	2b09      	cmp	r3, #9
 80045ec:	d8f6      	bhi.n	80045dc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	b2db      	uxtb	r3, r3
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4413      	add	r3, r2
 8004636:	b2db      	uxtb	r3, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3350      	adds	r3, #80	@ 0x50
 800465a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	601a      	str	r2, [r3, #0]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e041      	b.n	8004722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fd fc42 	bl	8001f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f000 fa72 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d001      	beq.n	8004744 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e03c      	b.n	80047be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1e      	ldr	r2, [pc, #120]	@ (80047cc <HAL_TIM_Base_Start+0xa0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <HAL_TIM_Base_Start+0x5c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475e:	d013      	beq.n	8004788 <HAL_TIM_Base_Start+0x5c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1a      	ldr	r2, [pc, #104]	@ (80047d0 <HAL_TIM_Base_Start+0xa4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_TIM_Base_Start+0x5c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a19      	ldr	r2, [pc, #100]	@ (80047d4 <HAL_TIM_Base_Start+0xa8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_TIM_Base_Start+0x5c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a17      	ldr	r2, [pc, #92]	@ (80047d8 <HAL_TIM_Base_Start+0xac>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_TIM_Base_Start+0x5c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a16      	ldr	r2, [pc, #88]	@ (80047dc <HAL_TIM_Base_Start+0xb0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d111      	bne.n	80047ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b06      	cmp	r3, #6
 8004798:	d010      	beq.n	80047bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0201 	orr.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047aa:	e007      	b.n	80047bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40000800 	.word	0x40000800
 80047d8:	40000c00 	.word	0x40000c00
 80047dc:	40014000 	.word	0x40014000

080047e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d020      	beq.n	8004844 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01b      	beq.n	8004844 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0202 	mvn.w	r2, #2
 8004814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f9a3 	bl	8004b76 <HAL_TIM_IC_CaptureCallback>
 8004830:	e005      	b.n	800483e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f995 	bl	8004b62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f9a6 	bl	8004b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d020      	beq.n	8004890 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0204 	mvn.w	r2, #4
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f97d 	bl	8004b76 <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f96f 	bl	8004b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f980 	bl	8004b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d020      	beq.n	80048dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01b      	beq.n	80048dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0208 	mvn.w	r2, #8
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2204      	movs	r2, #4
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f957 	bl	8004b76 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f949 	bl	8004b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f95a 	bl	8004b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d020      	beq.n	8004928 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01b      	beq.n	8004928 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0210 	mvn.w	r2, #16
 80048f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2208      	movs	r2, #8
 80048fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f931 	bl	8004b76 <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f923 	bl	8004b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f934 	bl	8004b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00c      	beq.n	800494c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0201 	mvn.w	r2, #1
 8004944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f901 	bl	8004b4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 faba 	bl	8004ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00c      	beq.n	8004994 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f905 	bl	8004b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0220 	mvn.w	r2, #32
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa8c 	bl	8004ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIM_ConfigClockSource+0x1c>
 80049d8:	2302      	movs	r3, #2
 80049da:	e0b4      	b.n	8004b46 <HAL_TIM_ConfigClockSource+0x186>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a14:	d03e      	beq.n	8004a94 <HAL_TIM_ConfigClockSource+0xd4>
 8004a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a1a:	f200 8087 	bhi.w	8004b2c <HAL_TIM_ConfigClockSource+0x16c>
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a22:	f000 8086 	beq.w	8004b32 <HAL_TIM_ConfigClockSource+0x172>
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a2a:	d87f      	bhi.n	8004b2c <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b70      	cmp	r3, #112	@ 0x70
 8004a2e:	d01a      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0xa6>
 8004a30:	2b70      	cmp	r3, #112	@ 0x70
 8004a32:	d87b      	bhi.n	8004b2c <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b60      	cmp	r3, #96	@ 0x60
 8004a36:	d050      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x11a>
 8004a38:	2b60      	cmp	r3, #96	@ 0x60
 8004a3a:	d877      	bhi.n	8004b2c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b50      	cmp	r3, #80	@ 0x50
 8004a3e:	d03c      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0xfa>
 8004a40:	2b50      	cmp	r3, #80	@ 0x50
 8004a42:	d873      	bhi.n	8004b2c <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b40      	cmp	r3, #64	@ 0x40
 8004a46:	d058      	beq.n	8004afa <HAL_TIM_ConfigClockSource+0x13a>
 8004a48:	2b40      	cmp	r3, #64	@ 0x40
 8004a4a:	d86f      	bhi.n	8004b2c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b30      	cmp	r3, #48	@ 0x30
 8004a4e:	d064      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0x15a>
 8004a50:	2b30      	cmp	r3, #48	@ 0x30
 8004a52:	d86b      	bhi.n	8004b2c <HAL_TIM_ConfigClockSource+0x16c>
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d060      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0x15a>
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d867      	bhi.n	8004b2c <HAL_TIM_ConfigClockSource+0x16c>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d05c      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0x15a>
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d05a      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0x15a>
 8004a64:	e062      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a76:	f000 f99d 	bl	8004db4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	609a      	str	r2, [r3, #8]
      break;
 8004a92:	e04f      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aa4:	f000 f986 	bl	8004db4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ab6:	609a      	str	r2, [r3, #8]
      break;
 8004ab8:	e03c      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f000 f8fa 	bl	8004cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2150      	movs	r1, #80	@ 0x50
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f953 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004ad8:	e02c      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f000 f919 	bl	8004d1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2160      	movs	r1, #96	@ 0x60
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f943 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004af8:	e01c      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	461a      	mov	r2, r3
 8004b08:	f000 f8da 	bl	8004cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2140      	movs	r1, #64	@ 0x40
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 f933 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004b18:	e00c      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f000 f92a 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004b2a:	e003      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b30:	e000      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a37      	ldr	r2, [pc, #220]	@ (8004ca4 <TIM_Base_SetConfig+0xf0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00f      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd2:	d00b      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a34      	ldr	r2, [pc, #208]	@ (8004ca8 <TIM_Base_SetConfig+0xf4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a33      	ldr	r2, [pc, #204]	@ (8004cac <TIM_Base_SetConfig+0xf8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a32      	ldr	r2, [pc, #200]	@ (8004cb0 <TIM_Base_SetConfig+0xfc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d108      	bne.n	8004bfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a28      	ldr	r2, [pc, #160]	@ (8004ca4 <TIM_Base_SetConfig+0xf0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01b      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0c:	d017      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a25      	ldr	r2, [pc, #148]	@ (8004ca8 <TIM_Base_SetConfig+0xf4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a24      	ldr	r2, [pc, #144]	@ (8004cac <TIM_Base_SetConfig+0xf8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00f      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a23      	ldr	r2, [pc, #140]	@ (8004cb0 <TIM_Base_SetConfig+0xfc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a22      	ldr	r2, [pc, #136]	@ (8004cb4 <TIM_Base_SetConfig+0x100>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a21      	ldr	r2, [pc, #132]	@ (8004cb8 <TIM_Base_SetConfig+0x104>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a20      	ldr	r2, [pc, #128]	@ (8004cbc <TIM_Base_SetConfig+0x108>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d108      	bne.n	8004c50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a0c      	ldr	r2, [pc, #48]	@ (8004ca4 <TIM_Base_SetConfig+0xf0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d103      	bne.n	8004c7e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f043 0204 	orr.w	r2, r3, #4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800

08004cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f023 0201 	bic.w	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 030a 	bic.w	r3, r3, #10
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b087      	sub	sp, #28
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f023 0210 	bic.w	r2, r3, #16
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	031b      	lsls	r3, r3, #12
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f043 0307 	orr.w	r3, r3, #7
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	609a      	str	r2, [r3, #8]
}
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e050      	b.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e58:	d013      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a18      	ldr	r2, [pc, #96]	@ (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a16      	ldr	r2, [pc, #88]	@ (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a15      	ldr	r2, [pc, #84]	@ (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a13      	ldr	r2, [pc, #76]	@ (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d10c      	bne.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00
 8004ecc:	40014000 	.word	0x40014000

08004ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e042      	b.n	8004f90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fd f85c 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2224      	movs	r2, #36	@ 0x24
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fc99 	bl	8005874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b0ba      	sub	sp, #232	@ 0xe8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10f      	bne.n	8004ffe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_UART_IRQHandler+0x66>
 8004fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fb7e 	bl	80056f8 <UART_Receive_IT>
      return;
 8004ffc:	e273      	b.n	80054e6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80de 	beq.w	80051c4 <HAL_UART_IRQHandler+0x22c>
 8005008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005018:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80d1 	beq.w	80051c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <HAL_UART_IRQHandler+0xae>
 800502e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	f043 0201 	orr.w	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <HAL_UART_IRQHandler+0xd2>
 8005052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	f043 0202 	orr.w	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_UART_IRQHandler+0xf6>
 8005076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005086:	f043 0204 	orr.w	r2, r3, #4
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800508e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d011      	beq.n	80050be <HAL_UART_IRQHandler+0x126>
 800509a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d105      	bne.n	80050b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b6:	f043 0208 	orr.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 820a 	beq.w	80054dc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_UART_IRQHandler+0x14e>
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fb09 	bl	80056f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f0:	2b40      	cmp	r3, #64	@ 0x40
 80050f2:	bf0c      	ite	eq
 80050f4:	2301      	moveq	r3, #1
 80050f6:	2300      	movne	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <HAL_UART_IRQHandler+0x17a>
 800510a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04f      	beq.n	80051b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fa14 	bl	8005540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005122:	2b40      	cmp	r3, #64	@ 0x40
 8005124:	d141      	bne.n	80051aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3314      	adds	r3, #20
 800512c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800513c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005152:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005156:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800515e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800516a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1d9      	bne.n	8005126 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d013      	beq.n	80051a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517e:	4a8a      	ldr	r2, [pc, #552]	@ (80053a8 <HAL_UART_IRQHandler+0x410>)
 8005180:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005186:	4618      	mov	r0, r3
 8005188:	f7fd f9a7 	bl	80024da <HAL_DMA_Abort_IT>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d016      	beq.n	80051c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800519c:	4610      	mov	r0, r2
 800519e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	e00e      	b.n	80051c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f9b6 	bl	8005514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	e00a      	b.n	80051c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f9b2 	bl	8005514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b0:	e006      	b.n	80051c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f9ae 	bl	8005514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051be:	e18d      	b.n	80054dc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c0:	bf00      	nop
    return;
 80051c2:	e18b      	b.n	80054dc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f040 8167 	bne.w	800549c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8160 	beq.w	800549c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80051dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8159 	beq.w	800549c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800520a:	2b40      	cmp	r3, #64	@ 0x40
 800520c:	f040 80ce 	bne.w	80053ac <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800521c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80a9 	beq.w	8005378 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800522a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800522e:	429a      	cmp	r2, r3
 8005230:	f080 80a2 	bcs.w	8005378 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800523a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005246:	f000 8088 	beq.w	800535a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005260:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005276:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800527a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005282:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800528e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1d9      	bne.n	800524a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3314      	adds	r3, #20
 800529c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3314      	adds	r3, #20
 80052b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e1      	bne.n	8005296 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3314      	adds	r3, #20
 80052d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3314      	adds	r3, #20
 80052f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e3      	bne.n	80052d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800532a:	f023 0310 	bic.w	r3, r3, #16
 800532e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800533c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800533e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005342:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800534a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e3      	bne.n	8005318 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005354:	4618      	mov	r0, r3
 8005356:	f7fd f850 	bl	80023fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005368:	b29b      	uxth	r3, r3
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	b29b      	uxth	r3, r3
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f8d9 	bl	8005528 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005376:	e0b3      	b.n	80054e0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800537c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005380:	429a      	cmp	r2, r3
 8005382:	f040 80ad 	bne.w	80054e0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005390:	f040 80a6 	bne.w	80054e0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800539e:	4619      	mov	r1, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f8c1 	bl	8005528 <HAL_UARTEx_RxEventCallback>
      return;
 80053a6:	e09b      	b.n	80054e0 <HAL_UART_IRQHandler+0x548>
 80053a8:	08005607 	.word	0x08005607
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 808e 	beq.w	80054e4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80053c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8089 	beq.w	80054e4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	330c      	adds	r3, #12
 80053f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80053f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e3      	bne.n	80053d2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3314      	adds	r3, #20
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	623b      	str	r3, [r7, #32]
   return(result);
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3314      	adds	r3, #20
 800542a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800542e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e3      	bne.n	800540a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0310 	bic.w	r3, r3, #16
 8005466:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	330c      	adds	r3, #12
 8005470:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005474:	61fa      	str	r2, [r7, #28]
 8005476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	69b9      	ldr	r1, [r7, #24]
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	617b      	str	r3, [r7, #20]
   return(result);
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e3      	bne.n	8005450 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800548e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f847 	bl	8005528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800549a:	e023      	b.n	80054e4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800549c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <HAL_UART_IRQHandler+0x524>
 80054a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f8b7 	bl	8005628 <UART_Transmit_IT>
    return;
 80054ba:	e014      	b.n	80054e6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00e      	beq.n	80054e6 <HAL_UART_IRQHandler+0x54e>
 80054c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f8f7 	bl	80056c8 <UART_EndTransmit_IT>
    return;
 80054da:	e004      	b.n	80054e6 <HAL_UART_IRQHandler+0x54e>
    return;
 80054dc:	bf00      	nop
 80054de:	e002      	b.n	80054e6 <HAL_UART_IRQHandler+0x54e>
      return;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <HAL_UART_IRQHandler+0x54e>
      return;
 80054e4:	bf00      	nop
  }
}
 80054e6:	37e8      	adds	r7, #232	@ 0xe8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b095      	sub	sp, #84	@ 0x54
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800555e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005568:	643a      	str	r2, [r7, #64]	@ 0x40
 800556a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800556e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e5      	bne.n	8005548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3314      	adds	r3, #20
 8005582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	61fb      	str	r3, [r7, #28]
   return(result);
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800559c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800559e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d119      	bne.n	80055ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055d8:	61ba      	str	r2, [r7, #24]
 80055da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6979      	ldr	r1, [r7, #20]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	613b      	str	r3, [r7, #16]
   return(result);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e5      	bne.n	80055b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055fa:	bf00      	nop
 80055fc:	3754      	adds	r7, #84	@ 0x54
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff ff7a 	bl	8005514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b21      	cmp	r3, #33	@ 0x21
 800563a:	d13e      	bne.n	80056ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005644:	d114      	bne.n	8005670 <UART_Transmit_IT+0x48>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d110      	bne.n	8005670 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005662:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]
 800566e:	e008      	b.n	8005682 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	1c59      	adds	r1, r3, #1
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6211      	str	r1, [r2, #32]
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29b      	uxth	r3, r3
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4619      	mov	r1, r3
 8005690:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68da      	ldr	r2, [r3, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e000      	b.n	80056bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
  }
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff feff 	bl	80054ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	@ 0x30
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b22      	cmp	r3, #34	@ 0x22
 8005712:	f040 80aa 	bne.w	800586a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800571e:	d115      	bne.n	800574c <UART_Receive_IT+0x54>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d111      	bne.n	800574c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	b29b      	uxth	r3, r3
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	b29a      	uxth	r2, r3
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	1c9a      	adds	r2, r3, #2
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	629a      	str	r2, [r3, #40]	@ 0x28
 800574a:	e024      	b.n	8005796 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800575a:	d007      	beq.n	800576c <UART_Receive_IT+0x74>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <UART_Receive_IT+0x82>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	b2da      	uxtb	r2, r3
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e008      	b.n	800578c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005786:	b2da      	uxtb	r2, r3
 8005788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29b      	uxth	r3, r3
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	4619      	mov	r1, r3
 80057a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d15d      	bne.n	8005866 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0220 	bic.w	r2, r2, #32
 80057b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d135      	bne.n	800585c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	330c      	adds	r3, #12
 80057fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	613b      	str	r3, [r7, #16]
   return(result);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f023 0310 	bic.w	r3, r3, #16
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005816:	623a      	str	r2, [r7, #32]
 8005818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	69f9      	ldr	r1, [r7, #28]
 800581c:	6a3a      	ldr	r2, [r7, #32]
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	61bb      	str	r3, [r7, #24]
   return(result);
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e5      	bne.n	80057f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b10      	cmp	r3, #16
 8005836:	d10a      	bne.n	800584e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff fe67 	bl	8005528 <HAL_UARTEx_RxEventCallback>
 800585a:	e002      	b.n	8005862 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fe4f 	bl	8005500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	e002      	b.n	800586c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e000      	b.n	800586c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800586a:	2302      	movs	r3, #2
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3730      	adds	r7, #48	@ 0x30
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005878:	b0c0      	sub	sp, #256	@ 0x100
 800587a:	af00      	add	r7, sp, #0
 800587c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	68d9      	ldr	r1, [r3, #12]
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	ea40 0301 	orr.w	r3, r0, r1
 800589c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058cc:	f021 010c 	bic.w	r1, r1, #12
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058da:	430b      	orrs	r3, r1
 80058dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	6999      	ldr	r1, [r3, #24]
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	ea40 0301 	orr.w	r3, r0, r1
 80058fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b8f      	ldr	r3, [pc, #572]	@ (8005b40 <UART_SetConfig+0x2cc>)
 8005904:	429a      	cmp	r2, r3
 8005906:	d005      	beq.n	8005914 <UART_SetConfig+0xa0>
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b44 <UART_SetConfig+0x2d0>)
 8005910:	429a      	cmp	r2, r3
 8005912:	d104      	bne.n	800591e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7fe f8f4 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8005918:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800591c:	e003      	b.n	8005926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800591e:	f7fe f8db 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8005922:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005930:	f040 810c 	bne.w	8005b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800593e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	1891      	adds	r1, r2, r2
 800594c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800594e:	415b      	adcs	r3, r3
 8005950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005956:	4621      	mov	r1, r4
 8005958:	eb12 0801 	adds.w	r8, r2, r1
 800595c:	4629      	mov	r1, r5
 800595e:	eb43 0901 	adc.w	r9, r3, r1
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800596e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005976:	4690      	mov	r8, r2
 8005978:	4699      	mov	r9, r3
 800597a:	4623      	mov	r3, r4
 800597c:	eb18 0303 	adds.w	r3, r8, r3
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005984:	462b      	mov	r3, r5
 8005986:	eb49 0303 	adc.w	r3, r9, r3
 800598a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800599a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800599e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059a2:	460b      	mov	r3, r1
 80059a4:	18db      	adds	r3, r3, r3
 80059a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059a8:	4613      	mov	r3, r2
 80059aa:	eb42 0303 	adc.w	r3, r2, r3
 80059ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80059b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059b8:	f7fa fc62 	bl	8000280 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b61      	ldr	r3, [pc, #388]	@ (8005b48 <UART_SetConfig+0x2d4>)
 80059c2:	fba3 2302 	umull	r2, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	011c      	lsls	r4, r3, #4
 80059ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059e4:	415b      	adcs	r3, r3
 80059e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059ec:	4641      	mov	r1, r8
 80059ee:	eb12 0a01 	adds.w	sl, r2, r1
 80059f2:	4649      	mov	r1, r9
 80059f4:	eb43 0b01 	adc.w	fp, r3, r1
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a0c:	4692      	mov	sl, r2
 8005a0e:	469b      	mov	fp, r3
 8005a10:	4643      	mov	r3, r8
 8005a12:	eb1a 0303 	adds.w	r3, sl, r3
 8005a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	18db      	adds	r3, r3, r3
 8005a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a3e:	4613      	mov	r3, r2
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a4e:	f7fa fc17 	bl	8000280 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2264      	movs	r2, #100	@ 0x64
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	1acb      	subs	r3, r1, r3
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a6e:	4b36      	ldr	r3, [pc, #216]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005a70:	fba3 2302 	umull	r2, r3, r3, r2
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a7c:	441c      	add	r4, r3
 8005a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a90:	4642      	mov	r2, r8
 8005a92:	464b      	mov	r3, r9
 8005a94:	1891      	adds	r1, r2, r2
 8005a96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a98:	415b      	adcs	r3, r3
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	1851      	adds	r1, r2, r1
 8005aa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ab8:	4659      	mov	r1, fp
 8005aba:	00cb      	lsls	r3, r1, #3
 8005abc:	4651      	mov	r1, sl
 8005abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	00ca      	lsls	r2, r1, #3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	4642      	mov	r2, r8
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	eb42 0303 	adc.w	r3, r2, r3
 8005adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005af4:	460b      	mov	r3, r1
 8005af6:	18db      	adds	r3, r3, r3
 8005af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005afa:	4613      	mov	r3, r2
 8005afc:	eb42 0303 	adc.w	r3, r2, r3
 8005b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b0a:	f7fa fbb9 	bl	8000280 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005b14:	fba3 1302 	umull	r1, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	2164      	movs	r1, #100	@ 0x64
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	3332      	adds	r3, #50	@ 0x32
 8005b26:	4a08      	ldr	r2, [pc, #32]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f003 0207 	and.w	r2, r3, #7
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4422      	add	r2, r4
 8005b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b3c:	e106      	b.n	8005d4c <UART_SetConfig+0x4d8>
 8005b3e:	bf00      	nop
 8005b40:	40011000 	.word	0x40011000
 8005b44:	40011400 	.word	0x40011400
 8005b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	1891      	adds	r1, r2, r2
 8005b64:	6239      	str	r1, [r7, #32]
 8005b66:	415b      	adcs	r3, r3
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b6e:	4641      	mov	r1, r8
 8005b70:	1854      	adds	r4, r2, r1
 8005b72:	4649      	mov	r1, r9
 8005b74:	eb43 0501 	adc.w	r5, r3, r1
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	00eb      	lsls	r3, r5, #3
 8005b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b86:	00e2      	lsls	r2, r4, #3
 8005b88:	4614      	mov	r4, r2
 8005b8a:	461d      	mov	r5, r3
 8005b8c:	4643      	mov	r3, r8
 8005b8e:	18e3      	adds	r3, r4, r3
 8005b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b94:	464b      	mov	r3, r9
 8005b96:	eb45 0303 	adc.w	r3, r5, r3
 8005b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005baa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bba:	4629      	mov	r1, r5
 8005bbc:	008b      	lsls	r3, r1, #2
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	008a      	lsls	r2, r1, #2
 8005bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bcc:	f7fa fb58 	bl	8000280 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4b60      	ldr	r3, [pc, #384]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	011c      	lsls	r4, r3, #4
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	1891      	adds	r1, r2, r2
 8005bf6:	61b9      	str	r1, [r7, #24]
 8005bf8:	415b      	adcs	r3, r3
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c00:	4641      	mov	r1, r8
 8005c02:	1851      	adds	r1, r2, r1
 8005c04:	6139      	str	r1, [r7, #16]
 8005c06:	4649      	mov	r1, r9
 8005c08:	414b      	adcs	r3, r1
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c18:	4659      	mov	r1, fp
 8005c1a:	00cb      	lsls	r3, r1, #3
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c22:	4651      	mov	r1, sl
 8005c24:	00ca      	lsls	r2, r1, #3
 8005c26:	4610      	mov	r0, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	189b      	adds	r3, r3, r2
 8005c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c34:	464b      	mov	r3, r9
 8005c36:	460a      	mov	r2, r1
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c58:	4649      	mov	r1, r9
 8005c5a:	008b      	lsls	r3, r1, #2
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c62:	4641      	mov	r1, r8
 8005c64:	008a      	lsls	r2, r1, #2
 8005c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c6a:	f7fa fb09 	bl	8000280 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	4b38      	ldr	r3, [pc, #224]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005c76:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2264      	movs	r2, #100	@ 0x64
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	1acb      	subs	r3, r1, r3
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	3332      	adds	r3, #50	@ 0x32
 8005c88:	4a33      	ldr	r2, [pc, #204]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c94:	441c      	add	r4, r3
 8005c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	1891      	adds	r1, r2, r2
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	415b      	adcs	r3, r3
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	1851      	adds	r1, r2, r1
 8005cb8:	6039      	str	r1, [r7, #0]
 8005cba:	4649      	mov	r1, r9
 8005cbc:	414b      	adcs	r3, r1
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ccc:	4659      	mov	r1, fp
 8005cce:	00cb      	lsls	r3, r1, #3
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	00ca      	lsls	r2, r1, #3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	460a      	mov	r2, r1
 8005cea:	eb42 0303 	adc.w	r3, r2, r3
 8005cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d08:	4649      	mov	r1, r9
 8005d0a:	008b      	lsls	r3, r1, #2
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d12:	4641      	mov	r1, r8
 8005d14:	008a      	lsls	r2, r1, #2
 8005d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d1a:	f7fa fab1 	bl	8000280 <__aeabi_uldivmod>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005d24:	fba3 1302 	umull	r1, r3, r3, r2
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2164      	movs	r1, #100	@ 0x64
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	3332      	adds	r3, #50	@ 0x32
 8005d36:	4a08      	ldr	r2, [pc, #32]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f003 020f 	and.w	r2, r3, #15
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4422      	add	r2, r4
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d52:	46bd      	mov	sp, r7
 8005d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d58:	51eb851f 	.word	0x51eb851f

08005d5c <__NVIC_SetPriority>:
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	6039      	str	r1, [r7, #0]
 8005d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	db0a      	blt.n	8005d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	490c      	ldr	r1, [pc, #48]	@ (8005da8 <__NVIC_SetPriority+0x4c>)
 8005d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7a:	0112      	lsls	r2, r2, #4
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	440b      	add	r3, r1
 8005d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d84:	e00a      	b.n	8005d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	4908      	ldr	r1, [pc, #32]	@ (8005dac <__NVIC_SetPriority+0x50>)
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	3b04      	subs	r3, #4
 8005d94:	0112      	lsls	r2, r2, #4
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	440b      	add	r3, r1
 8005d9a:	761a      	strb	r2, [r3, #24]
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	e000e100 	.word	0xe000e100
 8005dac:	e000ed00 	.word	0xe000ed00

08005db0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005db4:	2100      	movs	r1, #0
 8005db6:	f06f 0004 	mvn.w	r0, #4
 8005dba:	f7ff ffcf 	bl	8005d5c <__NVIC_SetPriority>
#endif
}
 8005dbe:	bf00      	nop
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dca:	f3ef 8305 	mrs	r3, IPSR
 8005dce:	603b      	str	r3, [r7, #0]
  return(result);
 8005dd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005dd6:	f06f 0305 	mvn.w	r3, #5
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	e00c      	b.n	8005df8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005dde:	4b0a      	ldr	r3, [pc, #40]	@ (8005e08 <osKernelInitialize+0x44>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d105      	bne.n	8005df2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005de6:	4b08      	ldr	r3, [pc, #32]	@ (8005e08 <osKernelInitialize+0x44>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	e002      	b.n	8005df8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295
 8005df6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005df8:	687b      	ldr	r3, [r7, #4]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000204 	.word	0x20000204

08005e0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e12:	f3ef 8305 	mrs	r3, IPSR
 8005e16:	603b      	str	r3, [r7, #0]
  return(result);
 8005e18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e1e:	f06f 0305 	mvn.w	r3, #5
 8005e22:	607b      	str	r3, [r7, #4]
 8005e24:	e010      	b.n	8005e48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e26:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <osKernelStart+0x48>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d109      	bne.n	8005e42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e2e:	f7ff ffbf 	bl	8005db0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e32:	4b08      	ldr	r3, [pc, #32]	@ (8005e54 <osKernelStart+0x48>)
 8005e34:	2202      	movs	r2, #2
 8005e36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e38:	f002 f892 	bl	8007f60 <vTaskStartScheduler>
      stat = osOK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	607b      	str	r3, [r7, #4]
 8005e40:	e002      	b.n	8005e48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e42:	f04f 33ff 	mov.w	r3, #4294967295
 8005e46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e48:	687b      	ldr	r3, [r7, #4]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000204 	.word	0x20000204

08005e58 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e5e:	f3ef 8305 	mrs	r3, IPSR
 8005e62:	603b      	str	r3, [r7, #0]
  return(result);
 8005e64:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005e6a:	f002 f9a5 	bl	80081b8 <xTaskGetTickCountFromISR>
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	e002      	b.n	8005e78 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005e72:	f002 f991 	bl	8008198 <xTaskGetTickCount>
 8005e76:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005e78:	687b      	ldr	r3, [r7, #4]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b08e      	sub	sp, #56	@ 0x38
 8005e86:	af04      	add	r7, sp, #16
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e92:	f3ef 8305 	mrs	r3, IPSR
 8005e96:	617b      	str	r3, [r7, #20]
  return(result);
 8005e98:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d17e      	bne.n	8005f9c <osThreadNew+0x11a>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d07b      	beq.n	8005f9c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005ea4:	2380      	movs	r3, #128	@ 0x80
 8005ea6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ea8:	2318      	movs	r3, #24
 8005eaa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d045      	beq.n	8005f48 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <osThreadNew+0x48>
        name = attr->name;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d008      	beq.n	8005ef0 <osThreadNew+0x6e>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2b38      	cmp	r3, #56	@ 0x38
 8005ee2:	d805      	bhi.n	8005ef0 <osThreadNew+0x6e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <osThreadNew+0x72>
        return (NULL);
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e054      	b.n	8005f9e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	089b      	lsrs	r3, r3, #2
 8005f02:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00e      	beq.n	8005f2a <osThreadNew+0xa8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2ba7      	cmp	r3, #167	@ 0xa7
 8005f12:	d90a      	bls.n	8005f2a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d006      	beq.n	8005f2a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <osThreadNew+0xa8>
        mem = 1;
 8005f24:	2301      	movs	r3, #1
 8005f26:	61bb      	str	r3, [r7, #24]
 8005f28:	e010      	b.n	8005f4c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10c      	bne.n	8005f4c <osThreadNew+0xca>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d108      	bne.n	8005f4c <osThreadNew+0xca>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d104      	bne.n	8005f4c <osThreadNew+0xca>
          mem = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61bb      	str	r3, [r7, #24]
 8005f46:	e001      	b.n	8005f4c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d110      	bne.n	8005f74 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f5a:	9202      	str	r2, [sp, #8]
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	6a3a      	ldr	r2, [r7, #32]
 8005f66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f001 fd85 	bl	8007a78 <xTaskCreateStatic>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e013      	b.n	8005f9c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d110      	bne.n	8005f9c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f107 0310 	add.w	r3, r7, #16
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f001 fdd3 	bl	8007b38 <xTaskCreate>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d001      	beq.n	8005f9c <osThreadNew+0x11a>
            hTask = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f9c:	693b      	ldr	r3, [r7, #16]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3728      	adds	r7, #40	@ 0x28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fae:	f3ef 8305 	mrs	r3, IPSR
 8005fb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <osDelay+0x1c>
    stat = osErrorISR;
 8005fba:	f06f 0305 	mvn.w	r3, #5
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e007      	b.n	8005fd2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 ff91 	bl	8007ef4 <vTaskDelay>
    }
  }

  return (stat);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fe8:	f3ef 8305 	mrs	r3, IPSR
 8005fec:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fee:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d174      	bne.n	80060de <osMutexNew+0x102>
    if (attr != NULL) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	61bb      	str	r3, [r7, #24]
 8006000:	e001      	b.n	8006006 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <osMutexNew+0x3a>
      rmtx = 1U;
 8006010:	2301      	movs	r3, #1
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	e001      	b.n	800601a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d15c      	bne.n	80060de <osMutexNew+0x102>
      mem = -1;
 8006024:	f04f 33ff 	mov.w	r3, #4294967295
 8006028:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d015      	beq.n	800605c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d006      	beq.n	8006046 <osMutexNew+0x6a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b4f      	cmp	r3, #79	@ 0x4f
 800603e:	d902      	bls.n	8006046 <osMutexNew+0x6a>
          mem = 1;
 8006040:	2301      	movs	r3, #1
 8006042:	613b      	str	r3, [r7, #16]
 8006044:	e00c      	b.n	8006060 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d108      	bne.n	8006060 <osMutexNew+0x84>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d104      	bne.n	8006060 <osMutexNew+0x84>
            mem = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	e001      	b.n	8006060 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d112      	bne.n	800608c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	4619      	mov	r1, r3
 8006072:	2004      	movs	r0, #4
 8006074:	f000 ff61 	bl	8006f3a <xQueueCreateMutexStatic>
 8006078:	61f8      	str	r0, [r7, #28]
 800607a:	e016      	b.n	80060aa <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	4619      	mov	r1, r3
 8006082:	2001      	movs	r0, #1
 8006084:	f000 ff59 	bl	8006f3a <xQueueCreateMutexStatic>
 8006088:	61f8      	str	r0, [r7, #28]
 800608a:	e00e      	b.n	80060aa <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006098:	2004      	movs	r0, #4
 800609a:	f000 ff36 	bl	8006f0a <xQueueCreateMutex>
 800609e:	61f8      	str	r0, [r7, #28]
 80060a0:	e003      	b.n	80060aa <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80060a2:	2001      	movs	r0, #1
 80060a4:	f000 ff31 	bl	8006f0a <xQueueCreateMutex>
 80060a8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <osMutexNew+0xee>
        if (attr != NULL) {
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <osMutexNew+0xe2>
          name = attr->name;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	e001      	b.n	80060c2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80060c2:	68f9      	ldr	r1, [r7, #12]
 80060c4:	69f8      	ldr	r0, [r7, #28]
 80060c6:	f001 fc79 	bl	80079bc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d006      	beq.n	80060de <osMutexNew+0x102>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80060de:	69fb      	ldr	r3, [r7, #28]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3720      	adds	r7, #32
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006106:	f3ef 8305 	mrs	r3, IPSR
 800610a:	60bb      	str	r3, [r7, #8]
  return(result);
 800610c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006112:	f06f 0305 	mvn.w	r3, #5
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	e02c      	b.n	8006174 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d103      	bne.n	8006128 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006120:	f06f 0303 	mvn.w	r3, #3
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	e025      	b.n	8006174 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d011      	beq.n	8006152 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6938      	ldr	r0, [r7, #16]
 8006132:	f000 ff52 	bl	8006fda <xQueueTakeMutexRecursive>
 8006136:	4603      	mov	r3, r0
 8006138:	2b01      	cmp	r3, #1
 800613a:	d01b      	beq.n	8006174 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006142:	f06f 0301 	mvn.w	r3, #1
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	e014      	b.n	8006174 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800614a:	f06f 0302 	mvn.w	r3, #2
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	e010      	b.n	8006174 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6938      	ldr	r0, [r7, #16]
 8006156:	f001 f9f9 	bl	800754c <xQueueSemaphoreTake>
 800615a:	4603      	mov	r3, r0
 800615c:	2b01      	cmp	r3, #1
 800615e:	d009      	beq.n	8006174 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006166:	f06f 0301 	mvn.w	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e002      	b.n	8006174 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800616e:	f06f 0302 	mvn.w	r3, #2
 8006172:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006174:	697b      	ldr	r3, [r7, #20]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800619a:	f3ef 8305 	mrs	r3, IPSR
 800619e:	60bb      	str	r3, [r7, #8]
  return(result);
 80061a0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <osMutexRelease+0x30>
    stat = osErrorISR;
 80061a6:	f06f 0305 	mvn.w	r3, #5
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e01f      	b.n	80061ee <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80061b4:	f06f 0303 	mvn.w	r3, #3
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	e018      	b.n	80061ee <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80061c2:	6938      	ldr	r0, [r7, #16]
 80061c4:	f000 fed4 	bl	8006f70 <xQueueGiveMutexRecursive>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d00f      	beq.n	80061ee <osMutexRelease+0x70>
        stat = osErrorResource;
 80061ce:	f06f 0302 	mvn.w	r3, #2
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	e00b      	b.n	80061ee <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80061d6:	2300      	movs	r3, #0
 80061d8:	2200      	movs	r2, #0
 80061da:	2100      	movs	r1, #0
 80061dc:	6938      	ldr	r0, [r7, #16]
 80061de:	f000 ff33 	bl	8007048 <xQueueGenericSend>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d002      	beq.n	80061ee <osMutexRelease+0x70>
        stat = osErrorResource;
 80061e8:	f06f 0302 	mvn.w	r3, #2
 80061ec:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80061ee:	697b      	ldr	r3, [r7, #20]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4a07      	ldr	r2, [pc, #28]	@ (8006224 <vApplicationGetIdleTaskMemory+0x2c>)
 8006208:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4a06      	ldr	r2, [pc, #24]	@ (8006228 <vApplicationGetIdleTaskMemory+0x30>)
 800620e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2280      	movs	r2, #128	@ 0x80
 8006214:	601a      	str	r2, [r3, #0]
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000208 	.word	0x20000208
 8006228:	200002b0 	.word	0x200002b0

0800622c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4a07      	ldr	r2, [pc, #28]	@ (8006258 <vApplicationGetTimerTaskMemory+0x2c>)
 800623c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4a06      	ldr	r2, [pc, #24]	@ (800625c <vApplicationGetTimerTaskMemory+0x30>)
 8006242:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800624a:	601a      	str	r2, [r3, #0]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	200004b0 	.word	0x200004b0
 800625c:	20000558 	.word	0x20000558

08006260 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08a      	sub	sp, #40	@ 0x28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800626c:	f001 fee8 	bl	8008040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006270:	4b5c      	ldr	r3, [pc, #368]	@ (80063e4 <pvPortMalloc+0x184>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006278:	f000 f924 	bl	80064c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800627c:	4b5a      	ldr	r3, [pc, #360]	@ (80063e8 <pvPortMalloc+0x188>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4013      	ands	r3, r2
 8006284:	2b00      	cmp	r3, #0
 8006286:	f040 8095 	bne.w	80063b4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01e      	beq.n	80062ce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006290:	2208      	movs	r2, #8
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4413      	add	r3, r2
 8006296:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d015      	beq.n	80062ce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f023 0307 	bic.w	r3, r3, #7
 80062a8:	3308      	adds	r3, #8
 80062aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00b      	beq.n	80062ce <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	e7fd      	b.n	80062ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d06f      	beq.n	80063b4 <pvPortMalloc+0x154>
 80062d4:	4b45      	ldr	r3, [pc, #276]	@ (80063ec <pvPortMalloc+0x18c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d86a      	bhi.n	80063b4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062de:	4b44      	ldr	r3, [pc, #272]	@ (80063f0 <pvPortMalloc+0x190>)
 80062e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062e2:	4b43      	ldr	r3, [pc, #268]	@ (80063f0 <pvPortMalloc+0x190>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062e8:	e004      	b.n	80062f4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d903      	bls.n	8006306 <pvPortMalloc+0xa6>
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f1      	bne.n	80062ea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006306:	4b37      	ldr	r3, [pc, #220]	@ (80063e4 <pvPortMalloc+0x184>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630c:	429a      	cmp	r2, r3
 800630e:	d051      	beq.n	80063b4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2208      	movs	r2, #8
 8006316:	4413      	add	r3, r2
 8006318:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	1ad2      	subs	r2, r2, r3
 800632a:	2308      	movs	r3, #8
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	429a      	cmp	r2, r3
 8006330:	d920      	bls.n	8006374 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4413      	add	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00b      	beq.n	800635c <pvPortMalloc+0xfc>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	613b      	str	r3, [r7, #16]
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	1ad2      	subs	r2, r2, r3
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800636e:	69b8      	ldr	r0, [r7, #24]
 8006370:	f000 f90a 	bl	8006588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006374:	4b1d      	ldr	r3, [pc, #116]	@ (80063ec <pvPortMalloc+0x18c>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	4a1b      	ldr	r2, [pc, #108]	@ (80063ec <pvPortMalloc+0x18c>)
 8006380:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006382:	4b1a      	ldr	r3, [pc, #104]	@ (80063ec <pvPortMalloc+0x18c>)
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b1b      	ldr	r3, [pc, #108]	@ (80063f4 <pvPortMalloc+0x194>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d203      	bcs.n	8006396 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800638e:	4b17      	ldr	r3, [pc, #92]	@ (80063ec <pvPortMalloc+0x18c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a18      	ldr	r2, [pc, #96]	@ (80063f4 <pvPortMalloc+0x194>)
 8006394:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	4b13      	ldr	r3, [pc, #76]	@ (80063e8 <pvPortMalloc+0x188>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	431a      	orrs	r2, r3
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063aa:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <pvPortMalloc+0x198>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3301      	adds	r3, #1
 80063b0:	4a11      	ldr	r2, [pc, #68]	@ (80063f8 <pvPortMalloc+0x198>)
 80063b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063b4:	f001 fe52 	bl	800805c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <pvPortMalloc+0x17a>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60fb      	str	r3, [r7, #12]
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <pvPortMalloc+0x176>
	return pvReturn;
 80063da:	69fb      	ldr	r3, [r7, #28]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3728      	adds	r7, #40	@ 0x28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	20004560 	.word	0x20004560
 80063e8:	20004574 	.word	0x20004574
 80063ec:	20004564 	.word	0x20004564
 80063f0:	20004558 	.word	0x20004558
 80063f4:	20004568 	.word	0x20004568
 80063f8:	2000456c 	.word	0x2000456c

080063fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d04f      	beq.n	80064ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800640e:	2308      	movs	r3, #8
 8006410:	425b      	negs	r3, r3
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4413      	add	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	4b25      	ldr	r3, [pc, #148]	@ (80064b8 <vPortFree+0xbc>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4013      	ands	r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <vPortFree+0x46>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	60fb      	str	r3, [r7, #12]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00b      	beq.n	8006462 <vPortFree+0x66>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60bb      	str	r3, [r7, #8]
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	4b14      	ldr	r3, [pc, #80]	@ (80064b8 <vPortFree+0xbc>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01e      	beq.n	80064ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11a      	bne.n	80064ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	4b0e      	ldr	r3, [pc, #56]	@ (80064b8 <vPortFree+0xbc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	43db      	mvns	r3, r3
 8006482:	401a      	ands	r2, r3
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006488:	f001 fdda 	bl	8008040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <vPortFree+0xc0>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4413      	add	r3, r2
 8006496:	4a09      	ldr	r2, [pc, #36]	@ (80064bc <vPortFree+0xc0>)
 8006498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800649a:	6938      	ldr	r0, [r7, #16]
 800649c:	f000 f874 	bl	8006588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <vPortFree+0xc4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3301      	adds	r3, #1
 80064a6:	4a06      	ldr	r2, [pc, #24]	@ (80064c0 <vPortFree+0xc4>)
 80064a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064aa:	f001 fdd7 	bl	800805c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064ae:	bf00      	nop
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20004574 	.word	0x20004574
 80064bc:	20004564 	.word	0x20004564
 80064c0:	20004570 	.word	0x20004570

080064c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80064ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064d0:	4b27      	ldr	r3, [pc, #156]	@ (8006570 <prvHeapInit+0xac>)
 80064d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00c      	beq.n	80064f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3307      	adds	r3, #7
 80064e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0307 	bic.w	r3, r3, #7
 80064ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006570 <prvHeapInit+0xac>)
 80064f4:	4413      	add	r3, r2
 80064f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006574 <prvHeapInit+0xb0>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006502:	4b1c      	ldr	r3, [pc, #112]	@ (8006574 <prvHeapInit+0xb0>)
 8006504:	2200      	movs	r2, #0
 8006506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	4413      	add	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006510:	2208      	movs	r2, #8
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0307 	bic.w	r3, r3, #7
 800651e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a15      	ldr	r2, [pc, #84]	@ (8006578 <prvHeapInit+0xb4>)
 8006524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006526:	4b14      	ldr	r3, [pc, #80]	@ (8006578 <prvHeapInit+0xb4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800652e:	4b12      	ldr	r3, [pc, #72]	@ (8006578 <prvHeapInit+0xb4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006544:	4b0c      	ldr	r3, [pc, #48]	@ (8006578 <prvHeapInit+0xb4>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	4a0a      	ldr	r2, [pc, #40]	@ (800657c <prvHeapInit+0xb8>)
 8006552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	4a09      	ldr	r2, [pc, #36]	@ (8006580 <prvHeapInit+0xbc>)
 800655a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800655c:	4b09      	ldr	r3, [pc, #36]	@ (8006584 <prvHeapInit+0xc0>)
 800655e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006562:	601a      	str	r2, [r3, #0]
}
 8006564:	bf00      	nop
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000958 	.word	0x20000958
 8006574:	20004558 	.word	0x20004558
 8006578:	20004560 	.word	0x20004560
 800657c:	20004568 	.word	0x20004568
 8006580:	20004564 	.word	0x20004564
 8006584:	20004574 	.word	0x20004574

08006588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006590:	4b28      	ldr	r3, [pc, #160]	@ (8006634 <prvInsertBlockIntoFreeList+0xac>)
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	e002      	b.n	800659c <prvInsertBlockIntoFreeList+0x14>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d8f7      	bhi.n	8006596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	4413      	add	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d108      	bne.n	80065ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	441a      	add	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	441a      	add	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d118      	bne.n	8006610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b15      	ldr	r3, [pc, #84]	@ (8006638 <prvInsertBlockIntoFreeList+0xb0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d00d      	beq.n	8006606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	441a      	add	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	e008      	b.n	8006618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006606:	4b0c      	ldr	r3, [pc, #48]	@ (8006638 <prvInsertBlockIntoFreeList+0xb0>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e003      	b.n	8006618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	429a      	cmp	r2, r3
 800661e:	d002      	beq.n	8006626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20004558 	.word	0x20004558
 8006638:	20004560 	.word	0x20004560

0800663c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f103 0208 	add.w	r2, r3, #8
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f04f 32ff 	mov.w	r2, #4294967295
 8006654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f103 0208 	add.w	r2, r3, #8
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f103 0208 	add.w	r2, r3, #8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006696:	b480      	push	{r7}
 8006698:	b085      	sub	sp, #20
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	601a      	str	r2, [r3, #0]
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d103      	bne.n	80066fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e00c      	b.n	8006718 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3308      	adds	r3, #8
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e002      	b.n	800670c <vListInsert+0x2e>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	429a      	cmp	r2, r3
 8006716:	d2f6      	bcs.n	8006706 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6892      	ldr	r2, [r2, #8]
 8006766:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6852      	ldr	r2, [r2, #4]
 8006770:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d103      	bne.n	8006784 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	1e5a      	subs	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3b04      	subs	r3, #4
 80067b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3b04      	subs	r3, #4
 80067c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f023 0201 	bic.w	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3b04      	subs	r3, #4
 80067d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006808 <pxPortInitialiseStack+0x64>)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3b14      	subs	r3, #20
 80067de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3b04      	subs	r3, #4
 80067ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f06f 0202 	mvn.w	r2, #2
 80067f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3b20      	subs	r3, #32
 80067f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067fa:	68fb      	ldr	r3, [r7, #12]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	0800680d 	.word	0x0800680d

0800680c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006816:	4b13      	ldr	r3, [pc, #76]	@ (8006864 <prvTaskExitError+0x58>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681e:	d00b      	beq.n	8006838 <prvTaskExitError+0x2c>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60fb      	str	r3, [r7, #12]
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <prvTaskExitError+0x28>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60bb      	str	r3, [r7, #8]
}
 800684a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800684c:	bf00      	nop
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0fc      	beq.n	800684e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	2000000c 	.word	0x2000000c
	...

08006870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006870:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <pxCurrentTCBConst2>)
 8006872:	6819      	ldr	r1, [r3, #0]
 8006874:	6808      	ldr	r0, [r1, #0]
 8006876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687a:	f380 8809 	msr	PSP, r0
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f380 8811 	msr	BASEPRI, r0
 800688a:	4770      	bx	lr
 800688c:	f3af 8000 	nop.w

08006890 <pxCurrentTCBConst2>:
 8006890:	200045c0 	.word	0x200045c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop

08006898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006898:	4808      	ldr	r0, [pc, #32]	@ (80068bc <prvPortStartFirstTask+0x24>)
 800689a:	6800      	ldr	r0, [r0, #0]
 800689c:	6800      	ldr	r0, [r0, #0]
 800689e:	f380 8808 	msr	MSP, r0
 80068a2:	f04f 0000 	mov.w	r0, #0
 80068a6:	f380 8814 	msr	CONTROL, r0
 80068aa:	b662      	cpsie	i
 80068ac:	b661      	cpsie	f
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	df00      	svc	0
 80068b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068ba:	bf00      	nop
 80068bc:	e000ed08 	.word	0xe000ed08

080068c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068c6:	4b47      	ldr	r3, [pc, #284]	@ (80069e4 <xPortStartScheduler+0x124>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a47      	ldr	r2, [pc, #284]	@ (80069e8 <xPortStartScheduler+0x128>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10b      	bne.n	80068e8 <xPortStartScheduler+0x28>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60fb      	str	r3, [r7, #12]
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	e7fd      	b.n	80068e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068e8:	4b3e      	ldr	r3, [pc, #248]	@ (80069e4 <xPortStartScheduler+0x124>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a3f      	ldr	r2, [pc, #252]	@ (80069ec <xPortStartScheduler+0x12c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d10b      	bne.n	800690a <xPortStartScheduler+0x4a>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	613b      	str	r3, [r7, #16]
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop
 8006908:	e7fd      	b.n	8006906 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800690a:	4b39      	ldr	r3, [pc, #228]	@ (80069f0 <xPortStartScheduler+0x130>)
 800690c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	22ff      	movs	r2, #255	@ 0xff
 800691a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800692c:	b2da      	uxtb	r2, r3
 800692e:	4b31      	ldr	r3, [pc, #196]	@ (80069f4 <xPortStartScheduler+0x134>)
 8006930:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006932:	4b31      	ldr	r3, [pc, #196]	@ (80069f8 <xPortStartScheduler+0x138>)
 8006934:	2207      	movs	r2, #7
 8006936:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006938:	e009      	b.n	800694e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800693a:	4b2f      	ldr	r3, [pc, #188]	@ (80069f8 <xPortStartScheduler+0x138>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3b01      	subs	r3, #1
 8006940:	4a2d      	ldr	r2, [pc, #180]	@ (80069f8 <xPortStartScheduler+0x138>)
 8006942:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	b2db      	uxtb	r3, r3
 800694c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006956:	2b80      	cmp	r3, #128	@ 0x80
 8006958:	d0ef      	beq.n	800693a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800695a:	4b27      	ldr	r3, [pc, #156]	@ (80069f8 <xPortStartScheduler+0x138>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1c3 0307 	rsb	r3, r3, #7
 8006962:	2b04      	cmp	r3, #4
 8006964:	d00b      	beq.n	800697e <xPortStartScheduler+0xbe>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60bb      	str	r3, [r7, #8]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800697e:	4b1e      	ldr	r3, [pc, #120]	@ (80069f8 <xPortStartScheduler+0x138>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	4a1c      	ldr	r2, [pc, #112]	@ (80069f8 <xPortStartScheduler+0x138>)
 8006986:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006988:	4b1b      	ldr	r3, [pc, #108]	@ (80069f8 <xPortStartScheduler+0x138>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006990:	4a19      	ldr	r2, [pc, #100]	@ (80069f8 <xPortStartScheduler+0x138>)
 8006992:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	b2da      	uxtb	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800699c:	4b17      	ldr	r3, [pc, #92]	@ (80069fc <xPortStartScheduler+0x13c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a16      	ldr	r2, [pc, #88]	@ (80069fc <xPortStartScheduler+0x13c>)
 80069a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80069a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069a8:	4b14      	ldr	r3, [pc, #80]	@ (80069fc <xPortStartScheduler+0x13c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a13      	ldr	r2, [pc, #76]	@ (80069fc <xPortStartScheduler+0x13c>)
 80069ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80069b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069b4:	f000 f8da 	bl	8006b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069b8:	4b11      	ldr	r3, [pc, #68]	@ (8006a00 <xPortStartScheduler+0x140>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069be:	f000 f8f9 	bl	8006bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069c2:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <xPortStartScheduler+0x144>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006a04 <xPortStartScheduler+0x144>)
 80069c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80069cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069ce:	f7ff ff63 	bl	8006898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069d2:	f001 fcbd 	bl	8008350 <vTaskSwitchContext>
	prvTaskExitError();
 80069d6:	f7ff ff19 	bl	800680c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	e000ed00 	.word	0xe000ed00
 80069e8:	410fc271 	.word	0x410fc271
 80069ec:	410fc270 	.word	0x410fc270
 80069f0:	e000e400 	.word	0xe000e400
 80069f4:	20004578 	.word	0x20004578
 80069f8:	2000457c 	.word	0x2000457c
 80069fc:	e000ed20 	.word	0xe000ed20
 8006a00:	2000000c 	.word	0x2000000c
 8006a04:	e000ef34 	.word	0xe000ef34

08006a08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	607b      	str	r3, [r7, #4]
}
 8006a20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a22:	4b10      	ldr	r3, [pc, #64]	@ (8006a64 <vPortEnterCritical+0x5c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3301      	adds	r3, #1
 8006a28:	4a0e      	ldr	r2, [pc, #56]	@ (8006a64 <vPortEnterCritical+0x5c>)
 8006a2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a64 <vPortEnterCritical+0x5c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d110      	bne.n	8006a56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a34:	4b0c      	ldr	r3, [pc, #48]	@ (8006a68 <vPortEnterCritical+0x60>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <vPortEnterCritical+0x4e>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	603b      	str	r3, [r7, #0]
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	e7fd      	b.n	8006a52 <vPortEnterCritical+0x4a>
	}
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	2000000c 	.word	0x2000000c
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a72:	4b12      	ldr	r3, [pc, #72]	@ (8006abc <vPortExitCritical+0x50>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <vPortExitCritical+0x26>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	607b      	str	r3, [r7, #4]
}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	e7fd      	b.n	8006a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a92:	4b0a      	ldr	r3, [pc, #40]	@ (8006abc <vPortExitCritical+0x50>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	4a08      	ldr	r2, [pc, #32]	@ (8006abc <vPortExitCritical+0x50>)
 8006a9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a9c:	4b07      	ldr	r3, [pc, #28]	@ (8006abc <vPortExitCritical+0x50>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d105      	bne.n	8006ab0 <vPortExitCritical+0x44>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006aae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	2000000c 	.word	0x2000000c

08006ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ac0:	f3ef 8009 	mrs	r0, PSP
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	4b15      	ldr	r3, [pc, #84]	@ (8006b20 <pxCurrentTCBConst>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	f01e 0f10 	tst.w	lr, #16
 8006ad0:	bf08      	it	eq
 8006ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ada:	6010      	str	r0, [r2, #0]
 8006adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006ae4:	f380 8811 	msr	BASEPRI, r0
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f001 fc2e 	bl	8008350 <vTaskSwitchContext>
 8006af4:	f04f 0000 	mov.w	r0, #0
 8006af8:	f380 8811 	msr	BASEPRI, r0
 8006afc:	bc09      	pop	{r0, r3}
 8006afe:	6819      	ldr	r1, [r3, #0]
 8006b00:	6808      	ldr	r0, [r1, #0]
 8006b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b06:	f01e 0f10 	tst.w	lr, #16
 8006b0a:	bf08      	it	eq
 8006b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b10:	f380 8809 	msr	PSP, r0
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	f3af 8000 	nop.w

08006b20 <pxCurrentTCBConst>:
 8006b20:	200045c0 	.word	0x200045c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop

08006b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	607b      	str	r3, [r7, #4]
}
 8006b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b42:	f001 fb4b 	bl	80081dc <xTaskIncrementTick>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b4c:	4b06      	ldr	r3, [pc, #24]	@ (8006b68 <xPortSysTickHandler+0x40>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	2300      	movs	r3, #0
 8006b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f383 8811 	msr	BASEPRI, r3
}
 8006b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <vPortSetupTimerInterrupt+0x34>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba4 <vPortSetupTimerInterrupt+0x38>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba8 <vPortSetupTimerInterrupt+0x3c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0a      	ldr	r2, [pc, #40]	@ (8006bac <vPortSetupTimerInterrupt+0x40>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	099b      	lsrs	r3, r3, #6
 8006b88:	4a09      	ldr	r2, [pc, #36]	@ (8006bb0 <vPortSetupTimerInterrupt+0x44>)
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b8e:	4b04      	ldr	r3, [pc, #16]	@ (8006ba0 <vPortSetupTimerInterrupt+0x34>)
 8006b90:	2207      	movs	r2, #7
 8006b92:	601a      	str	r2, [r3, #0]
}
 8006b94:	bf00      	nop
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	e000e010 	.word	0xe000e010
 8006ba4:	e000e018 	.word	0xe000e018
 8006ba8:	20000000 	.word	0x20000000
 8006bac:	10624dd3 	.word	0x10624dd3
 8006bb0:	e000e014 	.word	0xe000e014

08006bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006bc4 <vPortEnableVFP+0x10>
 8006bb8:	6801      	ldr	r1, [r0, #0]
 8006bba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006bbe:	6001      	str	r1, [r0, #0]
 8006bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bc2:	bf00      	nop
 8006bc4:	e000ed88 	.word	0xe000ed88

08006bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bce:	f3ef 8305 	mrs	r3, IPSR
 8006bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b0f      	cmp	r3, #15
 8006bd8:	d915      	bls.n	8006c06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bda:	4a18      	ldr	r2, [pc, #96]	@ (8006c3c <vPortValidateInterruptPriority+0x74>)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006be4:	4b16      	ldr	r3, [pc, #88]	@ (8006c40 <vPortValidateInterruptPriority+0x78>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	7afa      	ldrb	r2, [r7, #11]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d20b      	bcs.n	8006c06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	607b      	str	r3, [r7, #4]
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c06:	4b0f      	ldr	r3, [pc, #60]	@ (8006c44 <vPortValidateInterruptPriority+0x7c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c48 <vPortValidateInterruptPriority+0x80>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d90b      	bls.n	8006c2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	603b      	str	r3, [r7, #0]
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <vPortValidateInterruptPriority+0x62>
	}
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	e000e3f0 	.word	0xe000e3f0
 8006c40:	20004578 	.word	0x20004578
 8006c44:	e000ed0c 	.word	0xe000ed0c
 8006c48:	2000457c 	.word	0x2000457c

08006c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10b      	bne.n	8006c78 <xQueueGenericReset+0x2c>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60bb      	str	r3, [r7, #8]
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	e7fd      	b.n	8006c74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c78:	f7ff fec6 	bl	8006a08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c84:	68f9      	ldr	r1, [r7, #12]
 8006c86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	441a      	add	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	68f9      	ldr	r1, [r7, #12]
 8006cac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	441a      	add	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	22ff      	movs	r2, #255	@ 0xff
 8006cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	22ff      	movs	r2, #255	@ 0xff
 8006cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d114      	bne.n	8006cf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01a      	beq.n	8006d0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3310      	adds	r3, #16
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fbf0 	bl	80084c0 <xTaskRemoveFromEventList>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d012      	beq.n	8006d0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d1c <xQueueGenericReset+0xd0>)
 8006ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	e009      	b.n	8006d0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3310      	adds	r3, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff fc9d 	bl	800663c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3324      	adds	r3, #36	@ 0x24
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff fc98 	bl	800663c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d0c:	f7ff feae 	bl	8006a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d10:	2301      	movs	r3, #1
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	e000ed04 	.word	0xe000ed04

08006d20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08e      	sub	sp, #56	@ 0x38
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	e7fd      	b.n	8006d48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10b      	bne.n	8006d6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	e7fd      	b.n	8006d66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <xQueueGenericCreateStatic+0x56>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <xQueueGenericCreateStatic+0x5a>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <xQueueGenericCreateStatic+0x5c>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	623b      	str	r3, [r7, #32]
}
 8006d92:	bf00      	nop
 8006d94:	bf00      	nop
 8006d96:	e7fd      	b.n	8006d94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d102      	bne.n	8006da4 <xQueueGenericCreateStatic+0x84>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <xQueueGenericCreateStatic+0x88>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <xQueueGenericCreateStatic+0x8a>
 8006da8:	2300      	movs	r3, #0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10b      	bne.n	8006dc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	61fb      	str	r3, [r7, #28]
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	e7fd      	b.n	8006dc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dc6:	2350      	movs	r3, #80	@ 0x50
 8006dc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2b50      	cmp	r3, #80	@ 0x50
 8006dce:	d00b      	beq.n	8006de8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	61bb      	str	r3, [r7, #24]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006de8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00d      	beq.n	8006e10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	4613      	mov	r3, r2
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 f840 	bl	8006e90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3730      	adds	r7, #48	@ 0x30
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b08a      	sub	sp, #40	@ 0x28
 8006e1e:	af02      	add	r7, sp, #8
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	4613      	mov	r3, r2
 8006e26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10b      	bne.n	8006e46 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	613b      	str	r3, [r7, #16]
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	3350      	adds	r3, #80	@ 0x50
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff fa03 	bl	8006260 <pvPortMalloc>
 8006e5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d011      	beq.n	8006e86 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	3350      	adds	r3, #80	@ 0x50
 8006e6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e74:	79fa      	ldrb	r2, [r7, #7]
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	68b9      	ldr	r1, [r7, #8]
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f805 	bl	8006e90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e86:	69bb      	ldr	r3, [r7, #24]
	}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3720      	adds	r7, #32
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d103      	bne.n	8006eac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	e002      	b.n	8006eb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	69b8      	ldr	r0, [r7, #24]
 8006ec2:	f7ff fec3 	bl	8006c4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	78fa      	ldrb	r2, [r7, #3]
 8006eca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b082      	sub	sp, #8
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00e      	beq.n	8006f02 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2100      	movs	r1, #0
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f8a3 	bl	8007048 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b086      	sub	sp, #24
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	4603      	mov	r3, r0
 8006f12:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f14:	2301      	movs	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006f1c:	79fb      	ldrb	r3, [r7, #7]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6939      	ldr	r1, [r7, #16]
 8006f22:	6978      	ldr	r0, [r7, #20]
 8006f24:	f7ff ff79 	bl	8006e1a <xQueueGenericCreate>
 8006f28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff ffd3 	bl	8006ed6 <prvInitialiseMutex>

		return xNewQueue;
 8006f30:	68fb      	ldr	r3, [r7, #12]
	}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b088      	sub	sp, #32
 8006f3e:	af02      	add	r7, sp, #8
 8006f40:	4603      	mov	r3, r0
 8006f42:	6039      	str	r1, [r7, #0]
 8006f44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f46:	2301      	movs	r3, #1
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2200      	movs	r2, #0
 8006f56:	6939      	ldr	r1, [r7, #16]
 8006f58:	6978      	ldr	r0, [r7, #20]
 8006f5a:	f7ff fee1 	bl	8006d20 <xQueueGenericCreateStatic>
 8006f5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff ffb8 	bl	8006ed6 <prvInitialiseMutex>

		return xNewQueue;
 8006f66:	68fb      	ldr	r3, [r7, #12]
	}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006f70:	b590      	push	{r4, r7, lr}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10b      	bne.n	8006f9a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	60fb      	str	r3, [r7, #12]
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	e7fd      	b.n	8006f96 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	689c      	ldr	r4, [r3, #8]
 8006f9e:	f001 fc55 	bl	800884c <xTaskGetCurrentTaskHandle>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	429c      	cmp	r4, r3
 8006fa6:	d111      	bne.n	8006fcc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	1e5a      	subs	r2, r3, #1
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d105      	bne.n	8006fc6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	6938      	ldr	r0, [r7, #16]
 8006fc2:	f000 f841 	bl	8007048 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	e001      	b.n	8006fd0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006fd0:	697b      	ldr	r3, [r7, #20]
	}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd90      	pop	{r4, r7, pc}

08006fda <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006fda:	b590      	push	{r4, r7, lr}
 8006fdc:	b087      	sub	sp, #28
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10b      	bne.n	8007006 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	60fb      	str	r3, [r7, #12]
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	e7fd      	b.n	8007002 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	689c      	ldr	r4, [r3, #8]
 800700a:	f001 fc1f 	bl	800884c <xTaskGetCurrentTaskHandle>
 800700e:	4603      	mov	r3, r0
 8007010:	429c      	cmp	r4, r3
 8007012:	d107      	bne.n	8007024 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800701e:	2301      	movs	r3, #1
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	e00c      	b.n	800703e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6938      	ldr	r0, [r7, #16]
 8007028:	f000 fa90 	bl	800754c <xQueueSemaphoreTake>
 800702c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800703e:	697b      	ldr	r3, [r7, #20]
	}
 8007040:	4618      	mov	r0, r3
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	bd90      	pop	{r4, r7, pc}

08007048 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08e      	sub	sp, #56	@ 0x38
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007056:	2300      	movs	r3, #0
 8007058:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10b      	bne.n	800707c <xQueueGenericSend+0x34>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	e7fd      	b.n	8007078 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d103      	bne.n	800708a <xQueueGenericSend+0x42>
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <xQueueGenericSend+0x46>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <xQueueGenericSend+0x48>
 800708e:	2300      	movs	r3, #0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <xQueueGenericSend+0x64>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	e7fd      	b.n	80070a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d103      	bne.n	80070ba <xQueueGenericSend+0x72>
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <xQueueGenericSend+0x76>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <xQueueGenericSend+0x78>
 80070be:	2300      	movs	r3, #0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <xQueueGenericSend+0x94>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	623b      	str	r3, [r7, #32]
}
 80070d6:	bf00      	nop
 80070d8:	bf00      	nop
 80070da:	e7fd      	b.n	80070d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070dc:	f001 fbc6 	bl	800886c <xTaskGetSchedulerState>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <xQueueGenericSend+0xa4>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <xQueueGenericSend+0xa8>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <xQueueGenericSend+0xaa>
 80070f0:	2300      	movs	r3, #0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10b      	bne.n	800710e <xQueueGenericSend+0xc6>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	61fb      	str	r3, [r7, #28]
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	e7fd      	b.n	800710a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800710e:	f7ff fc7b 	bl	8006a08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711a:	429a      	cmp	r2, r3
 800711c:	d302      	bcc.n	8007124 <xQueueGenericSend+0xdc>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d129      	bne.n	8007178 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800712a:	f000 fb37 	bl	800779c <prvCopyDataToQueue>
 800712e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007134:	2b00      	cmp	r3, #0
 8007136:	d010      	beq.n	800715a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	3324      	adds	r3, #36	@ 0x24
 800713c:	4618      	mov	r0, r3
 800713e:	f001 f9bf 	bl	80084c0 <xTaskRemoveFromEventList>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d013      	beq.n	8007170 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007148:	4b3f      	ldr	r3, [pc, #252]	@ (8007248 <xQueueGenericSend+0x200>)
 800714a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	e00a      	b.n	8007170 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800715a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d007      	beq.n	8007170 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007160:	4b39      	ldr	r3, [pc, #228]	@ (8007248 <xQueueGenericSend+0x200>)
 8007162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007170:	f7ff fc7c 	bl	8006a6c <vPortExitCritical>
				return pdPASS;
 8007174:	2301      	movs	r3, #1
 8007176:	e063      	b.n	8007240 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d103      	bne.n	8007186 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800717e:	f7ff fc75 	bl	8006a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007182:	2300      	movs	r3, #0
 8007184:	e05c      	b.n	8007240 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007188:	2b00      	cmp	r3, #0
 800718a:	d106      	bne.n	800719a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800718c:	f107 0314 	add.w	r3, r7, #20
 8007190:	4618      	mov	r0, r3
 8007192:	f001 f9f9 	bl	8008588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007196:	2301      	movs	r3, #1
 8007198:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800719a:	f7ff fc67 	bl	8006a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800719e:	f000 ff4f 	bl	8008040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071a2:	f7ff fc31 	bl	8006a08 <vPortEnterCritical>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071ac:	b25b      	sxtb	r3, r3
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d103      	bne.n	80071bc <xQueueGenericSend+0x174>
 80071b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071c2:	b25b      	sxtb	r3, r3
 80071c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c8:	d103      	bne.n	80071d2 <xQueueGenericSend+0x18a>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071d2:	f7ff fc4b 	bl	8006a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071d6:	1d3a      	adds	r2, r7, #4
 80071d8:	f107 0314 	add.w	r3, r7, #20
 80071dc:	4611      	mov	r1, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 f9e8 	bl	80085b4 <xTaskCheckForTimeOut>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d124      	bne.n	8007234 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071ec:	f000 fbce 	bl	800798c <prvIsQueueFull>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d018      	beq.n	8007228 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	3310      	adds	r3, #16
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 f90c 	bl	800841c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007206:	f000 fb59 	bl	80078bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800720a:	f000 ff27 	bl	800805c <xTaskResumeAll>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	f47f af7c 	bne.w	800710e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007216:	4b0c      	ldr	r3, [pc, #48]	@ (8007248 <xQueueGenericSend+0x200>)
 8007218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	e772      	b.n	800710e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800722a:	f000 fb47 	bl	80078bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800722e:	f000 ff15 	bl	800805c <xTaskResumeAll>
 8007232:	e76c      	b.n	800710e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007236:	f000 fb41 	bl	80078bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800723a:	f000 ff0f 	bl	800805c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800723e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007240:	4618      	mov	r0, r3
 8007242:	3738      	adds	r7, #56	@ 0x38
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b090      	sub	sp, #64	@ 0x40
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800725e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	e7fd      	b.n	8007278 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <xQueueGenericSendFromISR+0x3e>
 8007282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <xQueueGenericSendFromISR+0x42>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <xQueueGenericSendFromISR+0x44>
 800728e:	2300      	movs	r3, #0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10b      	bne.n	80072ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072a6:	bf00      	nop
 80072a8:	bf00      	nop
 80072aa:	e7fd      	b.n	80072a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d103      	bne.n	80072ba <xQueueGenericSendFromISR+0x6e>
 80072b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d101      	bne.n	80072be <xQueueGenericSendFromISR+0x72>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <xQueueGenericSendFromISR+0x74>
 80072be:	2300      	movs	r3, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10b      	bne.n	80072dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	623b      	str	r3, [r7, #32]
}
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
 80072da:	e7fd      	b.n	80072d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072dc:	f7ff fc74 	bl	8006bc8 <vPortValidateInterruptPriority>
	__asm volatile
 80072e0:	f3ef 8211 	mrs	r2, BASEPRI
 80072e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	61fa      	str	r2, [r7, #28]
 80072f6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80072f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007304:	429a      	cmp	r2, r3
 8007306:	d302      	bcc.n	800730e <xQueueGenericSendFromISR+0xc2>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d12f      	bne.n	800736e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800730e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007310:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007314:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007324:	f000 fa3a 	bl	800779c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007328:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007330:	d112      	bne.n	8007358 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007336:	2b00      	cmp	r3, #0
 8007338:	d016      	beq.n	8007368 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800733a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733c:	3324      	adds	r3, #36	@ 0x24
 800733e:	4618      	mov	r0, r3
 8007340:	f001 f8be 	bl	80084c0 <xTaskRemoveFromEventList>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e007      	b.n	8007368 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007358:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800735c:	3301      	adds	r3, #1
 800735e:	b2db      	uxtb	r3, r3
 8007360:	b25a      	sxtb	r2, r3
 8007362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007368:	2301      	movs	r3, #1
 800736a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800736c:	e001      	b.n	8007372 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800736e:	2300      	movs	r3, #0
 8007370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007374:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f383 8811 	msr	BASEPRI, r3
}
 800737c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800737e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007380:	4618      	mov	r0, r3
 8007382:	3740      	adds	r7, #64	@ 0x40
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08c      	sub	sp, #48	@ 0x30
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800739c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10b      	bne.n	80073ba <xQueueReceive+0x32>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	623b      	str	r3, [r7, #32]
}
 80073b4:	bf00      	nop
 80073b6:	bf00      	nop
 80073b8:	e7fd      	b.n	80073b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d103      	bne.n	80073c8 <xQueueReceive+0x40>
 80073c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <xQueueReceive+0x44>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <xQueueReceive+0x46>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10b      	bne.n	80073ea <xQueueReceive+0x62>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	61fb      	str	r3, [r7, #28]
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop
 80073e8:	e7fd      	b.n	80073e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ea:	f001 fa3f 	bl	800886c <xTaskGetSchedulerState>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <xQueueReceive+0x72>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <xQueueReceive+0x76>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <xQueueReceive+0x78>
 80073fe:	2300      	movs	r3, #0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10b      	bne.n	800741c <xQueueReceive+0x94>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	61bb      	str	r3, [r7, #24]
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800741c:	f7ff faf4 	bl	8006a08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007424:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01f      	beq.n	800746c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007430:	f000 fa1e 	bl	8007870 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007436:	1e5a      	subs	r2, r3, #1
 8007438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800743c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00f      	beq.n	8007464 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007446:	3310      	adds	r3, #16
 8007448:	4618      	mov	r0, r3
 800744a:	f001 f839 	bl	80084c0 <xTaskRemoveFromEventList>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007454:	4b3c      	ldr	r3, [pc, #240]	@ (8007548 <xQueueReceive+0x1c0>)
 8007456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007464:	f7ff fb02 	bl	8006a6c <vPortExitCritical>
				return pdPASS;
 8007468:	2301      	movs	r3, #1
 800746a:	e069      	b.n	8007540 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d103      	bne.n	800747a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007472:	f7ff fafb 	bl	8006a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007476:	2300      	movs	r3, #0
 8007478:	e062      	b.n	8007540 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007480:	f107 0310 	add.w	r3, r7, #16
 8007484:	4618      	mov	r0, r3
 8007486:	f001 f87f 	bl	8008588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800748a:	2301      	movs	r3, #1
 800748c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800748e:	f7ff faed 	bl	8006a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007492:	f000 fdd5 	bl	8008040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007496:	f7ff fab7 	bl	8006a08 <vPortEnterCritical>
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074a0:	b25b      	sxtb	r3, r3
 80074a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a6:	d103      	bne.n	80074b0 <xQueueReceive+0x128>
 80074a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074b6:	b25b      	sxtb	r3, r3
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d103      	bne.n	80074c6 <xQueueReceive+0x13e>
 80074be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074c6:	f7ff fad1 	bl	8006a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074ca:	1d3a      	adds	r2, r7, #4
 80074cc:	f107 0310 	add.w	r3, r7, #16
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f001 f86e 	bl	80085b4 <xTaskCheckForTimeOut>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d123      	bne.n	8007526 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074e0:	f000 fa3e 	bl	8007960 <prvIsQueueEmpty>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d017      	beq.n	800751a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	3324      	adds	r3, #36	@ 0x24
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	4611      	mov	r1, r2
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 ff92 	bl	800841c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074fa:	f000 f9df 	bl	80078bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074fe:	f000 fdad 	bl	800805c <xTaskResumeAll>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d189      	bne.n	800741c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007508:	4b0f      	ldr	r3, [pc, #60]	@ (8007548 <xQueueReceive+0x1c0>)
 800750a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	e780      	b.n	800741c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800751a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800751c:	f000 f9ce 	bl	80078bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007520:	f000 fd9c 	bl	800805c <xTaskResumeAll>
 8007524:	e77a      	b.n	800741c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007528:	f000 f9c8 	bl	80078bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800752c:	f000 fd96 	bl	800805c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007532:	f000 fa15 	bl	8007960 <prvIsQueueEmpty>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	f43f af6f 	beq.w	800741c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800753e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007540:	4618      	mov	r0, r3
 8007542:	3730      	adds	r7, #48	@ 0x30
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08e      	sub	sp, #56	@ 0x38
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10b      	bne.n	8007580 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	623b      	str	r3, [r7, #32]
}
 800757a:	bf00      	nop
 800757c:	bf00      	nop
 800757e:	e7fd      	b.n	800757c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	61fb      	str	r3, [r7, #28]
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	e7fd      	b.n	800759c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075a0:	f001 f964 	bl	800886c <xTaskGetSchedulerState>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d102      	bne.n	80075b0 <xQueueSemaphoreTake+0x64>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <xQueueSemaphoreTake+0x68>
 80075b0:	2301      	movs	r3, #1
 80075b2:	e000      	b.n	80075b6 <xQueueSemaphoreTake+0x6a>
 80075b4:	2300      	movs	r3, #0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	61bb      	str	r3, [r7, #24]
}
 80075cc:	bf00      	nop
 80075ce:	bf00      	nop
 80075d0:	e7fd      	b.n	80075ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075d2:	f7ff fa19 	bl	8006a08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80075d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80075dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d024      	beq.n	800762c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80075e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e4:	1e5a      	subs	r2, r3, #1
 80075e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d104      	bne.n	80075fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80075f2:	f001 fab5 	bl	8008b60 <pvTaskIncrementMutexHeldCount>
 80075f6:	4602      	mov	r2, r0
 80075f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00f      	beq.n	8007624 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007606:	3310      	adds	r3, #16
 8007608:	4618      	mov	r0, r3
 800760a:	f000 ff59 	bl	80084c0 <xTaskRemoveFromEventList>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007614:	4b54      	ldr	r3, [pc, #336]	@ (8007768 <xQueueSemaphoreTake+0x21c>)
 8007616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007624:	f7ff fa22 	bl	8006a6c <vPortExitCritical>
				return pdPASS;
 8007628:	2301      	movs	r3, #1
 800762a:	e098      	b.n	800775e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d112      	bne.n	8007658 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00b      	beq.n	8007650 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	617b      	str	r3, [r7, #20]
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007650:	f7ff fa0c 	bl	8006a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007654:	2300      	movs	r3, #0
 8007656:	e082      	b.n	800775e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800765e:	f107 030c 	add.w	r3, r7, #12
 8007662:	4618      	mov	r0, r3
 8007664:	f000 ff90 	bl	8008588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800766c:	f7ff f9fe 	bl	8006a6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007670:	f000 fce6 	bl	8008040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007674:	f7ff f9c8 	bl	8006a08 <vPortEnterCritical>
 8007678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800767e:	b25b      	sxtb	r3, r3
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007684:	d103      	bne.n	800768e <xQueueSemaphoreTake+0x142>
 8007686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800768e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007690:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007694:	b25b      	sxtb	r3, r3
 8007696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769a:	d103      	bne.n	80076a4 <xQueueSemaphoreTake+0x158>
 800769c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076a4:	f7ff f9e2 	bl	8006a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076a8:	463a      	mov	r2, r7
 80076aa:	f107 030c 	add.w	r3, r7, #12
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 ff7f 	bl	80085b4 <xTaskCheckForTimeOut>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d132      	bne.n	8007722 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076be:	f000 f94f 	bl	8007960 <prvIsQueueEmpty>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d026      	beq.n	8007716 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d109      	bne.n	80076e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80076d0:	f7ff f99a 	bl	8006a08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 f8e5 	bl	80088a8 <xTaskPriorityInherit>
 80076de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80076e0:	f7ff f9c4 	bl	8006a6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e6:	3324      	adds	r3, #36	@ 0x24
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	4611      	mov	r1, r2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fe95 	bl	800841c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076f4:	f000 f8e2 	bl	80078bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076f8:	f000 fcb0 	bl	800805c <xTaskResumeAll>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f47f af67 	bne.w	80075d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007704:	4b18      	ldr	r3, [pc, #96]	@ (8007768 <xQueueSemaphoreTake+0x21c>)
 8007706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	e75d      	b.n	80075d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007716:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007718:	f000 f8d0 	bl	80078bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800771c:	f000 fc9e 	bl	800805c <xTaskResumeAll>
 8007720:	e757      	b.n	80075d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007722:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007724:	f000 f8ca 	bl	80078bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007728:	f000 fc98 	bl	800805c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800772c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800772e:	f000 f917 	bl	8007960 <prvIsQueueEmpty>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	f43f af4c 	beq.w	80075d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00d      	beq.n	800775c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007740:	f7ff f962 	bl	8006a08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007744:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007746:	f000 f811 	bl	800776c <prvGetDisinheritPriorityAfterTimeout>
 800774a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800774c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007752:	4618      	mov	r0, r3
 8007754:	f001 f980 	bl	8008a58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007758:	f7ff f988 	bl	8006a6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800775c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800775e:	4618      	mov	r0, r3
 8007760:	3738      	adds	r7, #56	@ 0x38
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	d006      	beq.n	800778a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e001      	b.n	800778e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800778e:	68fb      	ldr	r3, [r7, #12]
	}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10d      	bne.n	80077d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d14d      	bne.n	800785e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 f8d6 	bl	8008978 <xTaskPriorityDisinherit>
 80077cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	609a      	str	r2, [r3, #8]
 80077d4:	e043      	b.n	800785e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d119      	bne.n	8007810 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6858      	ldr	r0, [r3, #4]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e4:	461a      	mov	r2, r3
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	f002 f8a9 	bl	800993e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f4:	441a      	add	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	429a      	cmp	r2, r3
 8007804:	d32b      	bcc.n	800785e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	e026      	b.n	800785e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	68d8      	ldr	r0, [r3, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007818:	461a      	mov	r2, r3
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	f002 f88f 	bl	800993e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007828:	425b      	negs	r3, r3
 800782a:	441a      	add	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d207      	bcs.n	800784c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007844:	425b      	negs	r3, r3
 8007846:	441a      	add	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d105      	bne.n	800785e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3b01      	subs	r3, #1
 800785c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007866:	697b      	ldr	r3, [r7, #20]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787e:	2b00      	cmp	r3, #0
 8007880:	d018      	beq.n	80078b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788a:	441a      	add	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	429a      	cmp	r2, r3
 800789a:	d303      	bcc.n	80078a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68d9      	ldr	r1, [r3, #12]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ac:	461a      	mov	r2, r3
 80078ae:	6838      	ldr	r0, [r7, #0]
 80078b0:	f002 f845 	bl	800993e <memcpy>
	}
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078c4:	f7ff f8a0 	bl	8006a08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078d0:	e011      	b.n	80078f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d012      	beq.n	8007900 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3324      	adds	r3, #36	@ 0x24
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fdee 	bl	80084c0 <xTaskRemoveFromEventList>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078ea:	f000 fec7 	bl	800867c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dce9      	bgt.n	80078d2 <prvUnlockQueue+0x16>
 80078fe:	e000      	b.n	8007902 <prvUnlockQueue+0x46>
					break;
 8007900:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	22ff      	movs	r2, #255	@ 0xff
 8007906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800790a:	f7ff f8af 	bl	8006a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800790e:	f7ff f87b 	bl	8006a08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007918:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800791a:	e011      	b.n	8007940 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d012      	beq.n	800794a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3310      	adds	r3, #16
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fdc9 	bl	80084c0 <xTaskRemoveFromEventList>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007934:	f000 fea2 	bl	800867c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	3b01      	subs	r3, #1
 800793c:	b2db      	uxtb	r3, r3
 800793e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007944:	2b00      	cmp	r3, #0
 8007946:	dce9      	bgt.n	800791c <prvUnlockQueue+0x60>
 8007948:	e000      	b.n	800794c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800794a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	22ff      	movs	r2, #255	@ 0xff
 8007950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007954:	f7ff f88a 	bl	8006a6c <vPortExitCritical>
}
 8007958:	bf00      	nop
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007968:	f7ff f84e 	bl	8006a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	e001      	b.n	800797e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800797e:	f7ff f875 	bl	8006a6c <vPortExitCritical>

	return xReturn;
 8007982:	68fb      	ldr	r3, [r7, #12]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007994:	f7ff f838 	bl	8006a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d102      	bne.n	80079aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079a4:	2301      	movs	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	e001      	b.n	80079ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079ae:	f7ff f85d 	bl	8006a6c <vPortExitCritical>

	return xReturn;
 80079b2:	68fb      	ldr	r3, [r7, #12]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	e014      	b.n	80079f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079cc:	4a0f      	ldr	r2, [pc, #60]	@ (8007a0c <vQueueAddToRegistry+0x50>)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10b      	bne.n	80079f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80079d8:	490c      	ldr	r1, [pc, #48]	@ (8007a0c <vQueueAddToRegistry+0x50>)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80079e2:	4a0a      	ldr	r2, [pc, #40]	@ (8007a0c <vQueueAddToRegistry+0x50>)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	4413      	add	r3, r2
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80079ee:	e006      	b.n	80079fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b07      	cmp	r3, #7
 80079fa:	d9e7      	bls.n	80079cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	20004580 	.word	0x20004580

08007a10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a20:	f7fe fff2 	bl	8006a08 <vPortEnterCritical>
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d103      	bne.n	8007a3a <vQueueWaitForMessageRestricted+0x2a>
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a40:	b25b      	sxtb	r3, r3
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d103      	bne.n	8007a50 <vQueueWaitForMessageRestricted+0x40>
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a50:	f7ff f80c 	bl	8006a6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	3324      	adds	r3, #36	@ 0x24
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fcff 	bl	8008468 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a6a:	6978      	ldr	r0, [r7, #20]
 8007a6c:	f7ff ff26 	bl	80078bc <prvUnlockQueue>
	}
 8007a70:	bf00      	nop
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	@ 0x38
 8007a7c:	af04      	add	r7, sp, #16
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10b      	bne.n	8007aa4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	623b      	str	r3, [r7, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	bf00      	nop
 8007aa2:	e7fd      	b.n	8007aa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10b      	bne.n	8007ac2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	61fb      	str	r3, [r7, #28]
}
 8007abc:	bf00      	nop
 8007abe:	bf00      	nop
 8007ac0:	e7fd      	b.n	8007abe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ac2:	23a8      	movs	r3, #168	@ 0xa8
 8007ac4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2ba8      	cmp	r3, #168	@ 0xa8
 8007aca:	d00b      	beq.n	8007ae4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	61bb      	str	r3, [r7, #24]
}
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	e7fd      	b.n	8007ae0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ae4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01e      	beq.n	8007b2a <xTaskCreateStatic+0xb2>
 8007aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01b      	beq.n	8007b2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007afa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b04:	2300      	movs	r3, #0
 8007b06:	9303      	str	r3, [sp, #12]
 8007b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0a:	9302      	str	r3, [sp, #8]
 8007b0c:	f107 0314 	add.w	r3, r7, #20
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f851 	bl	8007bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b24:	f000 f8f6 	bl	8007d14 <prvAddNewTaskToReadyList>
 8007b28:	e001      	b.n	8007b2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b2e:	697b      	ldr	r3, [r7, #20]
	}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3728      	adds	r7, #40	@ 0x28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08c      	sub	sp, #48	@ 0x30
 8007b3c:	af04      	add	r7, sp, #16
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b48:	88fb      	ldrh	r3, [r7, #6]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fb87 	bl	8006260 <pvPortMalloc>
 8007b52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00e      	beq.n	8007b78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b5a:	20a8      	movs	r0, #168	@ 0xa8
 8007b5c:	f7fe fb80 	bl	8006260 <pvPortMalloc>
 8007b60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b6e:	e005      	b.n	8007b7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b70:	6978      	ldr	r0, [r7, #20]
 8007b72:	f7fe fc43 	bl	80063fc <vPortFree>
 8007b76:	e001      	b.n	8007b7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d017      	beq.n	8007bb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9303      	str	r3, [sp, #12]
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	9302      	str	r3, [sp, #8]
 8007b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f80f 	bl	8007bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ba6:	69f8      	ldr	r0, [r7, #28]
 8007ba8:	f000 f8b4 	bl	8007d14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bac:	2301      	movs	r3, #1
 8007bae:	61bb      	str	r3, [r7, #24]
 8007bb0:	e002      	b.n	8007bb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
	}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3720      	adds	r7, #32
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	461a      	mov	r2, r3
 8007bdc:	21a5      	movs	r1, #165	@ 0xa5
 8007bde:	f001 fd66 	bl	80096ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007bec:	3b01      	subs	r3, #1
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f023 0307 	bic.w	r3, r3, #7
 8007bfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00b      	beq.n	8007c1e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	617b      	str	r3, [r7, #20]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01f      	beq.n	8007c64 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]
 8007c28:	e012      	b.n	8007c50 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	4413      	add	r3, r2
 8007c30:	7819      	ldrb	r1, [r3, #0]
 8007c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	4413      	add	r3, r2
 8007c38:	3334      	adds	r3, #52	@ 0x34
 8007c3a:	460a      	mov	r2, r1
 8007c3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	4413      	add	r3, r2
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d006      	beq.n	8007c58 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b0f      	cmp	r3, #15
 8007c54:	d9e9      	bls.n	8007c2a <prvInitialiseNewTask+0x66>
 8007c56:	e000      	b.n	8007c5a <prvInitialiseNewTask+0x96>
			{
				break;
 8007c58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c62:	e003      	b.n	8007c6c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6e:	2b37      	cmp	r3, #55	@ 0x37
 8007c70:	d901      	bls.n	8007c76 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c72:	2337      	movs	r3, #55	@ 0x37
 8007c74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	2200      	movs	r2, #0
 8007c86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe fcf5 	bl	800667c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	3318      	adds	r3, #24
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fcf0 	bl	800667c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ca0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007caa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	3354      	adds	r3, #84	@ 0x54
 8007cc6:	224c      	movs	r2, #76	@ 0x4c
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f001 fcef 	bl	80096ae <memset>
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8007d08 <prvInitialiseNewTask+0x144>)
 8007cd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8007d0c <prvInitialiseNewTask+0x148>)
 8007cda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cde:	4a0c      	ldr	r2, [pc, #48]	@ (8007d10 <prvInitialiseNewTask+0x14c>)
 8007ce0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	68f9      	ldr	r1, [r7, #12]
 8007ce6:	69b8      	ldr	r0, [r7, #24]
 8007ce8:	f7fe fd5c 	bl	80067a4 <pxPortInitialiseStack>
 8007cec:	4602      	mov	r2, r0
 8007cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cfe:	bf00      	nop
 8007d00:	3720      	adds	r7, #32
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20004bec 	.word	0x20004bec
 8007d0c:	20004c54 	.word	0x20004c54
 8007d10:	20004cbc 	.word	0x20004cbc

08007d14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d1c:	f7fe fe74 	bl	8006a08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d20:	4b2d      	ldr	r3, [pc, #180]	@ (8007dd8 <prvAddNewTaskToReadyList+0xc4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	4a2c      	ldr	r2, [pc, #176]	@ (8007dd8 <prvAddNewTaskToReadyList+0xc4>)
 8007d28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8007ddc <prvAddNewTaskToReadyList+0xc8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d32:	4a2a      	ldr	r2, [pc, #168]	@ (8007ddc <prvAddNewTaskToReadyList+0xc8>)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d38:	4b27      	ldr	r3, [pc, #156]	@ (8007dd8 <prvAddNewTaskToReadyList+0xc4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d110      	bne.n	8007d62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d40:	f000 fcc0 	bl	80086c4 <prvInitialiseTaskLists>
 8007d44:	e00d      	b.n	8007d62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d46:	4b26      	ldr	r3, [pc, #152]	@ (8007de0 <prvAddNewTaskToReadyList+0xcc>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d4e:	4b23      	ldr	r3, [pc, #140]	@ (8007ddc <prvAddNewTaskToReadyList+0xc8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d802      	bhi.n	8007d62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ddc <prvAddNewTaskToReadyList+0xc8>)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d62:	4b20      	ldr	r3, [pc, #128]	@ (8007de4 <prvAddNewTaskToReadyList+0xd0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3301      	adds	r3, #1
 8007d68:	4a1e      	ldr	r2, [pc, #120]	@ (8007de4 <prvAddNewTaskToReadyList+0xd0>)
 8007d6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007de4 <prvAddNewTaskToReadyList+0xd0>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d78:	4b1b      	ldr	r3, [pc, #108]	@ (8007de8 <prvAddNewTaskToReadyList+0xd4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d903      	bls.n	8007d88 <prvAddNewTaskToReadyList+0x74>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	4a18      	ldr	r2, [pc, #96]	@ (8007de8 <prvAddNewTaskToReadyList+0xd4>)
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4a15      	ldr	r2, [pc, #84]	@ (8007dec <prvAddNewTaskToReadyList+0xd8>)
 8007d96:	441a      	add	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7fe fc79 	bl	8006696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007da4:	f7fe fe62 	bl	8006a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007da8:	4b0d      	ldr	r3, [pc, #52]	@ (8007de0 <prvAddNewTaskToReadyList+0xcc>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00e      	beq.n	8007dce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007db0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ddc <prvAddNewTaskToReadyList+0xc8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d207      	bcs.n	8007dce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007df0 <prvAddNewTaskToReadyList+0xdc>)
 8007dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20004a94 	.word	0x20004a94
 8007ddc:	200045c0 	.word	0x200045c0
 8007de0:	20004aa0 	.word	0x20004aa0
 8007de4:	20004ab0 	.word	0x20004ab0
 8007de8:	20004a9c 	.word	0x20004a9c
 8007dec:	200045c4 	.word	0x200045c4
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	@ 0x28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10b      	bne.n	8007e20 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	617b      	str	r3, [r7, #20]
}
 8007e1a:	bf00      	nop
 8007e1c:	bf00      	nop
 8007e1e:	e7fd      	b.n	8007e1c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10b      	bne.n	8007e3e <vTaskDelayUntil+0x4a>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	613b      	str	r3, [r7, #16]
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8007ee8 <vTaskDelayUntil+0xf4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00b      	beq.n	8007e5e <vTaskDelayUntil+0x6a>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60fb      	str	r3, [r7, #12]
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	e7fd      	b.n	8007e5a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007e5e:	f000 f8ef 	bl	8008040 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007e62:	4b22      	ldr	r3, [pc, #136]	@ (8007eec <vTaskDelayUntil+0xf8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	4413      	add	r3, r2
 8007e70:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6a3a      	ldr	r2, [r7, #32]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d20b      	bcs.n	8007e94 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d211      	bcs.n	8007eaa <vTaskDelayUntil+0xb6>
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d90d      	bls.n	8007eaa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e92:	e00a      	b.n	8007eaa <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69fa      	ldr	r2, [r7, #28]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d303      	bcc.n	8007ea6 <vTaskDelayUntil+0xb2>
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d901      	bls.n	8007eaa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d006      	beq.n	8007ec4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fe62 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007ec4:	f000 f8ca 	bl	800805c <xTaskResumeAll>
 8007ec8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d107      	bne.n	8007ee0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007ed0:	4b07      	ldr	r3, [pc, #28]	@ (8007ef0 <vTaskDelayUntil+0xfc>)
 8007ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ee0:	bf00      	nop
 8007ee2:	3728      	adds	r7, #40	@ 0x28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20004abc 	.word	0x20004abc
 8007eec:	20004a98 	.word	0x20004a98
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007efc:	2300      	movs	r3, #0
 8007efe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d018      	beq.n	8007f38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f06:	4b14      	ldr	r3, [pc, #80]	@ (8007f58 <vTaskDelay+0x64>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00b      	beq.n	8007f26 <vTaskDelay+0x32>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	60bb      	str	r3, [r7, #8]
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	e7fd      	b.n	8007f22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f26:	f000 f88b 	bl	8008040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fe2b 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f32:	f000 f893 	bl	800805c <xTaskResumeAll>
 8007f36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d107      	bne.n	8007f4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f3e:	4b07      	ldr	r3, [pc, #28]	@ (8007f5c <vTaskDelay+0x68>)
 8007f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f4e:	bf00      	nop
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20004abc 	.word	0x20004abc
 8007f5c:	e000ed04 	.word	0xe000ed04

08007f60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08a      	sub	sp, #40	@ 0x28
 8007f64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f6e:	463a      	mov	r2, r7
 8007f70:	1d39      	adds	r1, r7, #4
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe f93e 	bl	80061f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	9202      	str	r2, [sp, #8]
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	2300      	movs	r3, #0
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	460a      	mov	r2, r1
 8007f8e:	4924      	ldr	r1, [pc, #144]	@ (8008020 <vTaskStartScheduler+0xc0>)
 8007f90:	4824      	ldr	r0, [pc, #144]	@ (8008024 <vTaskStartScheduler+0xc4>)
 8007f92:	f7ff fd71 	bl	8007a78 <xTaskCreateStatic>
 8007f96:	4603      	mov	r3, r0
 8007f98:	4a23      	ldr	r2, [pc, #140]	@ (8008028 <vTaskStartScheduler+0xc8>)
 8007f9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f9c:	4b22      	ldr	r3, [pc, #136]	@ (8008028 <vTaskStartScheduler+0xc8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d002      	beq.n	8007faa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	e001      	b.n	8007fae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d102      	bne.n	8007fba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fb4:	f000 fe3c 	bl	8008c30 <xTimerCreateTimerTask>
 8007fb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d11b      	bne.n	8007ff8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	613b      	str	r3, [r7, #16]
}
 8007fd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fd4:	4b15      	ldr	r3, [pc, #84]	@ (800802c <vTaskStartScheduler+0xcc>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3354      	adds	r3, #84	@ 0x54
 8007fda:	4a15      	ldr	r2, [pc, #84]	@ (8008030 <vTaskStartScheduler+0xd0>)
 8007fdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fde:	4b15      	ldr	r3, [pc, #84]	@ (8008034 <vTaskStartScheduler+0xd4>)
 8007fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fe6:	4b14      	ldr	r3, [pc, #80]	@ (8008038 <vTaskStartScheduler+0xd8>)
 8007fe8:	2201      	movs	r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fec:	4b13      	ldr	r3, [pc, #76]	@ (800803c <vTaskStartScheduler+0xdc>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ff2:	f7fe fc65 	bl	80068c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ff6:	e00f      	b.n	8008018 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffe:	d10b      	bne.n	8008018 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	60fb      	str	r3, [r7, #12]
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <vTaskStartScheduler+0xb4>
}
 8008018:	bf00      	nop
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	0800aa68 	.word	0x0800aa68
 8008024:	08008695 	.word	0x08008695
 8008028:	20004ab8 	.word	0x20004ab8
 800802c:	200045c0 	.word	0x200045c0
 8008030:	2000001c 	.word	0x2000001c
 8008034:	20004ab4 	.word	0x20004ab4
 8008038:	20004aa0 	.word	0x20004aa0
 800803c:	20004a98 	.word	0x20004a98

08008040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008044:	4b04      	ldr	r3, [pc, #16]	@ (8008058 <vTaskSuspendAll+0x18>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3301      	adds	r3, #1
 800804a:	4a03      	ldr	r2, [pc, #12]	@ (8008058 <vTaskSuspendAll+0x18>)
 800804c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800804e:	bf00      	nop
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	20004abc 	.word	0x20004abc

0800805c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008066:	2300      	movs	r3, #0
 8008068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800806a:	4b42      	ldr	r3, [pc, #264]	@ (8008174 <xTaskResumeAll+0x118>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10b      	bne.n	800808a <xTaskResumeAll+0x2e>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	603b      	str	r3, [r7, #0]
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	e7fd      	b.n	8008086 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800808a:	f7fe fcbd 	bl	8006a08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800808e:	4b39      	ldr	r3, [pc, #228]	@ (8008174 <xTaskResumeAll+0x118>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3b01      	subs	r3, #1
 8008094:	4a37      	ldr	r2, [pc, #220]	@ (8008174 <xTaskResumeAll+0x118>)
 8008096:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008098:	4b36      	ldr	r3, [pc, #216]	@ (8008174 <xTaskResumeAll+0x118>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d162      	bne.n	8008166 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080a0:	4b35      	ldr	r3, [pc, #212]	@ (8008178 <xTaskResumeAll+0x11c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d05e      	beq.n	8008166 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080a8:	e02f      	b.n	800810a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080aa:	4b34      	ldr	r3, [pc, #208]	@ (800817c <xTaskResumeAll+0x120>)
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3318      	adds	r3, #24
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fb4a 	bl	8006750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3304      	adds	r3, #4
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fe fb45 	bl	8006750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ca:	4b2d      	ldr	r3, [pc, #180]	@ (8008180 <xTaskResumeAll+0x124>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d903      	bls.n	80080da <xTaskResumeAll+0x7e>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008180 <xTaskResumeAll+0x124>)
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080de:	4613      	mov	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4a27      	ldr	r2, [pc, #156]	@ (8008184 <xTaskResumeAll+0x128>)
 80080e8:	441a      	add	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7fe fad0 	bl	8006696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080fa:	4b23      	ldr	r3, [pc, #140]	@ (8008188 <xTaskResumeAll+0x12c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008100:	429a      	cmp	r2, r3
 8008102:	d302      	bcc.n	800810a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008104:	4b21      	ldr	r3, [pc, #132]	@ (800818c <xTaskResumeAll+0x130>)
 8008106:	2201      	movs	r2, #1
 8008108:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800810a:	4b1c      	ldr	r3, [pc, #112]	@ (800817c <xTaskResumeAll+0x120>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1cb      	bne.n	80080aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008118:	f000 fb78 	bl	800880c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800811c:	4b1c      	ldr	r3, [pc, #112]	@ (8008190 <xTaskResumeAll+0x134>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d010      	beq.n	800814a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008128:	f000 f858 	bl	80081dc <xTaskIncrementTick>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008132:	4b16      	ldr	r3, [pc, #88]	@ (800818c <xTaskResumeAll+0x130>)
 8008134:	2201      	movs	r2, #1
 8008136:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3b01      	subs	r3, #1
 800813c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1f1      	bne.n	8008128 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008144:	4b12      	ldr	r3, [pc, #72]	@ (8008190 <xTaskResumeAll+0x134>)
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800814a:	4b10      	ldr	r3, [pc, #64]	@ (800818c <xTaskResumeAll+0x130>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d009      	beq.n	8008166 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008152:	2301      	movs	r3, #1
 8008154:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008156:	4b0f      	ldr	r3, [pc, #60]	@ (8008194 <xTaskResumeAll+0x138>)
 8008158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008166:	f7fe fc81 	bl	8006a6c <vPortExitCritical>

	return xAlreadyYielded;
 800816a:	68bb      	ldr	r3, [r7, #8]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20004abc 	.word	0x20004abc
 8008178:	20004a94 	.word	0x20004a94
 800817c:	20004a54 	.word	0x20004a54
 8008180:	20004a9c 	.word	0x20004a9c
 8008184:	200045c4 	.word	0x200045c4
 8008188:	200045c0 	.word	0x200045c0
 800818c:	20004aa8 	.word	0x20004aa8
 8008190:	20004aa4 	.word	0x20004aa4
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800819e:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <xTaskGetTickCount+0x1c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081a4:	687b      	ldr	r3, [r7, #4]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	20004a98 	.word	0x20004a98

080081b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081be:	f7fe fd03 	bl	8006bc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80081c2:	2300      	movs	r3, #0
 80081c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80081c6:	4b04      	ldr	r3, [pc, #16]	@ (80081d8 <xTaskGetTickCountFromISR+0x20>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081cc:	683b      	ldr	r3, [r7, #0]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20004a98 	.word	0x20004a98

080081dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008324 <xTaskIncrementTick+0x148>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 8090 	bne.w	8008310 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081f0:	4b4d      	ldr	r3, [pc, #308]	@ (8008328 <xTaskIncrementTick+0x14c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3301      	adds	r3, #1
 80081f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081f8:	4a4b      	ldr	r2, [pc, #300]	@ (8008328 <xTaskIncrementTick+0x14c>)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d121      	bne.n	8008248 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008204:	4b49      	ldr	r3, [pc, #292]	@ (800832c <xTaskIncrementTick+0x150>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00b      	beq.n	8008226 <xTaskIncrementTick+0x4a>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	603b      	str	r3, [r7, #0]
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	e7fd      	b.n	8008222 <xTaskIncrementTick+0x46>
 8008226:	4b41      	ldr	r3, [pc, #260]	@ (800832c <xTaskIncrementTick+0x150>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	4b40      	ldr	r3, [pc, #256]	@ (8008330 <xTaskIncrementTick+0x154>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a3e      	ldr	r2, [pc, #248]	@ (800832c <xTaskIncrementTick+0x150>)
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	4a3e      	ldr	r2, [pc, #248]	@ (8008330 <xTaskIncrementTick+0x154>)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	4b3e      	ldr	r3, [pc, #248]	@ (8008334 <xTaskIncrementTick+0x158>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3301      	adds	r3, #1
 8008240:	4a3c      	ldr	r2, [pc, #240]	@ (8008334 <xTaskIncrementTick+0x158>)
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	f000 fae2 	bl	800880c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008248:	4b3b      	ldr	r3, [pc, #236]	@ (8008338 <xTaskIncrementTick+0x15c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	429a      	cmp	r2, r3
 8008250:	d349      	bcc.n	80082e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008252:	4b36      	ldr	r3, [pc, #216]	@ (800832c <xTaskIncrementTick+0x150>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825c:	4b36      	ldr	r3, [pc, #216]	@ (8008338 <xTaskIncrementTick+0x15c>)
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	601a      	str	r2, [r3, #0]
					break;
 8008264:	e03f      	b.n	80082e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008266:	4b31      	ldr	r3, [pc, #196]	@ (800832c <xTaskIncrementTick+0x150>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	429a      	cmp	r2, r3
 800827c:	d203      	bcs.n	8008286 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800827e:	4a2e      	ldr	r2, [pc, #184]	@ (8008338 <xTaskIncrementTick+0x15c>)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008284:	e02f      	b.n	80082e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	3304      	adds	r3, #4
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fa60 	bl	8006750 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	2b00      	cmp	r3, #0
 8008296:	d004      	beq.n	80082a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	3318      	adds	r3, #24
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fa57 	bl	8006750 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a6:	4b25      	ldr	r3, [pc, #148]	@ (800833c <xTaskIncrementTick+0x160>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d903      	bls.n	80082b6 <xTaskIncrementTick+0xda>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b2:	4a22      	ldr	r2, [pc, #136]	@ (800833c <xTaskIncrementTick+0x160>)
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008340 <xTaskIncrementTick+0x164>)
 80082c4:	441a      	add	r2, r3
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	3304      	adds	r3, #4
 80082ca:	4619      	mov	r1, r3
 80082cc:	4610      	mov	r0, r2
 80082ce:	f7fe f9e2 	bl	8006696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008344 <xTaskIncrementTick+0x168>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082dc:	429a      	cmp	r2, r3
 80082de:	d3b8      	bcc.n	8008252 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80082e0:	2301      	movs	r3, #1
 80082e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082e4:	e7b5      	b.n	8008252 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082e6:	4b17      	ldr	r3, [pc, #92]	@ (8008344 <xTaskIncrementTick+0x168>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ec:	4914      	ldr	r1, [pc, #80]	@ (8008340 <xTaskIncrementTick+0x164>)
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d901      	bls.n	8008302 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80082fe:	2301      	movs	r3, #1
 8008300:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008302:	4b11      	ldr	r3, [pc, #68]	@ (8008348 <xTaskIncrementTick+0x16c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d007      	beq.n	800831a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800830a:	2301      	movs	r3, #1
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	e004      	b.n	800831a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008310:	4b0e      	ldr	r3, [pc, #56]	@ (800834c <xTaskIncrementTick+0x170>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	4a0d      	ldr	r2, [pc, #52]	@ (800834c <xTaskIncrementTick+0x170>)
 8008318:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800831a:	697b      	ldr	r3, [r7, #20]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20004abc 	.word	0x20004abc
 8008328:	20004a98 	.word	0x20004a98
 800832c:	20004a4c 	.word	0x20004a4c
 8008330:	20004a50 	.word	0x20004a50
 8008334:	20004aac 	.word	0x20004aac
 8008338:	20004ab4 	.word	0x20004ab4
 800833c:	20004a9c 	.word	0x20004a9c
 8008340:	200045c4 	.word	0x200045c4
 8008344:	200045c0 	.word	0x200045c0
 8008348:	20004aa8 	.word	0x20004aa8
 800834c:	20004aa4 	.word	0x20004aa4

08008350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008356:	4b2b      	ldr	r3, [pc, #172]	@ (8008404 <vTaskSwitchContext+0xb4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800835e:	4b2a      	ldr	r3, [pc, #168]	@ (8008408 <vTaskSwitchContext+0xb8>)
 8008360:	2201      	movs	r2, #1
 8008362:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008364:	e047      	b.n	80083f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008366:	4b28      	ldr	r3, [pc, #160]	@ (8008408 <vTaskSwitchContext+0xb8>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836c:	4b27      	ldr	r3, [pc, #156]	@ (800840c <vTaskSwitchContext+0xbc>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	e011      	b.n	8008398 <vTaskSwitchContext+0x48>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10b      	bne.n	8008392 <vTaskSwitchContext+0x42>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	607b      	str	r3, [r7, #4]
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	e7fd      	b.n	800838e <vTaskSwitchContext+0x3e>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3b01      	subs	r3, #1
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	491d      	ldr	r1, [pc, #116]	@ (8008410 <vTaskSwitchContext+0xc0>)
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4613      	mov	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0e3      	beq.n	8008374 <vTaskSwitchContext+0x24>
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4a16      	ldr	r2, [pc, #88]	@ (8008410 <vTaskSwitchContext+0xc0>)
 80083b8:	4413      	add	r3, r2
 80083ba:	60bb      	str	r3, [r7, #8]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	605a      	str	r2, [r3, #4]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	3308      	adds	r3, #8
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d104      	bne.n	80083dc <vTaskSwitchContext+0x8c>
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	605a      	str	r2, [r3, #4]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008414 <vTaskSwitchContext+0xc4>)
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	4a09      	ldr	r2, [pc, #36]	@ (800840c <vTaskSwitchContext+0xbc>)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083ec:	4b09      	ldr	r3, [pc, #36]	@ (8008414 <vTaskSwitchContext+0xc4>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3354      	adds	r3, #84	@ 0x54
 80083f2:	4a09      	ldr	r2, [pc, #36]	@ (8008418 <vTaskSwitchContext+0xc8>)
 80083f4:	6013      	str	r3, [r2, #0]
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	20004abc 	.word	0x20004abc
 8008408:	20004aa8 	.word	0x20004aa8
 800840c:	20004a9c 	.word	0x20004a9c
 8008410:	200045c4 	.word	0x200045c4
 8008414:	200045c0 	.word	0x200045c0
 8008418:	2000001c 	.word	0x2000001c

0800841c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10b      	bne.n	8008444 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	60fb      	str	r3, [r7, #12]
}
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	e7fd      	b.n	8008440 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008444:	4b07      	ldr	r3, [pc, #28]	@ (8008464 <vTaskPlaceOnEventList+0x48>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3318      	adds	r3, #24
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7fe f946 	bl	80066de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008452:	2101      	movs	r1, #1
 8008454:	6838      	ldr	r0, [r7, #0]
 8008456:	f000 fb97 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	200045c0 	.word	0x200045c0

08008468 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10b      	bne.n	8008492 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	617b      	str	r3, [r7, #20]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008492:	4b0a      	ldr	r3, [pc, #40]	@ (80084bc <vTaskPlaceOnEventListRestricted+0x54>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3318      	adds	r3, #24
 8008498:	4619      	mov	r1, r3
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7fe f8fb 	bl	8006696 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80084a6:	f04f 33ff 	mov.w	r3, #4294967295
 80084aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	68b8      	ldr	r0, [r7, #8]
 80084b0:	f000 fb6a 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
	}
 80084b4:	bf00      	nop
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	200045c0 	.word	0x200045c0

080084c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10b      	bne.n	80084ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	60fb      	str	r3, [r7, #12]
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	e7fd      	b.n	80084ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	3318      	adds	r3, #24
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe f92c 	bl	8006750 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008570 <xTaskRemoveFromEventList+0xb0>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d11d      	bne.n	800853c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	3304      	adds	r3, #4
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe f923 	bl	8006750 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800850e:	4b19      	ldr	r3, [pc, #100]	@ (8008574 <xTaskRemoveFromEventList+0xb4>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d903      	bls.n	800851e <xTaskRemoveFromEventList+0x5e>
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851a:	4a16      	ldr	r2, [pc, #88]	@ (8008574 <xTaskRemoveFromEventList+0xb4>)
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008522:	4613      	mov	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4a13      	ldr	r2, [pc, #76]	@ (8008578 <xTaskRemoveFromEventList+0xb8>)
 800852c:	441a      	add	r2, r3
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	3304      	adds	r3, #4
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f7fe f8ae 	bl	8006696 <vListInsertEnd>
 800853a:	e005      	b.n	8008548 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	3318      	adds	r3, #24
 8008540:	4619      	mov	r1, r3
 8008542:	480e      	ldr	r0, [pc, #56]	@ (800857c <xTaskRemoveFromEventList+0xbc>)
 8008544:	f7fe f8a7 	bl	8006696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800854c:	4b0c      	ldr	r3, [pc, #48]	@ (8008580 <xTaskRemoveFromEventList+0xc0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008552:	429a      	cmp	r2, r3
 8008554:	d905      	bls.n	8008562 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008556:	2301      	movs	r3, #1
 8008558:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800855a:	4b0a      	ldr	r3, [pc, #40]	@ (8008584 <xTaskRemoveFromEventList+0xc4>)
 800855c:	2201      	movs	r2, #1
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	e001      	b.n	8008566 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008562:	2300      	movs	r3, #0
 8008564:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008566:	697b      	ldr	r3, [r7, #20]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20004abc 	.word	0x20004abc
 8008574:	20004a9c 	.word	0x20004a9c
 8008578:	200045c4 	.word	0x200045c4
 800857c:	20004a54 	.word	0x20004a54
 8008580:	200045c0 	.word	0x200045c0
 8008584:	20004aa8 	.word	0x20004aa8

08008588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008590:	4b06      	ldr	r3, [pc, #24]	@ (80085ac <vTaskInternalSetTimeOutState+0x24>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008598:	4b05      	ldr	r3, [pc, #20]	@ (80085b0 <vTaskInternalSetTimeOutState+0x28>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	605a      	str	r2, [r3, #4]
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	20004aac 	.word	0x20004aac
 80085b0:	20004a98 	.word	0x20004a98

080085b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10b      	bne.n	80085dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	613b      	str	r3, [r7, #16]
}
 80085d6:	bf00      	nop
 80085d8:	bf00      	nop
 80085da:	e7fd      	b.n	80085d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10b      	bne.n	80085fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	60fb      	str	r3, [r7, #12]
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80085fa:	f7fe fa05 	bl	8006a08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085fe:	4b1d      	ldr	r3, [pc, #116]	@ (8008674 <xTaskCheckForTimeOut+0xc0>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008616:	d102      	bne.n	800861e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008618:	2300      	movs	r3, #0
 800861a:	61fb      	str	r3, [r7, #28]
 800861c:	e023      	b.n	8008666 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	4b15      	ldr	r3, [pc, #84]	@ (8008678 <xTaskCheckForTimeOut+0xc4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d007      	beq.n	800863a <xTaskCheckForTimeOut+0x86>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	429a      	cmp	r2, r3
 8008632:	d302      	bcc.n	800863a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008634:	2301      	movs	r3, #1
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	e015      	b.n	8008666 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	429a      	cmp	r2, r3
 8008642:	d20b      	bcs.n	800865c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	1ad2      	subs	r2, r2, r3
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7ff ff99 	bl	8008588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008656:	2300      	movs	r3, #0
 8008658:	61fb      	str	r3, [r7, #28]
 800865a:	e004      	b.n	8008666 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008662:	2301      	movs	r3, #1
 8008664:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008666:	f7fe fa01 	bl	8006a6c <vPortExitCritical>

	return xReturn;
 800866a:	69fb      	ldr	r3, [r7, #28]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3720      	adds	r7, #32
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20004a98 	.word	0x20004a98
 8008678:	20004aac 	.word	0x20004aac

0800867c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008680:	4b03      	ldr	r3, [pc, #12]	@ (8008690 <vTaskMissedYield+0x14>)
 8008682:	2201      	movs	r2, #1
 8008684:	601a      	str	r2, [r3, #0]
}
 8008686:	bf00      	nop
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20004aa8 	.word	0x20004aa8

08008694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800869c:	f000 f852 	bl	8008744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086a0:	4b06      	ldr	r3, [pc, #24]	@ (80086bc <prvIdleTask+0x28>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d9f9      	bls.n	800869c <prvIdleTask+0x8>
			{
				taskYIELD();
 80086a8:	4b05      	ldr	r3, [pc, #20]	@ (80086c0 <prvIdleTask+0x2c>)
 80086aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086b8:	e7f0      	b.n	800869c <prvIdleTask+0x8>
 80086ba:	bf00      	nop
 80086bc:	200045c4 	.word	0x200045c4
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086ca:	2300      	movs	r3, #0
 80086cc:	607b      	str	r3, [r7, #4]
 80086ce:	e00c      	b.n	80086ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4a12      	ldr	r2, [pc, #72]	@ (8008724 <prvInitialiseTaskLists+0x60>)
 80086dc:	4413      	add	r3, r2
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fd ffac 	bl	800663c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3301      	adds	r3, #1
 80086e8:	607b      	str	r3, [r7, #4]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b37      	cmp	r3, #55	@ 0x37
 80086ee:	d9ef      	bls.n	80086d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086f0:	480d      	ldr	r0, [pc, #52]	@ (8008728 <prvInitialiseTaskLists+0x64>)
 80086f2:	f7fd ffa3 	bl	800663c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086f6:	480d      	ldr	r0, [pc, #52]	@ (800872c <prvInitialiseTaskLists+0x68>)
 80086f8:	f7fd ffa0 	bl	800663c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086fc:	480c      	ldr	r0, [pc, #48]	@ (8008730 <prvInitialiseTaskLists+0x6c>)
 80086fe:	f7fd ff9d 	bl	800663c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008702:	480c      	ldr	r0, [pc, #48]	@ (8008734 <prvInitialiseTaskLists+0x70>)
 8008704:	f7fd ff9a 	bl	800663c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008708:	480b      	ldr	r0, [pc, #44]	@ (8008738 <prvInitialiseTaskLists+0x74>)
 800870a:	f7fd ff97 	bl	800663c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800870e:	4b0b      	ldr	r3, [pc, #44]	@ (800873c <prvInitialiseTaskLists+0x78>)
 8008710:	4a05      	ldr	r2, [pc, #20]	@ (8008728 <prvInitialiseTaskLists+0x64>)
 8008712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008714:	4b0a      	ldr	r3, [pc, #40]	@ (8008740 <prvInitialiseTaskLists+0x7c>)
 8008716:	4a05      	ldr	r2, [pc, #20]	@ (800872c <prvInitialiseTaskLists+0x68>)
 8008718:	601a      	str	r2, [r3, #0]
}
 800871a:	bf00      	nop
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	200045c4 	.word	0x200045c4
 8008728:	20004a24 	.word	0x20004a24
 800872c:	20004a38 	.word	0x20004a38
 8008730:	20004a54 	.word	0x20004a54
 8008734:	20004a68 	.word	0x20004a68
 8008738:	20004a80 	.word	0x20004a80
 800873c:	20004a4c 	.word	0x20004a4c
 8008740:	20004a50 	.word	0x20004a50

08008744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800874a:	e019      	b.n	8008780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800874c:	f7fe f95c 	bl	8006a08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008750:	4b10      	ldr	r3, [pc, #64]	@ (8008794 <prvCheckTasksWaitingTermination+0x50>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3304      	adds	r3, #4
 800875c:	4618      	mov	r0, r3
 800875e:	f7fd fff7 	bl	8006750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008762:	4b0d      	ldr	r3, [pc, #52]	@ (8008798 <prvCheckTasksWaitingTermination+0x54>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3b01      	subs	r3, #1
 8008768:	4a0b      	ldr	r2, [pc, #44]	@ (8008798 <prvCheckTasksWaitingTermination+0x54>)
 800876a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800876c:	4b0b      	ldr	r3, [pc, #44]	@ (800879c <prvCheckTasksWaitingTermination+0x58>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3b01      	subs	r3, #1
 8008772:	4a0a      	ldr	r2, [pc, #40]	@ (800879c <prvCheckTasksWaitingTermination+0x58>)
 8008774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008776:	f7fe f979 	bl	8006a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f810 	bl	80087a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008780:	4b06      	ldr	r3, [pc, #24]	@ (800879c <prvCheckTasksWaitingTermination+0x58>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e1      	bne.n	800874c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20004a68 	.word	0x20004a68
 8008798:	20004a94 	.word	0x20004a94
 800879c:	20004a7c 	.word	0x20004a7c

080087a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3354      	adds	r3, #84	@ 0x54
 80087ac:	4618      	mov	r0, r3
 80087ae:	f001 f805 	bl	80097bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d108      	bne.n	80087ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fd fe1b 	bl	80063fc <vPortFree>
				vPortFree( pxTCB );
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7fd fe18 	bl	80063fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087cc:	e019      	b.n	8008802 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d103      	bne.n	80087e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7fd fe0f 	bl	80063fc <vPortFree>
	}
 80087de:	e010      	b.n	8008802 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d00b      	beq.n	8008802 <prvDeleteTCB+0x62>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	60fb      	str	r3, [r7, #12]
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	e7fd      	b.n	80087fe <prvDeleteTCB+0x5e>
	}
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008812:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <prvResetNextTaskUnblockTime+0x38>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d104      	bne.n	8008826 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800881c:	4b0a      	ldr	r3, [pc, #40]	@ (8008848 <prvResetNextTaskUnblockTime+0x3c>)
 800881e:	f04f 32ff 	mov.w	r2, #4294967295
 8008822:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008824:	e008      	b.n	8008838 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008826:	4b07      	ldr	r3, [pc, #28]	@ (8008844 <prvResetNextTaskUnblockTime+0x38>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	4a04      	ldr	r2, [pc, #16]	@ (8008848 <prvResetNextTaskUnblockTime+0x3c>)
 8008836:	6013      	str	r3, [r2, #0]
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	20004a4c 	.word	0x20004a4c
 8008848:	20004ab4 	.word	0x20004ab4

0800884c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008852:	4b05      	ldr	r3, [pc, #20]	@ (8008868 <xTaskGetCurrentTaskHandle+0x1c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008858:	687b      	ldr	r3, [r7, #4]
	}
 800885a:	4618      	mov	r0, r3
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	200045c0 	.word	0x200045c0

0800886c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008872:	4b0b      	ldr	r3, [pc, #44]	@ (80088a0 <xTaskGetSchedulerState+0x34>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800887a:	2301      	movs	r3, #1
 800887c:	607b      	str	r3, [r7, #4]
 800887e:	e008      	b.n	8008892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008880:	4b08      	ldr	r3, [pc, #32]	@ (80088a4 <xTaskGetSchedulerState+0x38>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d102      	bne.n	800888e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008888:	2302      	movs	r3, #2
 800888a:	607b      	str	r3, [r7, #4]
 800888c:	e001      	b.n	8008892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800888e:	2300      	movs	r3, #0
 8008890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008892:	687b      	ldr	r3, [r7, #4]
	}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	20004aa0 	.word	0x20004aa0
 80088a4:	20004abc 	.word	0x20004abc

080088a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d051      	beq.n	8008962 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c2:	4b2a      	ldr	r3, [pc, #168]	@ (800896c <xTaskPriorityInherit+0xc4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d241      	bcs.n	8008950 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	db06      	blt.n	80088e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d4:	4b25      	ldr	r3, [pc, #148]	@ (800896c <xTaskPriorityInherit+0xc4>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	6959      	ldr	r1, [r3, #20]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008970 <xTaskPriorityInherit+0xc8>)
 80088f4:	4413      	add	r3, r2
 80088f6:	4299      	cmp	r1, r3
 80088f8:	d122      	bne.n	8008940 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fd ff26 	bl	8006750 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008904:	4b19      	ldr	r3, [pc, #100]	@ (800896c <xTaskPriorityInherit+0xc4>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008912:	4b18      	ldr	r3, [pc, #96]	@ (8008974 <xTaskPriorityInherit+0xcc>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d903      	bls.n	8008922 <xTaskPriorityInherit+0x7a>
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891e:	4a15      	ldr	r2, [pc, #84]	@ (8008974 <xTaskPriorityInherit+0xcc>)
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008926:	4613      	mov	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4a10      	ldr	r2, [pc, #64]	@ (8008970 <xTaskPriorityInherit+0xc8>)
 8008930:	441a      	add	r2, r3
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	3304      	adds	r3, #4
 8008936:	4619      	mov	r1, r3
 8008938:	4610      	mov	r0, r2
 800893a:	f7fd feac 	bl	8006696 <vListInsertEnd>
 800893e:	e004      	b.n	800894a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008940:	4b0a      	ldr	r3, [pc, #40]	@ (800896c <xTaskPriorityInherit+0xc4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800894a:	2301      	movs	r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	e008      	b.n	8008962 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008954:	4b05      	ldr	r3, [pc, #20]	@ (800896c <xTaskPriorityInherit+0xc4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895a:	429a      	cmp	r2, r3
 800895c:	d201      	bcs.n	8008962 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800895e:	2301      	movs	r3, #1
 8008960:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008962:	68fb      	ldr	r3, [r7, #12]
	}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	200045c0 	.word	0x200045c0
 8008970:	200045c4 	.word	0x200045c4
 8008974:	20004a9c 	.word	0x20004a9c

08008978 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008984:	2300      	movs	r3, #0
 8008986:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d058      	beq.n	8008a40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800898e:	4b2f      	ldr	r3, [pc, #188]	@ (8008a4c <xTaskPriorityDisinherit+0xd4>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	429a      	cmp	r2, r3
 8008996:	d00b      	beq.n	80089b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	60fb      	str	r3, [r7, #12]
}
 80089aa:	bf00      	nop
 80089ac:	bf00      	nop
 80089ae:	e7fd      	b.n	80089ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10b      	bne.n	80089d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	60bb      	str	r3, [r7, #8]
}
 80089ca:	bf00      	nop
 80089cc:	bf00      	nop
 80089ce:	e7fd      	b.n	80089cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089d4:	1e5a      	subs	r2, r3, #1
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d02c      	beq.n	8008a40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d128      	bne.n	8008a40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	3304      	adds	r3, #4
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fd feac 	bl	8006750 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a10:	4b0f      	ldr	r3, [pc, #60]	@ (8008a50 <xTaskPriorityDisinherit+0xd8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d903      	bls.n	8008a20 <xTaskPriorityDisinherit+0xa8>
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8008a50 <xTaskPriorityDisinherit+0xd8>)
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a24:	4613      	mov	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4a09      	ldr	r2, [pc, #36]	@ (8008a54 <xTaskPriorityDisinherit+0xdc>)
 8008a2e:	441a      	add	r2, r3
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	3304      	adds	r3, #4
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f7fd fe2d 	bl	8006696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a40:	697b      	ldr	r3, [r7, #20]
	}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	200045c0 	.word	0x200045c0
 8008a50:	20004a9c 	.word	0x20004a9c
 8008a54:	200045c4 	.word	0x200045c4

08008a58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a66:	2301      	movs	r3, #1
 8008a68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d06c      	beq.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10b      	bne.n	8008a90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	60fb      	str	r3, [r7, #12]
}
 8008a8a:	bf00      	nop
 8008a8c:	bf00      	nop
 8008a8e:	e7fd      	b.n	8008a8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d902      	bls.n	8008aa0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	61fb      	str	r3, [r7, #28]
 8008a9e:	e002      	b.n	8008aa6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aa4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d04c      	beq.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d147      	bne.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008aba:	4b26      	ldr	r3, [pc, #152]	@ (8008b54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d10b      	bne.n	8008adc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	60bb      	str	r3, [r7, #8]
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	db04      	blt.n	8008afa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	6959      	ldr	r1, [r3, #20]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4613      	mov	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4a13      	ldr	r2, [pc, #76]	@ (8008b58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b0a:	4413      	add	r3, r2
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	d11c      	bne.n	8008b4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fd fe1b 	bl	8006750 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d903      	bls.n	8008b2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8008b5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4a07      	ldr	r2, [pc, #28]	@ (8008b58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b3c:	441a      	add	r2, r3
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	3304      	adds	r3, #4
 8008b42:	4619      	mov	r1, r3
 8008b44:	4610      	mov	r0, r2
 8008b46:	f7fd fda6 	bl	8006696 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b4a:	bf00      	nop
 8008b4c:	3720      	adds	r7, #32
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	200045c0 	.word	0x200045c0
 8008b58:	200045c4 	.word	0x200045c4
 8008b5c:	20004a9c 	.word	0x20004a9c

08008b60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b64:	4b07      	ldr	r3, [pc, #28]	@ (8008b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b6c:	4b05      	ldr	r3, [pc, #20]	@ (8008b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b72:	3201      	adds	r2, #1
 8008b74:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008b76:	4b03      	ldr	r3, [pc, #12]	@ (8008b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b78:	681b      	ldr	r3, [r3, #0]
	}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	200045c0 	.word	0x200045c0

08008b88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b92:	4b21      	ldr	r3, [pc, #132]	@ (8008c18 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b98:	4b20      	ldr	r3, [pc, #128]	@ (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fd fdd6 	bl	8006750 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008baa:	d10a      	bne.n	8008bc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4819      	ldr	r0, [pc, #100]	@ (8008c20 <prvAddCurrentTaskToDelayedList+0x98>)
 8008bbc:	f7fd fd6b 	bl	8006696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bc0:	e026      	b.n	8008c10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bca:	4b14      	ldr	r3, [pc, #80]	@ (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d209      	bcs.n	8008bee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bda:	4b12      	ldr	r3, [pc, #72]	@ (8008c24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	4b0f      	ldr	r3, [pc, #60]	@ (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3304      	adds	r3, #4
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	f7fd fd79 	bl	80066de <vListInsert>
}
 8008bec:	e010      	b.n	8008c10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bee:	4b0e      	ldr	r3, [pc, #56]	@ (8008c28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8008c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fd fd6f 	bl	80066de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c00:	4b0a      	ldr	r3, [pc, #40]	@ (8008c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d202      	bcs.n	8008c10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c0a:	4a08      	ldr	r2, [pc, #32]	@ (8008c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	6013      	str	r3, [r2, #0]
}
 8008c10:	bf00      	nop
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	20004a98 	.word	0x20004a98
 8008c1c:	200045c0 	.word	0x200045c0
 8008c20:	20004a80 	.word	0x20004a80
 8008c24:	20004a50 	.word	0x20004a50
 8008c28:	20004a4c 	.word	0x20004a4c
 8008c2c:	20004ab4 	.word	0x20004ab4

08008c30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	@ 0x28
 8008c34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c3a:	f000 fb13 	bl	8009264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb4 <xTimerCreateTimerTask+0x84>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d021      	beq.n	8008c8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c4e:	1d3a      	adds	r2, r7, #4
 8008c50:	f107 0108 	add.w	r1, r7, #8
 8008c54:	f107 030c 	add.w	r3, r7, #12
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fd fae7 	bl	800622c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	9202      	str	r2, [sp, #8]
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	2302      	movs	r3, #2
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	460a      	mov	r2, r1
 8008c70:	4911      	ldr	r1, [pc, #68]	@ (8008cb8 <xTimerCreateTimerTask+0x88>)
 8008c72:	4812      	ldr	r0, [pc, #72]	@ (8008cbc <xTimerCreateTimerTask+0x8c>)
 8008c74:	f7fe ff00 	bl	8007a78 <xTaskCreateStatic>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	4a11      	ldr	r2, [pc, #68]	@ (8008cc0 <xTimerCreateTimerTask+0x90>)
 8008c7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c7e:	4b10      	ldr	r3, [pc, #64]	@ (8008cc0 <xTimerCreateTimerTask+0x90>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c86:	2301      	movs	r3, #1
 8008c88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	613b      	str	r3, [r7, #16]
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ca8:	697b      	ldr	r3, [r7, #20]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20004af0 	.word	0x20004af0
 8008cb8:	0800aa70 	.word	0x0800aa70
 8008cbc:	08008dfd 	.word	0x08008dfd
 8008cc0:	20004af4 	.word	0x20004af4

08008cc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08a      	sub	sp, #40	@ 0x28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10b      	bne.n	8008cf4 <xTimerGenericCommand+0x30>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	623b      	str	r3, [r7, #32]
}
 8008cee:	bf00      	nop
 8008cf0:	bf00      	nop
 8008cf2:	e7fd      	b.n	8008cf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cf4:	4b19      	ldr	r3, [pc, #100]	@ (8008d5c <xTimerGenericCommand+0x98>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d02a      	beq.n	8008d52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	dc18      	bgt.n	8008d40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d0e:	f7ff fdad 	bl	800886c <xTaskGetSchedulerState>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d109      	bne.n	8008d2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d18:	4b10      	ldr	r3, [pc, #64]	@ (8008d5c <xTimerGenericCommand+0x98>)
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	f107 0110 	add.w	r1, r7, #16
 8008d20:	2300      	movs	r3, #0
 8008d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d24:	f7fe f990 	bl	8007048 <xQueueGenericSend>
 8008d28:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d2a:	e012      	b.n	8008d52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d5c <xTimerGenericCommand+0x98>)
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	f107 0110 	add.w	r1, r7, #16
 8008d34:	2300      	movs	r3, #0
 8008d36:	2200      	movs	r2, #0
 8008d38:	f7fe f986 	bl	8007048 <xQueueGenericSend>
 8008d3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d3e:	e008      	b.n	8008d52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d40:	4b06      	ldr	r3, [pc, #24]	@ (8008d5c <xTimerGenericCommand+0x98>)
 8008d42:	6818      	ldr	r0, [r3, #0]
 8008d44:	f107 0110 	add.w	r1, r7, #16
 8008d48:	2300      	movs	r3, #0
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	f7fe fa7e 	bl	800724c <xQueueGenericSendFromISR>
 8008d50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3728      	adds	r7, #40	@ 0x28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20004af0 	.word	0x20004af0

08008d60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b088      	sub	sp, #32
 8008d64:	af02      	add	r7, sp, #8
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d6a:	4b23      	ldr	r3, [pc, #140]	@ (8008df8 <prvProcessExpiredTimer+0x98>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fd fce9 	bl	8006750 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d023      	beq.n	8008dd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	699a      	ldr	r2, [r3, #24]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	18d1      	adds	r1, r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	6978      	ldr	r0, [r7, #20]
 8008d9a:	f000 f8d5 	bl	8008f48 <prvInsertTimerInActiveList>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d020      	beq.n	8008de6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008da4:	2300      	movs	r3, #0
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	2300      	movs	r3, #0
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	2100      	movs	r1, #0
 8008dae:	6978      	ldr	r0, [r7, #20]
 8008db0:	f7ff ff88 	bl	8008cc4 <xTimerGenericCommand>
 8008db4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d114      	bne.n	8008de6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	60fb      	str	r3, [r7, #12]
}
 8008dce:	bf00      	nop
 8008dd0:	bf00      	nop
 8008dd2:	e7fd      	b.n	8008dd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dda:	f023 0301 	bic.w	r3, r3, #1
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	6978      	ldr	r0, [r7, #20]
 8008dec:	4798      	blx	r3
}
 8008dee:	bf00      	nop
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20004ae8 	.word	0x20004ae8

08008dfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e04:	f107 0308 	add.w	r3, r7, #8
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 f859 	bl	8008ec0 <prvGetNextExpireTime>
 8008e0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	4619      	mov	r1, r3
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 f805 	bl	8008e24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e1a:	f000 f8d7 	bl	8008fcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e1e:	bf00      	nop
 8008e20:	e7f0      	b.n	8008e04 <prvTimerTask+0x8>
	...

08008e24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e2e:	f7ff f907 	bl	8008040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e32:	f107 0308 	add.w	r3, r7, #8
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 f866 	bl	8008f08 <prvSampleTimeNow>
 8008e3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d130      	bne.n	8008ea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10a      	bne.n	8008e60 <prvProcessTimerOrBlockTask+0x3c>
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d806      	bhi.n	8008e60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e52:	f7ff f903 	bl	800805c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e56:	68f9      	ldr	r1, [r7, #12]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff ff81 	bl	8008d60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e5e:	e024      	b.n	8008eaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d008      	beq.n	8008e78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e66:	4b13      	ldr	r3, [pc, #76]	@ (8008eb4 <prvProcessTimerOrBlockTask+0x90>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <prvProcessTimerOrBlockTask+0x50>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e000      	b.n	8008e76 <prvProcessTimerOrBlockTask+0x52>
 8008e74:	2300      	movs	r3, #0
 8008e76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e78:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb8 <prvProcessTimerOrBlockTask+0x94>)
 8008e7a:	6818      	ldr	r0, [r3, #0]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4619      	mov	r1, r3
 8008e86:	f7fe fdc3 	bl	8007a10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e8a:	f7ff f8e7 	bl	800805c <xTaskResumeAll>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10a      	bne.n	8008eaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e94:	4b09      	ldr	r3, [pc, #36]	@ (8008ebc <prvProcessTimerOrBlockTask+0x98>)
 8008e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	f3bf 8f6f 	isb	sy
}
 8008ea4:	e001      	b.n	8008eaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ea6:	f7ff f8d9 	bl	800805c <xTaskResumeAll>
}
 8008eaa:	bf00      	nop
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20004aec 	.word	0x20004aec
 8008eb8:	20004af0 	.word	0x20004af0
 8008ebc:	e000ed04 	.word	0xe000ed04

08008ec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f04 <prvGetNextExpireTime+0x44>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <prvGetNextExpireTime+0x16>
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	e000      	b.n	8008ed8 <prvGetNextExpireTime+0x18>
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d105      	bne.n	8008ef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ee4:	4b07      	ldr	r3, [pc, #28]	@ (8008f04 <prvGetNextExpireTime+0x44>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e001      	b.n	8008ef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	20004ae8 	.word	0x20004ae8

08008f08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f10:	f7ff f942 	bl	8008198 <xTaskGetTickCount>
 8008f14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f16:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <prvSampleTimeNow+0x3c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d205      	bcs.n	8008f2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f20:	f000 f93a 	bl	8009198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	e002      	b.n	8008f32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f32:	4a04      	ldr	r2, [pc, #16]	@ (8008f44 <prvSampleTimeNow+0x3c>)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f38:	68fb      	ldr	r3, [r7, #12]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20004af8 	.word	0x20004af8

08008f48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d812      	bhi.n	8008f94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	1ad2      	subs	r2, r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d302      	bcc.n	8008f82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	e01b      	b.n	8008fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f82:	4b10      	ldr	r3, [pc, #64]	@ (8008fc4 <prvInsertTimerInActiveList+0x7c>)
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	f7fd fba6 	bl	80066de <vListInsert>
 8008f92:	e012      	b.n	8008fba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d206      	bcs.n	8008faa <prvInsertTimerInActiveList+0x62>
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d302      	bcc.n	8008faa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	e007      	b.n	8008fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008faa:	4b07      	ldr	r3, [pc, #28]	@ (8008fc8 <prvInsertTimerInActiveList+0x80>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	f7fd fb92 	bl	80066de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fba:	697b      	ldr	r3, [r7, #20]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	20004aec 	.word	0x20004aec
 8008fc8:	20004ae8 	.word	0x20004ae8

08008fcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08e      	sub	sp, #56	@ 0x38
 8008fd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fd2:	e0ce      	b.n	8009172 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da19      	bge.n	800900e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fda:	1d3b      	adds	r3, r7, #4
 8008fdc:	3304      	adds	r3, #4
 8008fde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10b      	bne.n	8008ffe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	61fb      	str	r3, [r7, #28]
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	e7fd      	b.n	8008ffa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009004:	6850      	ldr	r0, [r2, #4]
 8009006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009008:	6892      	ldr	r2, [r2, #8]
 800900a:	4611      	mov	r1, r2
 800900c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f2c0 80ae 	blt.w	8009172 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800901a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d004      	beq.n	800902c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009024:	3304      	adds	r3, #4
 8009026:	4618      	mov	r0, r3
 8009028:	f7fd fb92 	bl	8006750 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800902c:	463b      	mov	r3, r7
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff ff6a 	bl	8008f08 <prvSampleTimeNow>
 8009034:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b09      	cmp	r3, #9
 800903a:	f200 8097 	bhi.w	800916c <prvProcessReceivedCommands+0x1a0>
 800903e:	a201      	add	r2, pc, #4	@ (adr r2, 8009044 <prvProcessReceivedCommands+0x78>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	0800906d 	.word	0x0800906d
 8009048:	0800906d 	.word	0x0800906d
 800904c:	0800906d 	.word	0x0800906d
 8009050:	080090e3 	.word	0x080090e3
 8009054:	080090f7 	.word	0x080090f7
 8009058:	08009143 	.word	0x08009143
 800905c:	0800906d 	.word	0x0800906d
 8009060:	0800906d 	.word	0x0800906d
 8009064:	080090e3 	.word	0x080090e3
 8009068:	080090f7 	.word	0x080090f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800906c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009072:	f043 0301 	orr.w	r3, r3, #1
 8009076:	b2da      	uxtb	r2, r3
 8009078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	18d1      	adds	r1, r2, r3
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800908a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800908c:	f7ff ff5c 	bl	8008f48 <prvInsertTimerInActiveList>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d06c      	beq.n	8009170 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800909c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800909e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d061      	beq.n	8009170 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	441a      	add	r2, r3
 80090b4:	2300      	movs	r3, #0
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	2300      	movs	r3, #0
 80090ba:	2100      	movs	r1, #0
 80090bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090be:	f7ff fe01 	bl	8008cc4 <xTimerGenericCommand>
 80090c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d152      	bne.n	8009170 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	61bb      	str	r3, [r7, #24]
}
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
 80090e0:	e7fd      	b.n	80090de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090e8:	f023 0301 	bic.w	r3, r3, #1
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80090f4:	e03d      	b.n	8009172 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090fc:	f043 0301 	orr.w	r3, r3, #1
 8009100:	b2da      	uxtb	r2, r3
 8009102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009104:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800910e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10b      	bne.n	800912e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	617b      	str	r3, [r7, #20]
}
 8009128:	bf00      	nop
 800912a:	bf00      	nop
 800912c:	e7fd      	b.n	800912a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800912e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009134:	18d1      	adds	r1, r2, r3
 8009136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800913a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800913c:	f7ff ff04 	bl	8008f48 <prvInsertTimerInActiveList>
					break;
 8009140:	e017      	b.n	8009172 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d103      	bne.n	8009158 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009152:	f7fd f953 	bl	80063fc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009156:	e00c      	b.n	8009172 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800915e:	f023 0301 	bic.w	r3, r3, #1
 8009162:	b2da      	uxtb	r2, r3
 8009164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800916a:	e002      	b.n	8009172 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800916c:	bf00      	nop
 800916e:	e000      	b.n	8009172 <prvProcessReceivedCommands+0x1a6>
					break;
 8009170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009172:	4b08      	ldr	r3, [pc, #32]	@ (8009194 <prvProcessReceivedCommands+0x1c8>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	1d39      	adds	r1, r7, #4
 8009178:	2200      	movs	r2, #0
 800917a:	4618      	mov	r0, r3
 800917c:	f7fe f904 	bl	8007388 <xQueueReceive>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	f47f af26 	bne.w	8008fd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	3730      	adds	r7, #48	@ 0x30
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20004af0 	.word	0x20004af0

08009198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800919e:	e049      	b.n	8009234 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091a0:	4b2e      	ldr	r3, [pc, #184]	@ (800925c <prvSwitchTimerLists+0xc4>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091aa:	4b2c      	ldr	r3, [pc, #176]	@ (800925c <prvSwitchTimerLists+0xc4>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	3304      	adds	r3, #4
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fd fac9 	bl	8006750 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d02f      	beq.n	8009234 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	4413      	add	r3, r2
 80091dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d90e      	bls.n	8009204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091f2:	4b1a      	ldr	r3, [pc, #104]	@ (800925c <prvSwitchTimerLists+0xc4>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4619      	mov	r1, r3
 80091fc:	4610      	mov	r0, r2
 80091fe:	f7fd fa6e 	bl	80066de <vListInsert>
 8009202:	e017      	b.n	8009234 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009204:	2300      	movs	r3, #0
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	2300      	movs	r3, #0
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	2100      	movs	r1, #0
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f7ff fd58 	bl	8008cc4 <xTimerGenericCommand>
 8009214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10b      	bne.n	8009234 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	603b      	str	r3, [r7, #0]
}
 800922e:	bf00      	nop
 8009230:	bf00      	nop
 8009232:	e7fd      	b.n	8009230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009234:	4b09      	ldr	r3, [pc, #36]	@ (800925c <prvSwitchTimerLists+0xc4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1b0      	bne.n	80091a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800923e:	4b07      	ldr	r3, [pc, #28]	@ (800925c <prvSwitchTimerLists+0xc4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009244:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <prvSwitchTimerLists+0xc8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a04      	ldr	r2, [pc, #16]	@ (800925c <prvSwitchTimerLists+0xc4>)
 800924a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800924c:	4a04      	ldr	r2, [pc, #16]	@ (8009260 <prvSwitchTimerLists+0xc8>)
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	6013      	str	r3, [r2, #0]
}
 8009252:	bf00      	nop
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20004ae8 	.word	0x20004ae8
 8009260:	20004aec 	.word	0x20004aec

08009264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800926a:	f7fd fbcd 	bl	8006a08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800926e:	4b15      	ldr	r3, [pc, #84]	@ (80092c4 <prvCheckForValidListAndQueue+0x60>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d120      	bne.n	80092b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009276:	4814      	ldr	r0, [pc, #80]	@ (80092c8 <prvCheckForValidListAndQueue+0x64>)
 8009278:	f7fd f9e0 	bl	800663c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800927c:	4813      	ldr	r0, [pc, #76]	@ (80092cc <prvCheckForValidListAndQueue+0x68>)
 800927e:	f7fd f9dd 	bl	800663c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009282:	4b13      	ldr	r3, [pc, #76]	@ (80092d0 <prvCheckForValidListAndQueue+0x6c>)
 8009284:	4a10      	ldr	r2, [pc, #64]	@ (80092c8 <prvCheckForValidListAndQueue+0x64>)
 8009286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009288:	4b12      	ldr	r3, [pc, #72]	@ (80092d4 <prvCheckForValidListAndQueue+0x70>)
 800928a:	4a10      	ldr	r2, [pc, #64]	@ (80092cc <prvCheckForValidListAndQueue+0x68>)
 800928c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800928e:	2300      	movs	r3, #0
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	4b11      	ldr	r3, [pc, #68]	@ (80092d8 <prvCheckForValidListAndQueue+0x74>)
 8009294:	4a11      	ldr	r2, [pc, #68]	@ (80092dc <prvCheckForValidListAndQueue+0x78>)
 8009296:	2110      	movs	r1, #16
 8009298:	200a      	movs	r0, #10
 800929a:	f7fd fd41 	bl	8006d20 <xQueueGenericCreateStatic>
 800929e:	4603      	mov	r3, r0
 80092a0:	4a08      	ldr	r2, [pc, #32]	@ (80092c4 <prvCheckForValidListAndQueue+0x60>)
 80092a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80092a4:	4b07      	ldr	r3, [pc, #28]	@ (80092c4 <prvCheckForValidListAndQueue+0x60>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d005      	beq.n	80092b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092ac:	4b05      	ldr	r3, [pc, #20]	@ (80092c4 <prvCheckForValidListAndQueue+0x60>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	490b      	ldr	r1, [pc, #44]	@ (80092e0 <prvCheckForValidListAndQueue+0x7c>)
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe fb82 	bl	80079bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092b8:	f7fd fbd8 	bl	8006a6c <vPortExitCritical>
}
 80092bc:	bf00      	nop
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20004af0 	.word	0x20004af0
 80092c8:	20004ac0 	.word	0x20004ac0
 80092cc:	20004ad4 	.word	0x20004ad4
 80092d0:	20004ae8 	.word	0x20004ae8
 80092d4:	20004aec 	.word	0x20004aec
 80092d8:	20004b9c 	.word	0x20004b9c
 80092dc:	20004afc 	.word	0x20004afc
 80092e0:	0800aa78 	.word	0x0800aa78

080092e4 <atoi>:
 80092e4:	220a      	movs	r2, #10
 80092e6:	2100      	movs	r1, #0
 80092e8:	f000 b87a 	b.w	80093e0 <strtol>

080092ec <_strtol_l.isra.0>:
 80092ec:	2b24      	cmp	r3, #36	@ 0x24
 80092ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f2:	4686      	mov	lr, r0
 80092f4:	4690      	mov	r8, r2
 80092f6:	d801      	bhi.n	80092fc <_strtol_l.isra.0+0x10>
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d106      	bne.n	800930a <_strtol_l.isra.0+0x1e>
 80092fc:	f000 faf2 	bl	80098e4 <__errno>
 8009300:	2316      	movs	r3, #22
 8009302:	6003      	str	r3, [r0, #0]
 8009304:	2000      	movs	r0, #0
 8009306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800930a:	4834      	ldr	r0, [pc, #208]	@ (80093dc <_strtol_l.isra.0+0xf0>)
 800930c:	460d      	mov	r5, r1
 800930e:	462a      	mov	r2, r5
 8009310:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009314:	5d06      	ldrb	r6, [r0, r4]
 8009316:	f016 0608 	ands.w	r6, r6, #8
 800931a:	d1f8      	bne.n	800930e <_strtol_l.isra.0+0x22>
 800931c:	2c2d      	cmp	r4, #45	@ 0x2d
 800931e:	d110      	bne.n	8009342 <_strtol_l.isra.0+0x56>
 8009320:	782c      	ldrb	r4, [r5, #0]
 8009322:	2601      	movs	r6, #1
 8009324:	1c95      	adds	r5, r2, #2
 8009326:	f033 0210 	bics.w	r2, r3, #16
 800932a:	d115      	bne.n	8009358 <_strtol_l.isra.0+0x6c>
 800932c:	2c30      	cmp	r4, #48	@ 0x30
 800932e:	d10d      	bne.n	800934c <_strtol_l.isra.0+0x60>
 8009330:	782a      	ldrb	r2, [r5, #0]
 8009332:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009336:	2a58      	cmp	r2, #88	@ 0x58
 8009338:	d108      	bne.n	800934c <_strtol_l.isra.0+0x60>
 800933a:	786c      	ldrb	r4, [r5, #1]
 800933c:	3502      	adds	r5, #2
 800933e:	2310      	movs	r3, #16
 8009340:	e00a      	b.n	8009358 <_strtol_l.isra.0+0x6c>
 8009342:	2c2b      	cmp	r4, #43	@ 0x2b
 8009344:	bf04      	itt	eq
 8009346:	782c      	ldrbeq	r4, [r5, #0]
 8009348:	1c95      	addeq	r5, r2, #2
 800934a:	e7ec      	b.n	8009326 <_strtol_l.isra.0+0x3a>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1f6      	bne.n	800933e <_strtol_l.isra.0+0x52>
 8009350:	2c30      	cmp	r4, #48	@ 0x30
 8009352:	bf14      	ite	ne
 8009354:	230a      	movne	r3, #10
 8009356:	2308      	moveq	r3, #8
 8009358:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800935c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009360:	2200      	movs	r2, #0
 8009362:	fbbc f9f3 	udiv	r9, ip, r3
 8009366:	4610      	mov	r0, r2
 8009368:	fb03 ca19 	mls	sl, r3, r9, ip
 800936c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009370:	2f09      	cmp	r7, #9
 8009372:	d80f      	bhi.n	8009394 <_strtol_l.isra.0+0xa8>
 8009374:	463c      	mov	r4, r7
 8009376:	42a3      	cmp	r3, r4
 8009378:	dd1b      	ble.n	80093b2 <_strtol_l.isra.0+0xc6>
 800937a:	1c57      	adds	r7, r2, #1
 800937c:	d007      	beq.n	800938e <_strtol_l.isra.0+0xa2>
 800937e:	4581      	cmp	r9, r0
 8009380:	d314      	bcc.n	80093ac <_strtol_l.isra.0+0xc0>
 8009382:	d101      	bne.n	8009388 <_strtol_l.isra.0+0x9c>
 8009384:	45a2      	cmp	sl, r4
 8009386:	db11      	blt.n	80093ac <_strtol_l.isra.0+0xc0>
 8009388:	fb00 4003 	mla	r0, r0, r3, r4
 800938c:	2201      	movs	r2, #1
 800938e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009392:	e7eb      	b.n	800936c <_strtol_l.isra.0+0x80>
 8009394:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009398:	2f19      	cmp	r7, #25
 800939a:	d801      	bhi.n	80093a0 <_strtol_l.isra.0+0xb4>
 800939c:	3c37      	subs	r4, #55	@ 0x37
 800939e:	e7ea      	b.n	8009376 <_strtol_l.isra.0+0x8a>
 80093a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80093a4:	2f19      	cmp	r7, #25
 80093a6:	d804      	bhi.n	80093b2 <_strtol_l.isra.0+0xc6>
 80093a8:	3c57      	subs	r4, #87	@ 0x57
 80093aa:	e7e4      	b.n	8009376 <_strtol_l.isra.0+0x8a>
 80093ac:	f04f 32ff 	mov.w	r2, #4294967295
 80093b0:	e7ed      	b.n	800938e <_strtol_l.isra.0+0xa2>
 80093b2:	1c53      	adds	r3, r2, #1
 80093b4:	d108      	bne.n	80093c8 <_strtol_l.isra.0+0xdc>
 80093b6:	2322      	movs	r3, #34	@ 0x22
 80093b8:	f8ce 3000 	str.w	r3, [lr]
 80093bc:	4660      	mov	r0, ip
 80093be:	f1b8 0f00 	cmp.w	r8, #0
 80093c2:	d0a0      	beq.n	8009306 <_strtol_l.isra.0+0x1a>
 80093c4:	1e69      	subs	r1, r5, #1
 80093c6:	e006      	b.n	80093d6 <_strtol_l.isra.0+0xea>
 80093c8:	b106      	cbz	r6, 80093cc <_strtol_l.isra.0+0xe0>
 80093ca:	4240      	negs	r0, r0
 80093cc:	f1b8 0f00 	cmp.w	r8, #0
 80093d0:	d099      	beq.n	8009306 <_strtol_l.isra.0+0x1a>
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	d1f6      	bne.n	80093c4 <_strtol_l.isra.0+0xd8>
 80093d6:	f8c8 1000 	str.w	r1, [r8]
 80093da:	e794      	b.n	8009306 <_strtol_l.isra.0+0x1a>
 80093dc:	0800ab5d 	.word	0x0800ab5d

080093e0 <strtol>:
 80093e0:	4613      	mov	r3, r2
 80093e2:	460a      	mov	r2, r1
 80093e4:	4601      	mov	r1, r0
 80093e6:	4802      	ldr	r0, [pc, #8]	@ (80093f0 <strtol+0x10>)
 80093e8:	6800      	ldr	r0, [r0, #0]
 80093ea:	f7ff bf7f 	b.w	80092ec <_strtol_l.isra.0>
 80093ee:	bf00      	nop
 80093f0:	2000001c 	.word	0x2000001c

080093f4 <std>:
 80093f4:	2300      	movs	r3, #0
 80093f6:	b510      	push	{r4, lr}
 80093f8:	4604      	mov	r4, r0
 80093fa:	e9c0 3300 	strd	r3, r3, [r0]
 80093fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009402:	6083      	str	r3, [r0, #8]
 8009404:	8181      	strh	r1, [r0, #12]
 8009406:	6643      	str	r3, [r0, #100]	@ 0x64
 8009408:	81c2      	strh	r2, [r0, #14]
 800940a:	6183      	str	r3, [r0, #24]
 800940c:	4619      	mov	r1, r3
 800940e:	2208      	movs	r2, #8
 8009410:	305c      	adds	r0, #92	@ 0x5c
 8009412:	f000 f94c 	bl	80096ae <memset>
 8009416:	4b0d      	ldr	r3, [pc, #52]	@ (800944c <std+0x58>)
 8009418:	6263      	str	r3, [r4, #36]	@ 0x24
 800941a:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <std+0x5c>)
 800941c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800941e:	4b0d      	ldr	r3, [pc, #52]	@ (8009454 <std+0x60>)
 8009420:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009422:	4b0d      	ldr	r3, [pc, #52]	@ (8009458 <std+0x64>)
 8009424:	6323      	str	r3, [r4, #48]	@ 0x30
 8009426:	4b0d      	ldr	r3, [pc, #52]	@ (800945c <std+0x68>)
 8009428:	6224      	str	r4, [r4, #32]
 800942a:	429c      	cmp	r4, r3
 800942c:	d006      	beq.n	800943c <std+0x48>
 800942e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009432:	4294      	cmp	r4, r2
 8009434:	d002      	beq.n	800943c <std+0x48>
 8009436:	33d0      	adds	r3, #208	@ 0xd0
 8009438:	429c      	cmp	r4, r3
 800943a:	d105      	bne.n	8009448 <std+0x54>
 800943c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009444:	f000 ba78 	b.w	8009938 <__retarget_lock_init_recursive>
 8009448:	bd10      	pop	{r4, pc}
 800944a:	bf00      	nop
 800944c:	08009629 	.word	0x08009629
 8009450:	0800964b 	.word	0x0800964b
 8009454:	08009683 	.word	0x08009683
 8009458:	080096a7 	.word	0x080096a7
 800945c:	20004bec 	.word	0x20004bec

08009460 <stdio_exit_handler>:
 8009460:	4a02      	ldr	r2, [pc, #8]	@ (800946c <stdio_exit_handler+0xc>)
 8009462:	4903      	ldr	r1, [pc, #12]	@ (8009470 <stdio_exit_handler+0x10>)
 8009464:	4803      	ldr	r0, [pc, #12]	@ (8009474 <stdio_exit_handler+0x14>)
 8009466:	f000 b869 	b.w	800953c <_fwalk_sglue>
 800946a:	bf00      	nop
 800946c:	20000010 	.word	0x20000010
 8009470:	0800a269 	.word	0x0800a269
 8009474:	20000020 	.word	0x20000020

08009478 <cleanup_stdio>:
 8009478:	6841      	ldr	r1, [r0, #4]
 800947a:	4b0c      	ldr	r3, [pc, #48]	@ (80094ac <cleanup_stdio+0x34>)
 800947c:	4299      	cmp	r1, r3
 800947e:	b510      	push	{r4, lr}
 8009480:	4604      	mov	r4, r0
 8009482:	d001      	beq.n	8009488 <cleanup_stdio+0x10>
 8009484:	f000 fef0 	bl	800a268 <_fflush_r>
 8009488:	68a1      	ldr	r1, [r4, #8]
 800948a:	4b09      	ldr	r3, [pc, #36]	@ (80094b0 <cleanup_stdio+0x38>)
 800948c:	4299      	cmp	r1, r3
 800948e:	d002      	beq.n	8009496 <cleanup_stdio+0x1e>
 8009490:	4620      	mov	r0, r4
 8009492:	f000 fee9 	bl	800a268 <_fflush_r>
 8009496:	68e1      	ldr	r1, [r4, #12]
 8009498:	4b06      	ldr	r3, [pc, #24]	@ (80094b4 <cleanup_stdio+0x3c>)
 800949a:	4299      	cmp	r1, r3
 800949c:	d004      	beq.n	80094a8 <cleanup_stdio+0x30>
 800949e:	4620      	mov	r0, r4
 80094a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a4:	f000 bee0 	b.w	800a268 <_fflush_r>
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	bf00      	nop
 80094ac:	20004bec 	.word	0x20004bec
 80094b0:	20004c54 	.word	0x20004c54
 80094b4:	20004cbc 	.word	0x20004cbc

080094b8 <global_stdio_init.part.0>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	4b0b      	ldr	r3, [pc, #44]	@ (80094e8 <global_stdio_init.part.0+0x30>)
 80094bc:	4c0b      	ldr	r4, [pc, #44]	@ (80094ec <global_stdio_init.part.0+0x34>)
 80094be:	4a0c      	ldr	r2, [pc, #48]	@ (80094f0 <global_stdio_init.part.0+0x38>)
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	4620      	mov	r0, r4
 80094c4:	2200      	movs	r2, #0
 80094c6:	2104      	movs	r1, #4
 80094c8:	f7ff ff94 	bl	80093f4 <std>
 80094cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80094d0:	2201      	movs	r2, #1
 80094d2:	2109      	movs	r1, #9
 80094d4:	f7ff ff8e 	bl	80093f4 <std>
 80094d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094dc:	2202      	movs	r2, #2
 80094de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e2:	2112      	movs	r1, #18
 80094e4:	f7ff bf86 	b.w	80093f4 <std>
 80094e8:	20004d24 	.word	0x20004d24
 80094ec:	20004bec 	.word	0x20004bec
 80094f0:	08009461 	.word	0x08009461

080094f4 <__sfp_lock_acquire>:
 80094f4:	4801      	ldr	r0, [pc, #4]	@ (80094fc <__sfp_lock_acquire+0x8>)
 80094f6:	f000 ba20 	b.w	800993a <__retarget_lock_acquire_recursive>
 80094fa:	bf00      	nop
 80094fc:	20004d2d 	.word	0x20004d2d

08009500 <__sfp_lock_release>:
 8009500:	4801      	ldr	r0, [pc, #4]	@ (8009508 <__sfp_lock_release+0x8>)
 8009502:	f000 ba1b 	b.w	800993c <__retarget_lock_release_recursive>
 8009506:	bf00      	nop
 8009508:	20004d2d 	.word	0x20004d2d

0800950c <__sinit>:
 800950c:	b510      	push	{r4, lr}
 800950e:	4604      	mov	r4, r0
 8009510:	f7ff fff0 	bl	80094f4 <__sfp_lock_acquire>
 8009514:	6a23      	ldr	r3, [r4, #32]
 8009516:	b11b      	cbz	r3, 8009520 <__sinit+0x14>
 8009518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800951c:	f7ff bff0 	b.w	8009500 <__sfp_lock_release>
 8009520:	4b04      	ldr	r3, [pc, #16]	@ (8009534 <__sinit+0x28>)
 8009522:	6223      	str	r3, [r4, #32]
 8009524:	4b04      	ldr	r3, [pc, #16]	@ (8009538 <__sinit+0x2c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1f5      	bne.n	8009518 <__sinit+0xc>
 800952c:	f7ff ffc4 	bl	80094b8 <global_stdio_init.part.0>
 8009530:	e7f2      	b.n	8009518 <__sinit+0xc>
 8009532:	bf00      	nop
 8009534:	08009479 	.word	0x08009479
 8009538:	20004d24 	.word	0x20004d24

0800953c <_fwalk_sglue>:
 800953c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009540:	4607      	mov	r7, r0
 8009542:	4688      	mov	r8, r1
 8009544:	4614      	mov	r4, r2
 8009546:	2600      	movs	r6, #0
 8009548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800954c:	f1b9 0901 	subs.w	r9, r9, #1
 8009550:	d505      	bpl.n	800955e <_fwalk_sglue+0x22>
 8009552:	6824      	ldr	r4, [r4, #0]
 8009554:	2c00      	cmp	r4, #0
 8009556:	d1f7      	bne.n	8009548 <_fwalk_sglue+0xc>
 8009558:	4630      	mov	r0, r6
 800955a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d907      	bls.n	8009574 <_fwalk_sglue+0x38>
 8009564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009568:	3301      	adds	r3, #1
 800956a:	d003      	beq.n	8009574 <_fwalk_sglue+0x38>
 800956c:	4629      	mov	r1, r5
 800956e:	4638      	mov	r0, r7
 8009570:	47c0      	blx	r8
 8009572:	4306      	orrs	r6, r0
 8009574:	3568      	adds	r5, #104	@ 0x68
 8009576:	e7e9      	b.n	800954c <_fwalk_sglue+0x10>

08009578 <sniprintf>:
 8009578:	b40c      	push	{r2, r3}
 800957a:	b530      	push	{r4, r5, lr}
 800957c:	4b18      	ldr	r3, [pc, #96]	@ (80095e0 <sniprintf+0x68>)
 800957e:	1e0c      	subs	r4, r1, #0
 8009580:	681d      	ldr	r5, [r3, #0]
 8009582:	b09d      	sub	sp, #116	@ 0x74
 8009584:	da08      	bge.n	8009598 <sniprintf+0x20>
 8009586:	238b      	movs	r3, #139	@ 0x8b
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	f04f 30ff 	mov.w	r0, #4294967295
 800958e:	b01d      	add	sp, #116	@ 0x74
 8009590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009594:	b002      	add	sp, #8
 8009596:	4770      	bx	lr
 8009598:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800959c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80095a0:	f04f 0300 	mov.w	r3, #0
 80095a4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80095a6:	bf14      	ite	ne
 80095a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80095ac:	4623      	moveq	r3, r4
 80095ae:	9304      	str	r3, [sp, #16]
 80095b0:	9307      	str	r3, [sp, #28]
 80095b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80095b6:	9002      	str	r0, [sp, #8]
 80095b8:	9006      	str	r0, [sp, #24]
 80095ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80095be:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80095c0:	ab21      	add	r3, sp, #132	@ 0x84
 80095c2:	a902      	add	r1, sp, #8
 80095c4:	4628      	mov	r0, r5
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	f000 fb42 	bl	8009c50 <_svfiprintf_r>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	bfbc      	itt	lt
 80095d0:	238b      	movlt	r3, #139	@ 0x8b
 80095d2:	602b      	strlt	r3, [r5, #0]
 80095d4:	2c00      	cmp	r4, #0
 80095d6:	d0da      	beq.n	800958e <sniprintf+0x16>
 80095d8:	9b02      	ldr	r3, [sp, #8]
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	e7d6      	b.n	800958e <sniprintf+0x16>
 80095e0:	2000001c 	.word	0x2000001c

080095e4 <siprintf>:
 80095e4:	b40e      	push	{r1, r2, r3}
 80095e6:	b510      	push	{r4, lr}
 80095e8:	b09d      	sub	sp, #116	@ 0x74
 80095ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80095ec:	9002      	str	r0, [sp, #8]
 80095ee:	9006      	str	r0, [sp, #24]
 80095f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80095f4:	480a      	ldr	r0, [pc, #40]	@ (8009620 <siprintf+0x3c>)
 80095f6:	9107      	str	r1, [sp, #28]
 80095f8:	9104      	str	r1, [sp, #16]
 80095fa:	490a      	ldr	r1, [pc, #40]	@ (8009624 <siprintf+0x40>)
 80095fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009600:	9105      	str	r1, [sp, #20]
 8009602:	2400      	movs	r4, #0
 8009604:	a902      	add	r1, sp, #8
 8009606:	6800      	ldr	r0, [r0, #0]
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800960c:	f000 fb20 	bl	8009c50 <_svfiprintf_r>
 8009610:	9b02      	ldr	r3, [sp, #8]
 8009612:	701c      	strb	r4, [r3, #0]
 8009614:	b01d      	add	sp, #116	@ 0x74
 8009616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800961a:	b003      	add	sp, #12
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	2000001c 	.word	0x2000001c
 8009624:	ffff0208 	.word	0xffff0208

08009628 <__sread>:
 8009628:	b510      	push	{r4, lr}
 800962a:	460c      	mov	r4, r1
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	f000 f934 	bl	800989c <_read_r>
 8009634:	2800      	cmp	r0, #0
 8009636:	bfab      	itete	ge
 8009638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800963a:	89a3      	ldrhlt	r3, [r4, #12]
 800963c:	181b      	addge	r3, r3, r0
 800963e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009642:	bfac      	ite	ge
 8009644:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009646:	81a3      	strhlt	r3, [r4, #12]
 8009648:	bd10      	pop	{r4, pc}

0800964a <__swrite>:
 800964a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	461f      	mov	r7, r3
 8009650:	898b      	ldrh	r3, [r1, #12]
 8009652:	05db      	lsls	r3, r3, #23
 8009654:	4605      	mov	r5, r0
 8009656:	460c      	mov	r4, r1
 8009658:	4616      	mov	r6, r2
 800965a:	d505      	bpl.n	8009668 <__swrite+0x1e>
 800965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009660:	2302      	movs	r3, #2
 8009662:	2200      	movs	r2, #0
 8009664:	f000 f908 	bl	8009878 <_lseek_r>
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800966e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	4632      	mov	r2, r6
 8009676:	463b      	mov	r3, r7
 8009678:	4628      	mov	r0, r5
 800967a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	f000 b91f 	b.w	80098c0 <_write_r>

08009682 <__sseek>:
 8009682:	b510      	push	{r4, lr}
 8009684:	460c      	mov	r4, r1
 8009686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968a:	f000 f8f5 	bl	8009878 <_lseek_r>
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	bf15      	itete	ne
 8009694:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800969a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800969e:	81a3      	strheq	r3, [r4, #12]
 80096a0:	bf18      	it	ne
 80096a2:	81a3      	strhne	r3, [r4, #12]
 80096a4:	bd10      	pop	{r4, pc}

080096a6 <__sclose>:
 80096a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096aa:	f000 b877 	b.w	800979c <_close_r>

080096ae <memset>:
 80096ae:	4402      	add	r2, r0
 80096b0:	4603      	mov	r3, r0
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d100      	bne.n	80096b8 <memset+0xa>
 80096b6:	4770      	bx	lr
 80096b8:	f803 1b01 	strb.w	r1, [r3], #1
 80096bc:	e7f9      	b.n	80096b2 <memset+0x4>

080096be <strncmp>:
 80096be:	b510      	push	{r4, lr}
 80096c0:	b16a      	cbz	r2, 80096de <strncmp+0x20>
 80096c2:	3901      	subs	r1, #1
 80096c4:	1884      	adds	r4, r0, r2
 80096c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d103      	bne.n	80096da <strncmp+0x1c>
 80096d2:	42a0      	cmp	r0, r4
 80096d4:	d001      	beq.n	80096da <strncmp+0x1c>
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	d1f5      	bne.n	80096c6 <strncmp+0x8>
 80096da:	1ad0      	subs	r0, r2, r3
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	4610      	mov	r0, r2
 80096e0:	e7fc      	b.n	80096dc <strncmp+0x1e>
	...

080096e4 <strtok>:
 80096e4:	4b16      	ldr	r3, [pc, #88]	@ (8009740 <strtok+0x5c>)
 80096e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ea:	681f      	ldr	r7, [r3, #0]
 80096ec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80096ee:	4605      	mov	r5, r0
 80096f0:	460e      	mov	r6, r1
 80096f2:	b9ec      	cbnz	r4, 8009730 <strtok+0x4c>
 80096f4:	2050      	movs	r0, #80	@ 0x50
 80096f6:	f000 f999 	bl	8009a2c <malloc>
 80096fa:	4602      	mov	r2, r0
 80096fc:	6478      	str	r0, [r7, #68]	@ 0x44
 80096fe:	b920      	cbnz	r0, 800970a <strtok+0x26>
 8009700:	4b10      	ldr	r3, [pc, #64]	@ (8009744 <strtok+0x60>)
 8009702:	4811      	ldr	r0, [pc, #68]	@ (8009748 <strtok+0x64>)
 8009704:	215b      	movs	r1, #91	@ 0x5b
 8009706:	f000 f929 	bl	800995c <__assert_func>
 800970a:	e9c0 4400 	strd	r4, r4, [r0]
 800970e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009712:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009716:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800971a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800971e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009722:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009726:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800972a:	6184      	str	r4, [r0, #24]
 800972c:	7704      	strb	r4, [r0, #28]
 800972e:	6244      	str	r4, [r0, #36]	@ 0x24
 8009730:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009732:	4631      	mov	r1, r6
 8009734:	4628      	mov	r0, r5
 8009736:	2301      	movs	r3, #1
 8009738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800973c:	f000 b806 	b.w	800974c <__strtok_r>
 8009740:	2000001c 	.word	0x2000001c
 8009744:	0800ac5d 	.word	0x0800ac5d
 8009748:	0800ac74 	.word	0x0800ac74

0800974c <__strtok_r>:
 800974c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800974e:	4604      	mov	r4, r0
 8009750:	b908      	cbnz	r0, 8009756 <__strtok_r+0xa>
 8009752:	6814      	ldr	r4, [r2, #0]
 8009754:	b144      	cbz	r4, 8009768 <__strtok_r+0x1c>
 8009756:	4620      	mov	r0, r4
 8009758:	f814 5b01 	ldrb.w	r5, [r4], #1
 800975c:	460f      	mov	r7, r1
 800975e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009762:	b91e      	cbnz	r6, 800976c <__strtok_r+0x20>
 8009764:	b965      	cbnz	r5, 8009780 <__strtok_r+0x34>
 8009766:	6015      	str	r5, [r2, #0]
 8009768:	2000      	movs	r0, #0
 800976a:	e005      	b.n	8009778 <__strtok_r+0x2c>
 800976c:	42b5      	cmp	r5, r6
 800976e:	d1f6      	bne.n	800975e <__strtok_r+0x12>
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1f0      	bne.n	8009756 <__strtok_r+0xa>
 8009774:	6014      	str	r4, [r2, #0]
 8009776:	7003      	strb	r3, [r0, #0]
 8009778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977a:	461c      	mov	r4, r3
 800977c:	e00c      	b.n	8009798 <__strtok_r+0x4c>
 800977e:	b91d      	cbnz	r5, 8009788 <__strtok_r+0x3c>
 8009780:	4627      	mov	r7, r4
 8009782:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009786:	460e      	mov	r6, r1
 8009788:	f816 5b01 	ldrb.w	r5, [r6], #1
 800978c:	42ab      	cmp	r3, r5
 800978e:	d1f6      	bne.n	800977e <__strtok_r+0x32>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0f2      	beq.n	800977a <__strtok_r+0x2e>
 8009794:	2300      	movs	r3, #0
 8009796:	703b      	strb	r3, [r7, #0]
 8009798:	6014      	str	r4, [r2, #0]
 800979a:	e7ed      	b.n	8009778 <__strtok_r+0x2c>

0800979c <_close_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d06      	ldr	r5, [pc, #24]	@ (80097b8 <_close_r+0x1c>)
 80097a0:	2300      	movs	r3, #0
 80097a2:	4604      	mov	r4, r0
 80097a4:	4608      	mov	r0, r1
 80097a6:	602b      	str	r3, [r5, #0]
 80097a8:	f7f8 fb12 	bl	8001dd0 <_close>
 80097ac:	1c43      	adds	r3, r0, #1
 80097ae:	d102      	bne.n	80097b6 <_close_r+0x1a>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	b103      	cbz	r3, 80097b6 <_close_r+0x1a>
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	bd38      	pop	{r3, r4, r5, pc}
 80097b8:	20004d28 	.word	0x20004d28

080097bc <_reclaim_reent>:
 80097bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009874 <_reclaim_reent+0xb8>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4283      	cmp	r3, r0
 80097c2:	b570      	push	{r4, r5, r6, lr}
 80097c4:	4604      	mov	r4, r0
 80097c6:	d053      	beq.n	8009870 <_reclaim_reent+0xb4>
 80097c8:	69c3      	ldr	r3, [r0, #28]
 80097ca:	b31b      	cbz	r3, 8009814 <_reclaim_reent+0x58>
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	b163      	cbz	r3, 80097ea <_reclaim_reent+0x2e>
 80097d0:	2500      	movs	r5, #0
 80097d2:	69e3      	ldr	r3, [r4, #28]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	5959      	ldr	r1, [r3, r5]
 80097d8:	b9b1      	cbnz	r1, 8009808 <_reclaim_reent+0x4c>
 80097da:	3504      	adds	r5, #4
 80097dc:	2d80      	cmp	r5, #128	@ 0x80
 80097de:	d1f8      	bne.n	80097d2 <_reclaim_reent+0x16>
 80097e0:	69e3      	ldr	r3, [r4, #28]
 80097e2:	4620      	mov	r0, r4
 80097e4:	68d9      	ldr	r1, [r3, #12]
 80097e6:	f000 f8d7 	bl	8009998 <_free_r>
 80097ea:	69e3      	ldr	r3, [r4, #28]
 80097ec:	6819      	ldr	r1, [r3, #0]
 80097ee:	b111      	cbz	r1, 80097f6 <_reclaim_reent+0x3a>
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 f8d1 	bl	8009998 <_free_r>
 80097f6:	69e3      	ldr	r3, [r4, #28]
 80097f8:	689d      	ldr	r5, [r3, #8]
 80097fa:	b15d      	cbz	r5, 8009814 <_reclaim_reent+0x58>
 80097fc:	4629      	mov	r1, r5
 80097fe:	4620      	mov	r0, r4
 8009800:	682d      	ldr	r5, [r5, #0]
 8009802:	f000 f8c9 	bl	8009998 <_free_r>
 8009806:	e7f8      	b.n	80097fa <_reclaim_reent+0x3e>
 8009808:	680e      	ldr	r6, [r1, #0]
 800980a:	4620      	mov	r0, r4
 800980c:	f000 f8c4 	bl	8009998 <_free_r>
 8009810:	4631      	mov	r1, r6
 8009812:	e7e1      	b.n	80097d8 <_reclaim_reent+0x1c>
 8009814:	6961      	ldr	r1, [r4, #20]
 8009816:	b111      	cbz	r1, 800981e <_reclaim_reent+0x62>
 8009818:	4620      	mov	r0, r4
 800981a:	f000 f8bd 	bl	8009998 <_free_r>
 800981e:	69e1      	ldr	r1, [r4, #28]
 8009820:	b111      	cbz	r1, 8009828 <_reclaim_reent+0x6c>
 8009822:	4620      	mov	r0, r4
 8009824:	f000 f8b8 	bl	8009998 <_free_r>
 8009828:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800982a:	b111      	cbz	r1, 8009832 <_reclaim_reent+0x76>
 800982c:	4620      	mov	r0, r4
 800982e:	f000 f8b3 	bl	8009998 <_free_r>
 8009832:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009834:	b111      	cbz	r1, 800983c <_reclaim_reent+0x80>
 8009836:	4620      	mov	r0, r4
 8009838:	f000 f8ae 	bl	8009998 <_free_r>
 800983c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800983e:	b111      	cbz	r1, 8009846 <_reclaim_reent+0x8a>
 8009840:	4620      	mov	r0, r4
 8009842:	f000 f8a9 	bl	8009998 <_free_r>
 8009846:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009848:	b111      	cbz	r1, 8009850 <_reclaim_reent+0x94>
 800984a:	4620      	mov	r0, r4
 800984c:	f000 f8a4 	bl	8009998 <_free_r>
 8009850:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009852:	b111      	cbz	r1, 800985a <_reclaim_reent+0x9e>
 8009854:	4620      	mov	r0, r4
 8009856:	f000 f89f 	bl	8009998 <_free_r>
 800985a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800985c:	b111      	cbz	r1, 8009864 <_reclaim_reent+0xa8>
 800985e:	4620      	mov	r0, r4
 8009860:	f000 f89a 	bl	8009998 <_free_r>
 8009864:	6a23      	ldr	r3, [r4, #32]
 8009866:	b11b      	cbz	r3, 8009870 <_reclaim_reent+0xb4>
 8009868:	4620      	mov	r0, r4
 800986a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800986e:	4718      	bx	r3
 8009870:	bd70      	pop	{r4, r5, r6, pc}
 8009872:	bf00      	nop
 8009874:	2000001c 	.word	0x2000001c

08009878 <_lseek_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d07      	ldr	r5, [pc, #28]	@ (8009898 <_lseek_r+0x20>)
 800987c:	4604      	mov	r4, r0
 800987e:	4608      	mov	r0, r1
 8009880:	4611      	mov	r1, r2
 8009882:	2200      	movs	r2, #0
 8009884:	602a      	str	r2, [r5, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	f7f8 fac9 	bl	8001e1e <_lseek>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d102      	bne.n	8009896 <_lseek_r+0x1e>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	b103      	cbz	r3, 8009896 <_lseek_r+0x1e>
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	bd38      	pop	{r3, r4, r5, pc}
 8009898:	20004d28 	.word	0x20004d28

0800989c <_read_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4d07      	ldr	r5, [pc, #28]	@ (80098bc <_read_r+0x20>)
 80098a0:	4604      	mov	r4, r0
 80098a2:	4608      	mov	r0, r1
 80098a4:	4611      	mov	r1, r2
 80098a6:	2200      	movs	r2, #0
 80098a8:	602a      	str	r2, [r5, #0]
 80098aa:	461a      	mov	r2, r3
 80098ac:	f7f8 fa57 	bl	8001d5e <_read>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d102      	bne.n	80098ba <_read_r+0x1e>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	b103      	cbz	r3, 80098ba <_read_r+0x1e>
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	20004d28 	.word	0x20004d28

080098c0 <_write_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4d07      	ldr	r5, [pc, #28]	@ (80098e0 <_write_r+0x20>)
 80098c4:	4604      	mov	r4, r0
 80098c6:	4608      	mov	r0, r1
 80098c8:	4611      	mov	r1, r2
 80098ca:	2200      	movs	r2, #0
 80098cc:	602a      	str	r2, [r5, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f7f8 fa62 	bl	8001d98 <_write>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d102      	bne.n	80098de <_write_r+0x1e>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	b103      	cbz	r3, 80098de <_write_r+0x1e>
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	20004d28 	.word	0x20004d28

080098e4 <__errno>:
 80098e4:	4b01      	ldr	r3, [pc, #4]	@ (80098ec <__errno+0x8>)
 80098e6:	6818      	ldr	r0, [r3, #0]
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	2000001c 	.word	0x2000001c

080098f0 <__libc_init_array>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	4d0d      	ldr	r5, [pc, #52]	@ (8009928 <__libc_init_array+0x38>)
 80098f4:	4c0d      	ldr	r4, [pc, #52]	@ (800992c <__libc_init_array+0x3c>)
 80098f6:	1b64      	subs	r4, r4, r5
 80098f8:	10a4      	asrs	r4, r4, #2
 80098fa:	2600      	movs	r6, #0
 80098fc:	42a6      	cmp	r6, r4
 80098fe:	d109      	bne.n	8009914 <__libc_init_array+0x24>
 8009900:	4d0b      	ldr	r5, [pc, #44]	@ (8009930 <__libc_init_array+0x40>)
 8009902:	4c0c      	ldr	r4, [pc, #48]	@ (8009934 <__libc_init_array+0x44>)
 8009904:	f000 ffee 	bl	800a8e4 <_init>
 8009908:	1b64      	subs	r4, r4, r5
 800990a:	10a4      	asrs	r4, r4, #2
 800990c:	2600      	movs	r6, #0
 800990e:	42a6      	cmp	r6, r4
 8009910:	d105      	bne.n	800991e <__libc_init_array+0x2e>
 8009912:	bd70      	pop	{r4, r5, r6, pc}
 8009914:	f855 3b04 	ldr.w	r3, [r5], #4
 8009918:	4798      	blx	r3
 800991a:	3601      	adds	r6, #1
 800991c:	e7ee      	b.n	80098fc <__libc_init_array+0xc>
 800991e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009922:	4798      	blx	r3
 8009924:	3601      	adds	r6, #1
 8009926:	e7f2      	b.n	800990e <__libc_init_array+0x1e>
 8009928:	0800ad48 	.word	0x0800ad48
 800992c:	0800ad48 	.word	0x0800ad48
 8009930:	0800ad48 	.word	0x0800ad48
 8009934:	0800ad4c 	.word	0x0800ad4c

08009938 <__retarget_lock_init_recursive>:
 8009938:	4770      	bx	lr

0800993a <__retarget_lock_acquire_recursive>:
 800993a:	4770      	bx	lr

0800993c <__retarget_lock_release_recursive>:
 800993c:	4770      	bx	lr

0800993e <memcpy>:
 800993e:	440a      	add	r2, r1
 8009940:	4291      	cmp	r1, r2
 8009942:	f100 33ff 	add.w	r3, r0, #4294967295
 8009946:	d100      	bne.n	800994a <memcpy+0xc>
 8009948:	4770      	bx	lr
 800994a:	b510      	push	{r4, lr}
 800994c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009950:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009954:	4291      	cmp	r1, r2
 8009956:	d1f9      	bne.n	800994c <memcpy+0xe>
 8009958:	bd10      	pop	{r4, pc}
	...

0800995c <__assert_func>:
 800995c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800995e:	4614      	mov	r4, r2
 8009960:	461a      	mov	r2, r3
 8009962:	4b09      	ldr	r3, [pc, #36]	@ (8009988 <__assert_func+0x2c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4605      	mov	r5, r0
 8009968:	68d8      	ldr	r0, [r3, #12]
 800996a:	b14c      	cbz	r4, 8009980 <__assert_func+0x24>
 800996c:	4b07      	ldr	r3, [pc, #28]	@ (800998c <__assert_func+0x30>)
 800996e:	9100      	str	r1, [sp, #0]
 8009970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009974:	4906      	ldr	r1, [pc, #24]	@ (8009990 <__assert_func+0x34>)
 8009976:	462b      	mov	r3, r5
 8009978:	f000 fc9e 	bl	800a2b8 <fiprintf>
 800997c:	f000 fcd8 	bl	800a330 <abort>
 8009980:	4b04      	ldr	r3, [pc, #16]	@ (8009994 <__assert_func+0x38>)
 8009982:	461c      	mov	r4, r3
 8009984:	e7f3      	b.n	800996e <__assert_func+0x12>
 8009986:	bf00      	nop
 8009988:	2000001c 	.word	0x2000001c
 800998c:	0800acce 	.word	0x0800acce
 8009990:	0800acdb 	.word	0x0800acdb
 8009994:	0800ad09 	.word	0x0800ad09

08009998 <_free_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4605      	mov	r5, r0
 800999c:	2900      	cmp	r1, #0
 800999e:	d041      	beq.n	8009a24 <_free_r+0x8c>
 80099a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a4:	1f0c      	subs	r4, r1, #4
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	bfb8      	it	lt
 80099aa:	18e4      	addlt	r4, r4, r3
 80099ac:	f000 f8e8 	bl	8009b80 <__malloc_lock>
 80099b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009a28 <_free_r+0x90>)
 80099b2:	6813      	ldr	r3, [r2, #0]
 80099b4:	b933      	cbnz	r3, 80099c4 <_free_r+0x2c>
 80099b6:	6063      	str	r3, [r4, #4]
 80099b8:	6014      	str	r4, [r2, #0]
 80099ba:	4628      	mov	r0, r5
 80099bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099c0:	f000 b8e4 	b.w	8009b8c <__malloc_unlock>
 80099c4:	42a3      	cmp	r3, r4
 80099c6:	d908      	bls.n	80099da <_free_r+0x42>
 80099c8:	6820      	ldr	r0, [r4, #0]
 80099ca:	1821      	adds	r1, r4, r0
 80099cc:	428b      	cmp	r3, r1
 80099ce:	bf01      	itttt	eq
 80099d0:	6819      	ldreq	r1, [r3, #0]
 80099d2:	685b      	ldreq	r3, [r3, #4]
 80099d4:	1809      	addeq	r1, r1, r0
 80099d6:	6021      	streq	r1, [r4, #0]
 80099d8:	e7ed      	b.n	80099b6 <_free_r+0x1e>
 80099da:	461a      	mov	r2, r3
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	b10b      	cbz	r3, 80099e4 <_free_r+0x4c>
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	d9fa      	bls.n	80099da <_free_r+0x42>
 80099e4:	6811      	ldr	r1, [r2, #0]
 80099e6:	1850      	adds	r0, r2, r1
 80099e8:	42a0      	cmp	r0, r4
 80099ea:	d10b      	bne.n	8009a04 <_free_r+0x6c>
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	4401      	add	r1, r0
 80099f0:	1850      	adds	r0, r2, r1
 80099f2:	4283      	cmp	r3, r0
 80099f4:	6011      	str	r1, [r2, #0]
 80099f6:	d1e0      	bne.n	80099ba <_free_r+0x22>
 80099f8:	6818      	ldr	r0, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	6053      	str	r3, [r2, #4]
 80099fe:	4408      	add	r0, r1
 8009a00:	6010      	str	r0, [r2, #0]
 8009a02:	e7da      	b.n	80099ba <_free_r+0x22>
 8009a04:	d902      	bls.n	8009a0c <_free_r+0x74>
 8009a06:	230c      	movs	r3, #12
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	e7d6      	b.n	80099ba <_free_r+0x22>
 8009a0c:	6820      	ldr	r0, [r4, #0]
 8009a0e:	1821      	adds	r1, r4, r0
 8009a10:	428b      	cmp	r3, r1
 8009a12:	bf04      	itt	eq
 8009a14:	6819      	ldreq	r1, [r3, #0]
 8009a16:	685b      	ldreq	r3, [r3, #4]
 8009a18:	6063      	str	r3, [r4, #4]
 8009a1a:	bf04      	itt	eq
 8009a1c:	1809      	addeq	r1, r1, r0
 8009a1e:	6021      	streq	r1, [r4, #0]
 8009a20:	6054      	str	r4, [r2, #4]
 8009a22:	e7ca      	b.n	80099ba <_free_r+0x22>
 8009a24:	bd38      	pop	{r3, r4, r5, pc}
 8009a26:	bf00      	nop
 8009a28:	20004d34 	.word	0x20004d34

08009a2c <malloc>:
 8009a2c:	4b02      	ldr	r3, [pc, #8]	@ (8009a38 <malloc+0xc>)
 8009a2e:	4601      	mov	r1, r0
 8009a30:	6818      	ldr	r0, [r3, #0]
 8009a32:	f000 b825 	b.w	8009a80 <_malloc_r>
 8009a36:	bf00      	nop
 8009a38:	2000001c 	.word	0x2000001c

08009a3c <sbrk_aligned>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8009a7c <sbrk_aligned+0x40>)
 8009a40:	460c      	mov	r4, r1
 8009a42:	6831      	ldr	r1, [r6, #0]
 8009a44:	4605      	mov	r5, r0
 8009a46:	b911      	cbnz	r1, 8009a4e <sbrk_aligned+0x12>
 8009a48:	f000 fc62 	bl	800a310 <_sbrk_r>
 8009a4c:	6030      	str	r0, [r6, #0]
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4628      	mov	r0, r5
 8009a52:	f000 fc5d 	bl	800a310 <_sbrk_r>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	d103      	bne.n	8009a62 <sbrk_aligned+0x26>
 8009a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8009a5e:	4620      	mov	r0, r4
 8009a60:	bd70      	pop	{r4, r5, r6, pc}
 8009a62:	1cc4      	adds	r4, r0, #3
 8009a64:	f024 0403 	bic.w	r4, r4, #3
 8009a68:	42a0      	cmp	r0, r4
 8009a6a:	d0f8      	beq.n	8009a5e <sbrk_aligned+0x22>
 8009a6c:	1a21      	subs	r1, r4, r0
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f000 fc4e 	bl	800a310 <_sbrk_r>
 8009a74:	3001      	adds	r0, #1
 8009a76:	d1f2      	bne.n	8009a5e <sbrk_aligned+0x22>
 8009a78:	e7ef      	b.n	8009a5a <sbrk_aligned+0x1e>
 8009a7a:	bf00      	nop
 8009a7c:	20004d30 	.word	0x20004d30

08009a80 <_malloc_r>:
 8009a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a84:	1ccd      	adds	r5, r1, #3
 8009a86:	f025 0503 	bic.w	r5, r5, #3
 8009a8a:	3508      	adds	r5, #8
 8009a8c:	2d0c      	cmp	r5, #12
 8009a8e:	bf38      	it	cc
 8009a90:	250c      	movcc	r5, #12
 8009a92:	2d00      	cmp	r5, #0
 8009a94:	4606      	mov	r6, r0
 8009a96:	db01      	blt.n	8009a9c <_malloc_r+0x1c>
 8009a98:	42a9      	cmp	r1, r5
 8009a9a:	d904      	bls.n	8009aa6 <_malloc_r+0x26>
 8009a9c:	230c      	movs	r3, #12
 8009a9e:	6033      	str	r3, [r6, #0]
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b7c <_malloc_r+0xfc>
 8009aaa:	f000 f869 	bl	8009b80 <__malloc_lock>
 8009aae:	f8d8 3000 	ldr.w	r3, [r8]
 8009ab2:	461c      	mov	r4, r3
 8009ab4:	bb44      	cbnz	r4, 8009b08 <_malloc_r+0x88>
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f7ff ffbf 	bl	8009a3c <sbrk_aligned>
 8009abe:	1c43      	adds	r3, r0, #1
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	d158      	bne.n	8009b76 <_malloc_r+0xf6>
 8009ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8009ac8:	4627      	mov	r7, r4
 8009aca:	2f00      	cmp	r7, #0
 8009acc:	d143      	bne.n	8009b56 <_malloc_r+0xd6>
 8009ace:	2c00      	cmp	r4, #0
 8009ad0:	d04b      	beq.n	8009b6a <_malloc_r+0xea>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	eb04 0903 	add.w	r9, r4, r3
 8009adc:	f000 fc18 	bl	800a310 <_sbrk_r>
 8009ae0:	4581      	cmp	r9, r0
 8009ae2:	d142      	bne.n	8009b6a <_malloc_r+0xea>
 8009ae4:	6821      	ldr	r1, [r4, #0]
 8009ae6:	1a6d      	subs	r5, r5, r1
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff ffa6 	bl	8009a3c <sbrk_aligned>
 8009af0:	3001      	adds	r0, #1
 8009af2:	d03a      	beq.n	8009b6a <_malloc_r+0xea>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	442b      	add	r3, r5
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	f8d8 3000 	ldr.w	r3, [r8]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	bb62      	cbnz	r2, 8009b5c <_malloc_r+0xdc>
 8009b02:	f8c8 7000 	str.w	r7, [r8]
 8009b06:	e00f      	b.n	8009b28 <_malloc_r+0xa8>
 8009b08:	6822      	ldr	r2, [r4, #0]
 8009b0a:	1b52      	subs	r2, r2, r5
 8009b0c:	d420      	bmi.n	8009b50 <_malloc_r+0xd0>
 8009b0e:	2a0b      	cmp	r2, #11
 8009b10:	d917      	bls.n	8009b42 <_malloc_r+0xc2>
 8009b12:	1961      	adds	r1, r4, r5
 8009b14:	42a3      	cmp	r3, r4
 8009b16:	6025      	str	r5, [r4, #0]
 8009b18:	bf18      	it	ne
 8009b1a:	6059      	strne	r1, [r3, #4]
 8009b1c:	6863      	ldr	r3, [r4, #4]
 8009b1e:	bf08      	it	eq
 8009b20:	f8c8 1000 	streq.w	r1, [r8]
 8009b24:	5162      	str	r2, [r4, r5]
 8009b26:	604b      	str	r3, [r1, #4]
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f000 f82f 	bl	8009b8c <__malloc_unlock>
 8009b2e:	f104 000b 	add.w	r0, r4, #11
 8009b32:	1d23      	adds	r3, r4, #4
 8009b34:	f020 0007 	bic.w	r0, r0, #7
 8009b38:	1ac2      	subs	r2, r0, r3
 8009b3a:	bf1c      	itt	ne
 8009b3c:	1a1b      	subne	r3, r3, r0
 8009b3e:	50a3      	strne	r3, [r4, r2]
 8009b40:	e7af      	b.n	8009aa2 <_malloc_r+0x22>
 8009b42:	6862      	ldr	r2, [r4, #4]
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	bf0c      	ite	eq
 8009b48:	f8c8 2000 	streq.w	r2, [r8]
 8009b4c:	605a      	strne	r2, [r3, #4]
 8009b4e:	e7eb      	b.n	8009b28 <_malloc_r+0xa8>
 8009b50:	4623      	mov	r3, r4
 8009b52:	6864      	ldr	r4, [r4, #4]
 8009b54:	e7ae      	b.n	8009ab4 <_malloc_r+0x34>
 8009b56:	463c      	mov	r4, r7
 8009b58:	687f      	ldr	r7, [r7, #4]
 8009b5a:	e7b6      	b.n	8009aca <_malloc_r+0x4a>
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	42a3      	cmp	r3, r4
 8009b62:	d1fb      	bne.n	8009b5c <_malloc_r+0xdc>
 8009b64:	2300      	movs	r3, #0
 8009b66:	6053      	str	r3, [r2, #4]
 8009b68:	e7de      	b.n	8009b28 <_malloc_r+0xa8>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	6033      	str	r3, [r6, #0]
 8009b6e:	4630      	mov	r0, r6
 8009b70:	f000 f80c 	bl	8009b8c <__malloc_unlock>
 8009b74:	e794      	b.n	8009aa0 <_malloc_r+0x20>
 8009b76:	6005      	str	r5, [r0, #0]
 8009b78:	e7d6      	b.n	8009b28 <_malloc_r+0xa8>
 8009b7a:	bf00      	nop
 8009b7c:	20004d34 	.word	0x20004d34

08009b80 <__malloc_lock>:
 8009b80:	4801      	ldr	r0, [pc, #4]	@ (8009b88 <__malloc_lock+0x8>)
 8009b82:	f7ff beda 	b.w	800993a <__retarget_lock_acquire_recursive>
 8009b86:	bf00      	nop
 8009b88:	20004d2c 	.word	0x20004d2c

08009b8c <__malloc_unlock>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	@ (8009b94 <__malloc_unlock+0x8>)
 8009b8e:	f7ff bed5 	b.w	800993c <__retarget_lock_release_recursive>
 8009b92:	bf00      	nop
 8009b94:	20004d2c 	.word	0x20004d2c

08009b98 <__ssputs_r>:
 8009b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b9c:	688e      	ldr	r6, [r1, #8]
 8009b9e:	461f      	mov	r7, r3
 8009ba0:	42be      	cmp	r6, r7
 8009ba2:	680b      	ldr	r3, [r1, #0]
 8009ba4:	4682      	mov	sl, r0
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	4690      	mov	r8, r2
 8009baa:	d82d      	bhi.n	8009c08 <__ssputs_r+0x70>
 8009bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009bb4:	d026      	beq.n	8009c04 <__ssputs_r+0x6c>
 8009bb6:	6965      	ldr	r5, [r4, #20]
 8009bb8:	6909      	ldr	r1, [r1, #16]
 8009bba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bbe:	eba3 0901 	sub.w	r9, r3, r1
 8009bc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bc6:	1c7b      	adds	r3, r7, #1
 8009bc8:	444b      	add	r3, r9
 8009bca:	106d      	asrs	r5, r5, #1
 8009bcc:	429d      	cmp	r5, r3
 8009bce:	bf38      	it	cc
 8009bd0:	461d      	movcc	r5, r3
 8009bd2:	0553      	lsls	r3, r2, #21
 8009bd4:	d527      	bpl.n	8009c26 <__ssputs_r+0x8e>
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	f7ff ff52 	bl	8009a80 <_malloc_r>
 8009bdc:	4606      	mov	r6, r0
 8009bde:	b360      	cbz	r0, 8009c3a <__ssputs_r+0xa2>
 8009be0:	6921      	ldr	r1, [r4, #16]
 8009be2:	464a      	mov	r2, r9
 8009be4:	f7ff feab 	bl	800993e <memcpy>
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	6126      	str	r6, [r4, #16]
 8009bf6:	6165      	str	r5, [r4, #20]
 8009bf8:	444e      	add	r6, r9
 8009bfa:	eba5 0509 	sub.w	r5, r5, r9
 8009bfe:	6026      	str	r6, [r4, #0]
 8009c00:	60a5      	str	r5, [r4, #8]
 8009c02:	463e      	mov	r6, r7
 8009c04:	42be      	cmp	r6, r7
 8009c06:	d900      	bls.n	8009c0a <__ssputs_r+0x72>
 8009c08:	463e      	mov	r6, r7
 8009c0a:	6820      	ldr	r0, [r4, #0]
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	4641      	mov	r1, r8
 8009c10:	f000 fb64 	bl	800a2dc <memmove>
 8009c14:	68a3      	ldr	r3, [r4, #8]
 8009c16:	1b9b      	subs	r3, r3, r6
 8009c18:	60a3      	str	r3, [r4, #8]
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	4433      	add	r3, r6
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	2000      	movs	r0, #0
 8009c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c26:	462a      	mov	r2, r5
 8009c28:	f000 fb89 	bl	800a33e <_realloc_r>
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d1e0      	bne.n	8009bf4 <__ssputs_r+0x5c>
 8009c32:	6921      	ldr	r1, [r4, #16]
 8009c34:	4650      	mov	r0, sl
 8009c36:	f7ff feaf 	bl	8009998 <_free_r>
 8009c3a:	230c      	movs	r3, #12
 8009c3c:	f8ca 3000 	str.w	r3, [sl]
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c46:	81a3      	strh	r3, [r4, #12]
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4c:	e7e9      	b.n	8009c22 <__ssputs_r+0x8a>
	...

08009c50 <_svfiprintf_r>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	4698      	mov	r8, r3
 8009c56:	898b      	ldrh	r3, [r1, #12]
 8009c58:	061b      	lsls	r3, r3, #24
 8009c5a:	b09d      	sub	sp, #116	@ 0x74
 8009c5c:	4607      	mov	r7, r0
 8009c5e:	460d      	mov	r5, r1
 8009c60:	4614      	mov	r4, r2
 8009c62:	d510      	bpl.n	8009c86 <_svfiprintf_r+0x36>
 8009c64:	690b      	ldr	r3, [r1, #16]
 8009c66:	b973      	cbnz	r3, 8009c86 <_svfiprintf_r+0x36>
 8009c68:	2140      	movs	r1, #64	@ 0x40
 8009c6a:	f7ff ff09 	bl	8009a80 <_malloc_r>
 8009c6e:	6028      	str	r0, [r5, #0]
 8009c70:	6128      	str	r0, [r5, #16]
 8009c72:	b930      	cbnz	r0, 8009c82 <_svfiprintf_r+0x32>
 8009c74:	230c      	movs	r3, #12
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7c:	b01d      	add	sp, #116	@ 0x74
 8009c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c82:	2340      	movs	r3, #64	@ 0x40
 8009c84:	616b      	str	r3, [r5, #20]
 8009c86:	2300      	movs	r3, #0
 8009c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c8a:	2320      	movs	r3, #32
 8009c8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c94:	2330      	movs	r3, #48	@ 0x30
 8009c96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e34 <_svfiprintf_r+0x1e4>
 8009c9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c9e:	f04f 0901 	mov.w	r9, #1
 8009ca2:	4623      	mov	r3, r4
 8009ca4:	469a      	mov	sl, r3
 8009ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009caa:	b10a      	cbz	r2, 8009cb0 <_svfiprintf_r+0x60>
 8009cac:	2a25      	cmp	r2, #37	@ 0x25
 8009cae:	d1f9      	bne.n	8009ca4 <_svfiprintf_r+0x54>
 8009cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8009cb4:	d00b      	beq.n	8009cce <_svfiprintf_r+0x7e>
 8009cb6:	465b      	mov	r3, fp
 8009cb8:	4622      	mov	r2, r4
 8009cba:	4629      	mov	r1, r5
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	f7ff ff6b 	bl	8009b98 <__ssputs_r>
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	f000 80a7 	beq.w	8009e16 <_svfiprintf_r+0x1c6>
 8009cc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cca:	445a      	add	r2, fp
 8009ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cce:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 809f 	beq.w	8009e16 <_svfiprintf_r+0x1c6>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f04f 32ff 	mov.w	r2, #4294967295
 8009cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ce2:	f10a 0a01 	add.w	sl, sl, #1
 8009ce6:	9304      	str	r3, [sp, #16]
 8009ce8:	9307      	str	r3, [sp, #28]
 8009cea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cee:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cf0:	4654      	mov	r4, sl
 8009cf2:	2205      	movs	r2, #5
 8009cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf8:	484e      	ldr	r0, [pc, #312]	@ (8009e34 <_svfiprintf_r+0x1e4>)
 8009cfa:	f7f6 fa71 	bl	80001e0 <memchr>
 8009cfe:	9a04      	ldr	r2, [sp, #16]
 8009d00:	b9d8      	cbnz	r0, 8009d3a <_svfiprintf_r+0xea>
 8009d02:	06d0      	lsls	r0, r2, #27
 8009d04:	bf44      	itt	mi
 8009d06:	2320      	movmi	r3, #32
 8009d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d0c:	0711      	lsls	r1, r2, #28
 8009d0e:	bf44      	itt	mi
 8009d10:	232b      	movmi	r3, #43	@ 0x2b
 8009d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d16:	f89a 3000 	ldrb.w	r3, [sl]
 8009d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d1c:	d015      	beq.n	8009d4a <_svfiprintf_r+0xfa>
 8009d1e:	9a07      	ldr	r2, [sp, #28]
 8009d20:	4654      	mov	r4, sl
 8009d22:	2000      	movs	r0, #0
 8009d24:	f04f 0c0a 	mov.w	ip, #10
 8009d28:	4621      	mov	r1, r4
 8009d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d2e:	3b30      	subs	r3, #48	@ 0x30
 8009d30:	2b09      	cmp	r3, #9
 8009d32:	d94b      	bls.n	8009dcc <_svfiprintf_r+0x17c>
 8009d34:	b1b0      	cbz	r0, 8009d64 <_svfiprintf_r+0x114>
 8009d36:	9207      	str	r2, [sp, #28]
 8009d38:	e014      	b.n	8009d64 <_svfiprintf_r+0x114>
 8009d3a:	eba0 0308 	sub.w	r3, r0, r8
 8009d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8009d42:	4313      	orrs	r3, r2
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	46a2      	mov	sl, r4
 8009d48:	e7d2      	b.n	8009cf0 <_svfiprintf_r+0xa0>
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	1d19      	adds	r1, r3, #4
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	9103      	str	r1, [sp, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	bfbb      	ittet	lt
 8009d56:	425b      	neglt	r3, r3
 8009d58:	f042 0202 	orrlt.w	r2, r2, #2
 8009d5c:	9307      	strge	r3, [sp, #28]
 8009d5e:	9307      	strlt	r3, [sp, #28]
 8009d60:	bfb8      	it	lt
 8009d62:	9204      	strlt	r2, [sp, #16]
 8009d64:	7823      	ldrb	r3, [r4, #0]
 8009d66:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d68:	d10a      	bne.n	8009d80 <_svfiprintf_r+0x130>
 8009d6a:	7863      	ldrb	r3, [r4, #1]
 8009d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d6e:	d132      	bne.n	8009dd6 <_svfiprintf_r+0x186>
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	1d1a      	adds	r2, r3, #4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	9203      	str	r2, [sp, #12]
 8009d78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d7c:	3402      	adds	r4, #2
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e44 <_svfiprintf_r+0x1f4>
 8009d84:	7821      	ldrb	r1, [r4, #0]
 8009d86:	2203      	movs	r2, #3
 8009d88:	4650      	mov	r0, sl
 8009d8a:	f7f6 fa29 	bl	80001e0 <memchr>
 8009d8e:	b138      	cbz	r0, 8009da0 <_svfiprintf_r+0x150>
 8009d90:	9b04      	ldr	r3, [sp, #16]
 8009d92:	eba0 000a 	sub.w	r0, r0, sl
 8009d96:	2240      	movs	r2, #64	@ 0x40
 8009d98:	4082      	lsls	r2, r0
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	3401      	adds	r4, #1
 8009d9e:	9304      	str	r3, [sp, #16]
 8009da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da4:	4824      	ldr	r0, [pc, #144]	@ (8009e38 <_svfiprintf_r+0x1e8>)
 8009da6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009daa:	2206      	movs	r2, #6
 8009dac:	f7f6 fa18 	bl	80001e0 <memchr>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d036      	beq.n	8009e22 <_svfiprintf_r+0x1d2>
 8009db4:	4b21      	ldr	r3, [pc, #132]	@ (8009e3c <_svfiprintf_r+0x1ec>)
 8009db6:	bb1b      	cbnz	r3, 8009e00 <_svfiprintf_r+0x1b0>
 8009db8:	9b03      	ldr	r3, [sp, #12]
 8009dba:	3307      	adds	r3, #7
 8009dbc:	f023 0307 	bic.w	r3, r3, #7
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	9303      	str	r3, [sp, #12]
 8009dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc6:	4433      	add	r3, r6
 8009dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dca:	e76a      	b.n	8009ca2 <_svfiprintf_r+0x52>
 8009dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	e7a8      	b.n	8009d28 <_svfiprintf_r+0xd8>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	3401      	adds	r4, #1
 8009dda:	9305      	str	r3, [sp, #20]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	f04f 0c0a 	mov.w	ip, #10
 8009de2:	4620      	mov	r0, r4
 8009de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009de8:	3a30      	subs	r2, #48	@ 0x30
 8009dea:	2a09      	cmp	r2, #9
 8009dec:	d903      	bls.n	8009df6 <_svfiprintf_r+0x1a6>
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0c6      	beq.n	8009d80 <_svfiprintf_r+0x130>
 8009df2:	9105      	str	r1, [sp, #20]
 8009df4:	e7c4      	b.n	8009d80 <_svfiprintf_r+0x130>
 8009df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e7f0      	b.n	8009de2 <_svfiprintf_r+0x192>
 8009e00:	ab03      	add	r3, sp, #12
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	462a      	mov	r2, r5
 8009e06:	4b0e      	ldr	r3, [pc, #56]	@ (8009e40 <_svfiprintf_r+0x1f0>)
 8009e08:	a904      	add	r1, sp, #16
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	f3af 8000 	nop.w
 8009e10:	1c42      	adds	r2, r0, #1
 8009e12:	4606      	mov	r6, r0
 8009e14:	d1d6      	bne.n	8009dc4 <_svfiprintf_r+0x174>
 8009e16:	89ab      	ldrh	r3, [r5, #12]
 8009e18:	065b      	lsls	r3, r3, #25
 8009e1a:	f53f af2d 	bmi.w	8009c78 <_svfiprintf_r+0x28>
 8009e1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e20:	e72c      	b.n	8009c7c <_svfiprintf_r+0x2c>
 8009e22:	ab03      	add	r3, sp, #12
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	462a      	mov	r2, r5
 8009e28:	4b05      	ldr	r3, [pc, #20]	@ (8009e40 <_svfiprintf_r+0x1f0>)
 8009e2a:	a904      	add	r1, sp, #16
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	f000 f879 	bl	8009f24 <_printf_i>
 8009e32:	e7ed      	b.n	8009e10 <_svfiprintf_r+0x1c0>
 8009e34:	0800ad0a 	.word	0x0800ad0a
 8009e38:	0800ad14 	.word	0x0800ad14
 8009e3c:	00000000 	.word	0x00000000
 8009e40:	08009b99 	.word	0x08009b99
 8009e44:	0800ad10 	.word	0x0800ad10

08009e48 <_printf_common>:
 8009e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e4c:	4616      	mov	r6, r2
 8009e4e:	4698      	mov	r8, r3
 8009e50:	688a      	ldr	r2, [r1, #8]
 8009e52:	690b      	ldr	r3, [r1, #16]
 8009e54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	bfb8      	it	lt
 8009e5c:	4613      	movlt	r3, r2
 8009e5e:	6033      	str	r3, [r6, #0]
 8009e60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e64:	4607      	mov	r7, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	b10a      	cbz	r2, 8009e6e <_printf_common+0x26>
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	6033      	str	r3, [r6, #0]
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	0699      	lsls	r1, r3, #26
 8009e72:	bf42      	ittt	mi
 8009e74:	6833      	ldrmi	r3, [r6, #0]
 8009e76:	3302      	addmi	r3, #2
 8009e78:	6033      	strmi	r3, [r6, #0]
 8009e7a:	6825      	ldr	r5, [r4, #0]
 8009e7c:	f015 0506 	ands.w	r5, r5, #6
 8009e80:	d106      	bne.n	8009e90 <_printf_common+0x48>
 8009e82:	f104 0a19 	add.w	sl, r4, #25
 8009e86:	68e3      	ldr	r3, [r4, #12]
 8009e88:	6832      	ldr	r2, [r6, #0]
 8009e8a:	1a9b      	subs	r3, r3, r2
 8009e8c:	42ab      	cmp	r3, r5
 8009e8e:	dc26      	bgt.n	8009ede <_printf_common+0x96>
 8009e90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e94:	6822      	ldr	r2, [r4, #0]
 8009e96:	3b00      	subs	r3, #0
 8009e98:	bf18      	it	ne
 8009e9a:	2301      	movne	r3, #1
 8009e9c:	0692      	lsls	r2, r2, #26
 8009e9e:	d42b      	bmi.n	8009ef8 <_printf_common+0xb0>
 8009ea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ea4:	4641      	mov	r1, r8
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	47c8      	blx	r9
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d01e      	beq.n	8009eec <_printf_common+0xa4>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	f003 0306 	and.w	r3, r3, #6
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	bf02      	ittt	eq
 8009eba:	68e5      	ldreq	r5, [r4, #12]
 8009ebc:	6833      	ldreq	r3, [r6, #0]
 8009ebe:	1aed      	subeq	r5, r5, r3
 8009ec0:	68a3      	ldr	r3, [r4, #8]
 8009ec2:	bf0c      	ite	eq
 8009ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ec8:	2500      	movne	r5, #0
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	bfc4      	itt	gt
 8009ece:	1a9b      	subgt	r3, r3, r2
 8009ed0:	18ed      	addgt	r5, r5, r3
 8009ed2:	2600      	movs	r6, #0
 8009ed4:	341a      	adds	r4, #26
 8009ed6:	42b5      	cmp	r5, r6
 8009ed8:	d11a      	bne.n	8009f10 <_printf_common+0xc8>
 8009eda:	2000      	movs	r0, #0
 8009edc:	e008      	b.n	8009ef0 <_printf_common+0xa8>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	4652      	mov	r2, sl
 8009ee2:	4641      	mov	r1, r8
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	47c8      	blx	r9
 8009ee8:	3001      	adds	r0, #1
 8009eea:	d103      	bne.n	8009ef4 <_printf_common+0xac>
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef4:	3501      	adds	r5, #1
 8009ef6:	e7c6      	b.n	8009e86 <_printf_common+0x3e>
 8009ef8:	18e1      	adds	r1, r4, r3
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	2030      	movs	r0, #48	@ 0x30
 8009efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f02:	4422      	add	r2, r4
 8009f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f0c:	3302      	adds	r3, #2
 8009f0e:	e7c7      	b.n	8009ea0 <_printf_common+0x58>
 8009f10:	2301      	movs	r3, #1
 8009f12:	4622      	mov	r2, r4
 8009f14:	4641      	mov	r1, r8
 8009f16:	4638      	mov	r0, r7
 8009f18:	47c8      	blx	r9
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d0e6      	beq.n	8009eec <_printf_common+0xa4>
 8009f1e:	3601      	adds	r6, #1
 8009f20:	e7d9      	b.n	8009ed6 <_printf_common+0x8e>
	...

08009f24 <_printf_i>:
 8009f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f28:	7e0f      	ldrb	r7, [r1, #24]
 8009f2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f2c:	2f78      	cmp	r7, #120	@ 0x78
 8009f2e:	4691      	mov	r9, r2
 8009f30:	4680      	mov	r8, r0
 8009f32:	460c      	mov	r4, r1
 8009f34:	469a      	mov	sl, r3
 8009f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f3a:	d807      	bhi.n	8009f4c <_printf_i+0x28>
 8009f3c:	2f62      	cmp	r7, #98	@ 0x62
 8009f3e:	d80a      	bhi.n	8009f56 <_printf_i+0x32>
 8009f40:	2f00      	cmp	r7, #0
 8009f42:	f000 80d1 	beq.w	800a0e8 <_printf_i+0x1c4>
 8009f46:	2f58      	cmp	r7, #88	@ 0x58
 8009f48:	f000 80b8 	beq.w	800a0bc <_printf_i+0x198>
 8009f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f54:	e03a      	b.n	8009fcc <_printf_i+0xa8>
 8009f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f5a:	2b15      	cmp	r3, #21
 8009f5c:	d8f6      	bhi.n	8009f4c <_printf_i+0x28>
 8009f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8009f64 <_printf_i+0x40>)
 8009f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f64:	08009fbd 	.word	0x08009fbd
 8009f68:	08009fd1 	.word	0x08009fd1
 8009f6c:	08009f4d 	.word	0x08009f4d
 8009f70:	08009f4d 	.word	0x08009f4d
 8009f74:	08009f4d 	.word	0x08009f4d
 8009f78:	08009f4d 	.word	0x08009f4d
 8009f7c:	08009fd1 	.word	0x08009fd1
 8009f80:	08009f4d 	.word	0x08009f4d
 8009f84:	08009f4d 	.word	0x08009f4d
 8009f88:	08009f4d 	.word	0x08009f4d
 8009f8c:	08009f4d 	.word	0x08009f4d
 8009f90:	0800a0cf 	.word	0x0800a0cf
 8009f94:	08009ffb 	.word	0x08009ffb
 8009f98:	0800a089 	.word	0x0800a089
 8009f9c:	08009f4d 	.word	0x08009f4d
 8009fa0:	08009f4d 	.word	0x08009f4d
 8009fa4:	0800a0f1 	.word	0x0800a0f1
 8009fa8:	08009f4d 	.word	0x08009f4d
 8009fac:	08009ffb 	.word	0x08009ffb
 8009fb0:	08009f4d 	.word	0x08009f4d
 8009fb4:	08009f4d 	.word	0x08009f4d
 8009fb8:	0800a091 	.word	0x0800a091
 8009fbc:	6833      	ldr	r3, [r6, #0]
 8009fbe:	1d1a      	adds	r2, r3, #4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6032      	str	r2, [r6, #0]
 8009fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e09c      	b.n	800a10a <_printf_i+0x1e6>
 8009fd0:	6833      	ldr	r3, [r6, #0]
 8009fd2:	6820      	ldr	r0, [r4, #0]
 8009fd4:	1d19      	adds	r1, r3, #4
 8009fd6:	6031      	str	r1, [r6, #0]
 8009fd8:	0606      	lsls	r6, r0, #24
 8009fda:	d501      	bpl.n	8009fe0 <_printf_i+0xbc>
 8009fdc:	681d      	ldr	r5, [r3, #0]
 8009fde:	e003      	b.n	8009fe8 <_printf_i+0xc4>
 8009fe0:	0645      	lsls	r5, r0, #25
 8009fe2:	d5fb      	bpl.n	8009fdc <_printf_i+0xb8>
 8009fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009fe8:	2d00      	cmp	r5, #0
 8009fea:	da03      	bge.n	8009ff4 <_printf_i+0xd0>
 8009fec:	232d      	movs	r3, #45	@ 0x2d
 8009fee:	426d      	negs	r5, r5
 8009ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ff4:	4858      	ldr	r0, [pc, #352]	@ (800a158 <_printf_i+0x234>)
 8009ff6:	230a      	movs	r3, #10
 8009ff8:	e011      	b.n	800a01e <_printf_i+0xfa>
 8009ffa:	6821      	ldr	r1, [r4, #0]
 8009ffc:	6833      	ldr	r3, [r6, #0]
 8009ffe:	0608      	lsls	r0, r1, #24
 800a000:	f853 5b04 	ldr.w	r5, [r3], #4
 800a004:	d402      	bmi.n	800a00c <_printf_i+0xe8>
 800a006:	0649      	lsls	r1, r1, #25
 800a008:	bf48      	it	mi
 800a00a:	b2ad      	uxthmi	r5, r5
 800a00c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a00e:	4852      	ldr	r0, [pc, #328]	@ (800a158 <_printf_i+0x234>)
 800a010:	6033      	str	r3, [r6, #0]
 800a012:	bf14      	ite	ne
 800a014:	230a      	movne	r3, #10
 800a016:	2308      	moveq	r3, #8
 800a018:	2100      	movs	r1, #0
 800a01a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a01e:	6866      	ldr	r6, [r4, #4]
 800a020:	60a6      	str	r6, [r4, #8]
 800a022:	2e00      	cmp	r6, #0
 800a024:	db05      	blt.n	800a032 <_printf_i+0x10e>
 800a026:	6821      	ldr	r1, [r4, #0]
 800a028:	432e      	orrs	r6, r5
 800a02a:	f021 0104 	bic.w	r1, r1, #4
 800a02e:	6021      	str	r1, [r4, #0]
 800a030:	d04b      	beq.n	800a0ca <_printf_i+0x1a6>
 800a032:	4616      	mov	r6, r2
 800a034:	fbb5 f1f3 	udiv	r1, r5, r3
 800a038:	fb03 5711 	mls	r7, r3, r1, r5
 800a03c:	5dc7      	ldrb	r7, [r0, r7]
 800a03e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a042:	462f      	mov	r7, r5
 800a044:	42bb      	cmp	r3, r7
 800a046:	460d      	mov	r5, r1
 800a048:	d9f4      	bls.n	800a034 <_printf_i+0x110>
 800a04a:	2b08      	cmp	r3, #8
 800a04c:	d10b      	bne.n	800a066 <_printf_i+0x142>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	07df      	lsls	r7, r3, #31
 800a052:	d508      	bpl.n	800a066 <_printf_i+0x142>
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	6861      	ldr	r1, [r4, #4]
 800a058:	4299      	cmp	r1, r3
 800a05a:	bfde      	ittt	le
 800a05c:	2330      	movle	r3, #48	@ 0x30
 800a05e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a062:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a066:	1b92      	subs	r2, r2, r6
 800a068:	6122      	str	r2, [r4, #16]
 800a06a:	f8cd a000 	str.w	sl, [sp]
 800a06e:	464b      	mov	r3, r9
 800a070:	aa03      	add	r2, sp, #12
 800a072:	4621      	mov	r1, r4
 800a074:	4640      	mov	r0, r8
 800a076:	f7ff fee7 	bl	8009e48 <_printf_common>
 800a07a:	3001      	adds	r0, #1
 800a07c:	d14a      	bne.n	800a114 <_printf_i+0x1f0>
 800a07e:	f04f 30ff 	mov.w	r0, #4294967295
 800a082:	b004      	add	sp, #16
 800a084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	f043 0320 	orr.w	r3, r3, #32
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	4832      	ldr	r0, [pc, #200]	@ (800a15c <_printf_i+0x238>)
 800a092:	2778      	movs	r7, #120	@ 0x78
 800a094:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	6831      	ldr	r1, [r6, #0]
 800a09c:	061f      	lsls	r7, r3, #24
 800a09e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0a2:	d402      	bmi.n	800a0aa <_printf_i+0x186>
 800a0a4:	065f      	lsls	r7, r3, #25
 800a0a6:	bf48      	it	mi
 800a0a8:	b2ad      	uxthmi	r5, r5
 800a0aa:	6031      	str	r1, [r6, #0]
 800a0ac:	07d9      	lsls	r1, r3, #31
 800a0ae:	bf44      	itt	mi
 800a0b0:	f043 0320 	orrmi.w	r3, r3, #32
 800a0b4:	6023      	strmi	r3, [r4, #0]
 800a0b6:	b11d      	cbz	r5, 800a0c0 <_printf_i+0x19c>
 800a0b8:	2310      	movs	r3, #16
 800a0ba:	e7ad      	b.n	800a018 <_printf_i+0xf4>
 800a0bc:	4826      	ldr	r0, [pc, #152]	@ (800a158 <_printf_i+0x234>)
 800a0be:	e7e9      	b.n	800a094 <_printf_i+0x170>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	f023 0320 	bic.w	r3, r3, #32
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	e7f6      	b.n	800a0b8 <_printf_i+0x194>
 800a0ca:	4616      	mov	r6, r2
 800a0cc:	e7bd      	b.n	800a04a <_printf_i+0x126>
 800a0ce:	6833      	ldr	r3, [r6, #0]
 800a0d0:	6825      	ldr	r5, [r4, #0]
 800a0d2:	6961      	ldr	r1, [r4, #20]
 800a0d4:	1d18      	adds	r0, r3, #4
 800a0d6:	6030      	str	r0, [r6, #0]
 800a0d8:	062e      	lsls	r6, r5, #24
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	d501      	bpl.n	800a0e2 <_printf_i+0x1be>
 800a0de:	6019      	str	r1, [r3, #0]
 800a0e0:	e002      	b.n	800a0e8 <_printf_i+0x1c4>
 800a0e2:	0668      	lsls	r0, r5, #25
 800a0e4:	d5fb      	bpl.n	800a0de <_printf_i+0x1ba>
 800a0e6:	8019      	strh	r1, [r3, #0]
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	6123      	str	r3, [r4, #16]
 800a0ec:	4616      	mov	r6, r2
 800a0ee:	e7bc      	b.n	800a06a <_printf_i+0x146>
 800a0f0:	6833      	ldr	r3, [r6, #0]
 800a0f2:	1d1a      	adds	r2, r3, #4
 800a0f4:	6032      	str	r2, [r6, #0]
 800a0f6:	681e      	ldr	r6, [r3, #0]
 800a0f8:	6862      	ldr	r2, [r4, #4]
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7f6 f86f 	bl	80001e0 <memchr>
 800a102:	b108      	cbz	r0, 800a108 <_printf_i+0x1e4>
 800a104:	1b80      	subs	r0, r0, r6
 800a106:	6060      	str	r0, [r4, #4]
 800a108:	6863      	ldr	r3, [r4, #4]
 800a10a:	6123      	str	r3, [r4, #16]
 800a10c:	2300      	movs	r3, #0
 800a10e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a112:	e7aa      	b.n	800a06a <_printf_i+0x146>
 800a114:	6923      	ldr	r3, [r4, #16]
 800a116:	4632      	mov	r2, r6
 800a118:	4649      	mov	r1, r9
 800a11a:	4640      	mov	r0, r8
 800a11c:	47d0      	blx	sl
 800a11e:	3001      	adds	r0, #1
 800a120:	d0ad      	beq.n	800a07e <_printf_i+0x15a>
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	079b      	lsls	r3, r3, #30
 800a126:	d413      	bmi.n	800a150 <_printf_i+0x22c>
 800a128:	68e0      	ldr	r0, [r4, #12]
 800a12a:	9b03      	ldr	r3, [sp, #12]
 800a12c:	4298      	cmp	r0, r3
 800a12e:	bfb8      	it	lt
 800a130:	4618      	movlt	r0, r3
 800a132:	e7a6      	b.n	800a082 <_printf_i+0x15e>
 800a134:	2301      	movs	r3, #1
 800a136:	4632      	mov	r2, r6
 800a138:	4649      	mov	r1, r9
 800a13a:	4640      	mov	r0, r8
 800a13c:	47d0      	blx	sl
 800a13e:	3001      	adds	r0, #1
 800a140:	d09d      	beq.n	800a07e <_printf_i+0x15a>
 800a142:	3501      	adds	r5, #1
 800a144:	68e3      	ldr	r3, [r4, #12]
 800a146:	9903      	ldr	r1, [sp, #12]
 800a148:	1a5b      	subs	r3, r3, r1
 800a14a:	42ab      	cmp	r3, r5
 800a14c:	dcf2      	bgt.n	800a134 <_printf_i+0x210>
 800a14e:	e7eb      	b.n	800a128 <_printf_i+0x204>
 800a150:	2500      	movs	r5, #0
 800a152:	f104 0619 	add.w	r6, r4, #25
 800a156:	e7f5      	b.n	800a144 <_printf_i+0x220>
 800a158:	0800ad1b 	.word	0x0800ad1b
 800a15c:	0800ad2c 	.word	0x0800ad2c

0800a160 <__sflush_r>:
 800a160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a168:	0716      	lsls	r6, r2, #28
 800a16a:	4605      	mov	r5, r0
 800a16c:	460c      	mov	r4, r1
 800a16e:	d454      	bmi.n	800a21a <__sflush_r+0xba>
 800a170:	684b      	ldr	r3, [r1, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	dc02      	bgt.n	800a17c <__sflush_r+0x1c>
 800a176:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a178:	2b00      	cmp	r3, #0
 800a17a:	dd48      	ble.n	800a20e <__sflush_r+0xae>
 800a17c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a17e:	2e00      	cmp	r6, #0
 800a180:	d045      	beq.n	800a20e <__sflush_r+0xae>
 800a182:	2300      	movs	r3, #0
 800a184:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a188:	682f      	ldr	r7, [r5, #0]
 800a18a:	6a21      	ldr	r1, [r4, #32]
 800a18c:	602b      	str	r3, [r5, #0]
 800a18e:	d030      	beq.n	800a1f2 <__sflush_r+0x92>
 800a190:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	0759      	lsls	r1, r3, #29
 800a196:	d505      	bpl.n	800a1a4 <__sflush_r+0x44>
 800a198:	6863      	ldr	r3, [r4, #4]
 800a19a:	1ad2      	subs	r2, r2, r3
 800a19c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a19e:	b10b      	cbz	r3, 800a1a4 <__sflush_r+0x44>
 800a1a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1a2:	1ad2      	subs	r2, r2, r3
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1a8:	6a21      	ldr	r1, [r4, #32]
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b0      	blx	r6
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	d106      	bne.n	800a1c2 <__sflush_r+0x62>
 800a1b4:	6829      	ldr	r1, [r5, #0]
 800a1b6:	291d      	cmp	r1, #29
 800a1b8:	d82b      	bhi.n	800a212 <__sflush_r+0xb2>
 800a1ba:	4a2a      	ldr	r2, [pc, #168]	@ (800a264 <__sflush_r+0x104>)
 800a1bc:	40ca      	lsrs	r2, r1
 800a1be:	07d6      	lsls	r6, r2, #31
 800a1c0:	d527      	bpl.n	800a212 <__sflush_r+0xb2>
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	6062      	str	r2, [r4, #4]
 800a1c6:	04d9      	lsls	r1, r3, #19
 800a1c8:	6922      	ldr	r2, [r4, #16]
 800a1ca:	6022      	str	r2, [r4, #0]
 800a1cc:	d504      	bpl.n	800a1d8 <__sflush_r+0x78>
 800a1ce:	1c42      	adds	r2, r0, #1
 800a1d0:	d101      	bne.n	800a1d6 <__sflush_r+0x76>
 800a1d2:	682b      	ldr	r3, [r5, #0]
 800a1d4:	b903      	cbnz	r3, 800a1d8 <__sflush_r+0x78>
 800a1d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1da:	602f      	str	r7, [r5, #0]
 800a1dc:	b1b9      	cbz	r1, 800a20e <__sflush_r+0xae>
 800a1de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1e2:	4299      	cmp	r1, r3
 800a1e4:	d002      	beq.n	800a1ec <__sflush_r+0x8c>
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f7ff fbd6 	bl	8009998 <_free_r>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1f0:	e00d      	b.n	800a20e <__sflush_r+0xae>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	47b0      	blx	r6
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	1c50      	adds	r0, r2, #1
 800a1fc:	d1c9      	bne.n	800a192 <__sflush_r+0x32>
 800a1fe:	682b      	ldr	r3, [r5, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0c6      	beq.n	800a192 <__sflush_r+0x32>
 800a204:	2b1d      	cmp	r3, #29
 800a206:	d001      	beq.n	800a20c <__sflush_r+0xac>
 800a208:	2b16      	cmp	r3, #22
 800a20a:	d11e      	bne.n	800a24a <__sflush_r+0xea>
 800a20c:	602f      	str	r7, [r5, #0]
 800a20e:	2000      	movs	r0, #0
 800a210:	e022      	b.n	800a258 <__sflush_r+0xf8>
 800a212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a216:	b21b      	sxth	r3, r3
 800a218:	e01b      	b.n	800a252 <__sflush_r+0xf2>
 800a21a:	690f      	ldr	r7, [r1, #16]
 800a21c:	2f00      	cmp	r7, #0
 800a21e:	d0f6      	beq.n	800a20e <__sflush_r+0xae>
 800a220:	0793      	lsls	r3, r2, #30
 800a222:	680e      	ldr	r6, [r1, #0]
 800a224:	bf08      	it	eq
 800a226:	694b      	ldreq	r3, [r1, #20]
 800a228:	600f      	str	r7, [r1, #0]
 800a22a:	bf18      	it	ne
 800a22c:	2300      	movne	r3, #0
 800a22e:	eba6 0807 	sub.w	r8, r6, r7
 800a232:	608b      	str	r3, [r1, #8]
 800a234:	f1b8 0f00 	cmp.w	r8, #0
 800a238:	dde9      	ble.n	800a20e <__sflush_r+0xae>
 800a23a:	6a21      	ldr	r1, [r4, #32]
 800a23c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a23e:	4643      	mov	r3, r8
 800a240:	463a      	mov	r2, r7
 800a242:	4628      	mov	r0, r5
 800a244:	47b0      	blx	r6
 800a246:	2800      	cmp	r0, #0
 800a248:	dc08      	bgt.n	800a25c <__sflush_r+0xfc>
 800a24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25c:	4407      	add	r7, r0
 800a25e:	eba8 0800 	sub.w	r8, r8, r0
 800a262:	e7e7      	b.n	800a234 <__sflush_r+0xd4>
 800a264:	20400001 	.word	0x20400001

0800a268 <_fflush_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	690b      	ldr	r3, [r1, #16]
 800a26c:	4605      	mov	r5, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	b913      	cbnz	r3, 800a278 <_fflush_r+0x10>
 800a272:	2500      	movs	r5, #0
 800a274:	4628      	mov	r0, r5
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	b118      	cbz	r0, 800a282 <_fflush_r+0x1a>
 800a27a:	6a03      	ldr	r3, [r0, #32]
 800a27c:	b90b      	cbnz	r3, 800a282 <_fflush_r+0x1a>
 800a27e:	f7ff f945 	bl	800950c <__sinit>
 800a282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0f3      	beq.n	800a272 <_fflush_r+0xa>
 800a28a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a28c:	07d0      	lsls	r0, r2, #31
 800a28e:	d404      	bmi.n	800a29a <_fflush_r+0x32>
 800a290:	0599      	lsls	r1, r3, #22
 800a292:	d402      	bmi.n	800a29a <_fflush_r+0x32>
 800a294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a296:	f7ff fb50 	bl	800993a <__retarget_lock_acquire_recursive>
 800a29a:	4628      	mov	r0, r5
 800a29c:	4621      	mov	r1, r4
 800a29e:	f7ff ff5f 	bl	800a160 <__sflush_r>
 800a2a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2a4:	07da      	lsls	r2, r3, #31
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	d4e4      	bmi.n	800a274 <_fflush_r+0xc>
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	059b      	lsls	r3, r3, #22
 800a2ae:	d4e1      	bmi.n	800a274 <_fflush_r+0xc>
 800a2b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2b2:	f7ff fb43 	bl	800993c <__retarget_lock_release_recursive>
 800a2b6:	e7dd      	b.n	800a274 <_fflush_r+0xc>

0800a2b8 <fiprintf>:
 800a2b8:	b40e      	push	{r1, r2, r3}
 800a2ba:	b503      	push	{r0, r1, lr}
 800a2bc:	4601      	mov	r1, r0
 800a2be:	ab03      	add	r3, sp, #12
 800a2c0:	4805      	ldr	r0, [pc, #20]	@ (800a2d8 <fiprintf+0x20>)
 800a2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c6:	6800      	ldr	r0, [r0, #0]
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	f000 f88f 	bl	800a3ec <_vfiprintf_r>
 800a2ce:	b002      	add	sp, #8
 800a2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2d4:	b003      	add	sp, #12
 800a2d6:	4770      	bx	lr
 800a2d8:	2000001c 	.word	0x2000001c

0800a2dc <memmove>:
 800a2dc:	4288      	cmp	r0, r1
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	eb01 0402 	add.w	r4, r1, r2
 800a2e4:	d902      	bls.n	800a2ec <memmove+0x10>
 800a2e6:	4284      	cmp	r4, r0
 800a2e8:	4623      	mov	r3, r4
 800a2ea:	d807      	bhi.n	800a2fc <memmove+0x20>
 800a2ec:	1e43      	subs	r3, r0, #1
 800a2ee:	42a1      	cmp	r1, r4
 800a2f0:	d008      	beq.n	800a304 <memmove+0x28>
 800a2f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2fa:	e7f8      	b.n	800a2ee <memmove+0x12>
 800a2fc:	4402      	add	r2, r0
 800a2fe:	4601      	mov	r1, r0
 800a300:	428a      	cmp	r2, r1
 800a302:	d100      	bne.n	800a306 <memmove+0x2a>
 800a304:	bd10      	pop	{r4, pc}
 800a306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a30a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a30e:	e7f7      	b.n	800a300 <memmove+0x24>

0800a310 <_sbrk_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4d06      	ldr	r5, [pc, #24]	@ (800a32c <_sbrk_r+0x1c>)
 800a314:	2300      	movs	r3, #0
 800a316:	4604      	mov	r4, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	602b      	str	r3, [r5, #0]
 800a31c:	f7f7 fd8c 	bl	8001e38 <_sbrk>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	d102      	bne.n	800a32a <_sbrk_r+0x1a>
 800a324:	682b      	ldr	r3, [r5, #0]
 800a326:	b103      	cbz	r3, 800a32a <_sbrk_r+0x1a>
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	20004d28 	.word	0x20004d28

0800a330 <abort>:
 800a330:	b508      	push	{r3, lr}
 800a332:	2006      	movs	r0, #6
 800a334:	f000 fa2e 	bl	800a794 <raise>
 800a338:	2001      	movs	r0, #1
 800a33a:	f7f7 fd05 	bl	8001d48 <_exit>

0800a33e <_realloc_r>:
 800a33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a342:	4607      	mov	r7, r0
 800a344:	4614      	mov	r4, r2
 800a346:	460d      	mov	r5, r1
 800a348:	b921      	cbnz	r1, 800a354 <_realloc_r+0x16>
 800a34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a34e:	4611      	mov	r1, r2
 800a350:	f7ff bb96 	b.w	8009a80 <_malloc_r>
 800a354:	b92a      	cbnz	r2, 800a362 <_realloc_r+0x24>
 800a356:	f7ff fb1f 	bl	8009998 <_free_r>
 800a35a:	4625      	mov	r5, r4
 800a35c:	4628      	mov	r0, r5
 800a35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a362:	f000 fa33 	bl	800a7cc <_malloc_usable_size_r>
 800a366:	4284      	cmp	r4, r0
 800a368:	4606      	mov	r6, r0
 800a36a:	d802      	bhi.n	800a372 <_realloc_r+0x34>
 800a36c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a370:	d8f4      	bhi.n	800a35c <_realloc_r+0x1e>
 800a372:	4621      	mov	r1, r4
 800a374:	4638      	mov	r0, r7
 800a376:	f7ff fb83 	bl	8009a80 <_malloc_r>
 800a37a:	4680      	mov	r8, r0
 800a37c:	b908      	cbnz	r0, 800a382 <_realloc_r+0x44>
 800a37e:	4645      	mov	r5, r8
 800a380:	e7ec      	b.n	800a35c <_realloc_r+0x1e>
 800a382:	42b4      	cmp	r4, r6
 800a384:	4622      	mov	r2, r4
 800a386:	4629      	mov	r1, r5
 800a388:	bf28      	it	cs
 800a38a:	4632      	movcs	r2, r6
 800a38c:	f7ff fad7 	bl	800993e <memcpy>
 800a390:	4629      	mov	r1, r5
 800a392:	4638      	mov	r0, r7
 800a394:	f7ff fb00 	bl	8009998 <_free_r>
 800a398:	e7f1      	b.n	800a37e <_realloc_r+0x40>

0800a39a <__sfputc_r>:
 800a39a:	6893      	ldr	r3, [r2, #8]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	b410      	push	{r4}
 800a3a2:	6093      	str	r3, [r2, #8]
 800a3a4:	da08      	bge.n	800a3b8 <__sfputc_r+0x1e>
 800a3a6:	6994      	ldr	r4, [r2, #24]
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	db01      	blt.n	800a3b0 <__sfputc_r+0x16>
 800a3ac:	290a      	cmp	r1, #10
 800a3ae:	d103      	bne.n	800a3b8 <__sfputc_r+0x1e>
 800a3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b4:	f000 b932 	b.w	800a61c <__swbuf_r>
 800a3b8:	6813      	ldr	r3, [r2, #0]
 800a3ba:	1c58      	adds	r0, r3, #1
 800a3bc:	6010      	str	r0, [r2, #0]
 800a3be:	7019      	strb	r1, [r3, #0]
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <__sfputs_r>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	460f      	mov	r7, r1
 800a3ce:	4614      	mov	r4, r2
 800a3d0:	18d5      	adds	r5, r2, r3
 800a3d2:	42ac      	cmp	r4, r5
 800a3d4:	d101      	bne.n	800a3da <__sfputs_r+0x12>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e007      	b.n	800a3ea <__sfputs_r+0x22>
 800a3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3de:	463a      	mov	r2, r7
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7ff ffda 	bl	800a39a <__sfputc_r>
 800a3e6:	1c43      	adds	r3, r0, #1
 800a3e8:	d1f3      	bne.n	800a3d2 <__sfputs_r+0xa>
 800a3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3ec <_vfiprintf_r>:
 800a3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f0:	460d      	mov	r5, r1
 800a3f2:	b09d      	sub	sp, #116	@ 0x74
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	4698      	mov	r8, r3
 800a3f8:	4606      	mov	r6, r0
 800a3fa:	b118      	cbz	r0, 800a404 <_vfiprintf_r+0x18>
 800a3fc:	6a03      	ldr	r3, [r0, #32]
 800a3fe:	b90b      	cbnz	r3, 800a404 <_vfiprintf_r+0x18>
 800a400:	f7ff f884 	bl	800950c <__sinit>
 800a404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a406:	07d9      	lsls	r1, r3, #31
 800a408:	d405      	bmi.n	800a416 <_vfiprintf_r+0x2a>
 800a40a:	89ab      	ldrh	r3, [r5, #12]
 800a40c:	059a      	lsls	r2, r3, #22
 800a40e:	d402      	bmi.n	800a416 <_vfiprintf_r+0x2a>
 800a410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a412:	f7ff fa92 	bl	800993a <__retarget_lock_acquire_recursive>
 800a416:	89ab      	ldrh	r3, [r5, #12]
 800a418:	071b      	lsls	r3, r3, #28
 800a41a:	d501      	bpl.n	800a420 <_vfiprintf_r+0x34>
 800a41c:	692b      	ldr	r3, [r5, #16]
 800a41e:	b99b      	cbnz	r3, 800a448 <_vfiprintf_r+0x5c>
 800a420:	4629      	mov	r1, r5
 800a422:	4630      	mov	r0, r6
 800a424:	f000 f938 	bl	800a698 <__swsetup_r>
 800a428:	b170      	cbz	r0, 800a448 <_vfiprintf_r+0x5c>
 800a42a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a42c:	07dc      	lsls	r4, r3, #31
 800a42e:	d504      	bpl.n	800a43a <_vfiprintf_r+0x4e>
 800a430:	f04f 30ff 	mov.w	r0, #4294967295
 800a434:	b01d      	add	sp, #116	@ 0x74
 800a436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43a:	89ab      	ldrh	r3, [r5, #12]
 800a43c:	0598      	lsls	r0, r3, #22
 800a43e:	d4f7      	bmi.n	800a430 <_vfiprintf_r+0x44>
 800a440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a442:	f7ff fa7b 	bl	800993c <__retarget_lock_release_recursive>
 800a446:	e7f3      	b.n	800a430 <_vfiprintf_r+0x44>
 800a448:	2300      	movs	r3, #0
 800a44a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a44c:	2320      	movs	r3, #32
 800a44e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a452:	f8cd 800c 	str.w	r8, [sp, #12]
 800a456:	2330      	movs	r3, #48	@ 0x30
 800a458:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a608 <_vfiprintf_r+0x21c>
 800a45c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a460:	f04f 0901 	mov.w	r9, #1
 800a464:	4623      	mov	r3, r4
 800a466:	469a      	mov	sl, r3
 800a468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a46c:	b10a      	cbz	r2, 800a472 <_vfiprintf_r+0x86>
 800a46e:	2a25      	cmp	r2, #37	@ 0x25
 800a470:	d1f9      	bne.n	800a466 <_vfiprintf_r+0x7a>
 800a472:	ebba 0b04 	subs.w	fp, sl, r4
 800a476:	d00b      	beq.n	800a490 <_vfiprintf_r+0xa4>
 800a478:	465b      	mov	r3, fp
 800a47a:	4622      	mov	r2, r4
 800a47c:	4629      	mov	r1, r5
 800a47e:	4630      	mov	r0, r6
 800a480:	f7ff ffa2 	bl	800a3c8 <__sfputs_r>
 800a484:	3001      	adds	r0, #1
 800a486:	f000 80a7 	beq.w	800a5d8 <_vfiprintf_r+0x1ec>
 800a48a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a48c:	445a      	add	r2, fp
 800a48e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a490:	f89a 3000 	ldrb.w	r3, [sl]
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 809f 	beq.w	800a5d8 <_vfiprintf_r+0x1ec>
 800a49a:	2300      	movs	r3, #0
 800a49c:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4a4:	f10a 0a01 	add.w	sl, sl, #1
 800a4a8:	9304      	str	r3, [sp, #16]
 800a4aa:	9307      	str	r3, [sp, #28]
 800a4ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4b2:	4654      	mov	r4, sl
 800a4b4:	2205      	movs	r2, #5
 800a4b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ba:	4853      	ldr	r0, [pc, #332]	@ (800a608 <_vfiprintf_r+0x21c>)
 800a4bc:	f7f5 fe90 	bl	80001e0 <memchr>
 800a4c0:	9a04      	ldr	r2, [sp, #16]
 800a4c2:	b9d8      	cbnz	r0, 800a4fc <_vfiprintf_r+0x110>
 800a4c4:	06d1      	lsls	r1, r2, #27
 800a4c6:	bf44      	itt	mi
 800a4c8:	2320      	movmi	r3, #32
 800a4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4ce:	0713      	lsls	r3, r2, #28
 800a4d0:	bf44      	itt	mi
 800a4d2:	232b      	movmi	r3, #43	@ 0x2b
 800a4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4de:	d015      	beq.n	800a50c <_vfiprintf_r+0x120>
 800a4e0:	9a07      	ldr	r2, [sp, #28]
 800a4e2:	4654      	mov	r4, sl
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	f04f 0c0a 	mov.w	ip, #10
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f0:	3b30      	subs	r3, #48	@ 0x30
 800a4f2:	2b09      	cmp	r3, #9
 800a4f4:	d94b      	bls.n	800a58e <_vfiprintf_r+0x1a2>
 800a4f6:	b1b0      	cbz	r0, 800a526 <_vfiprintf_r+0x13a>
 800a4f8:	9207      	str	r2, [sp, #28]
 800a4fa:	e014      	b.n	800a526 <_vfiprintf_r+0x13a>
 800a4fc:	eba0 0308 	sub.w	r3, r0, r8
 800a500:	fa09 f303 	lsl.w	r3, r9, r3
 800a504:	4313      	orrs	r3, r2
 800a506:	9304      	str	r3, [sp, #16]
 800a508:	46a2      	mov	sl, r4
 800a50a:	e7d2      	b.n	800a4b2 <_vfiprintf_r+0xc6>
 800a50c:	9b03      	ldr	r3, [sp, #12]
 800a50e:	1d19      	adds	r1, r3, #4
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	9103      	str	r1, [sp, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	bfbb      	ittet	lt
 800a518:	425b      	neglt	r3, r3
 800a51a:	f042 0202 	orrlt.w	r2, r2, #2
 800a51e:	9307      	strge	r3, [sp, #28]
 800a520:	9307      	strlt	r3, [sp, #28]
 800a522:	bfb8      	it	lt
 800a524:	9204      	strlt	r2, [sp, #16]
 800a526:	7823      	ldrb	r3, [r4, #0]
 800a528:	2b2e      	cmp	r3, #46	@ 0x2e
 800a52a:	d10a      	bne.n	800a542 <_vfiprintf_r+0x156>
 800a52c:	7863      	ldrb	r3, [r4, #1]
 800a52e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a530:	d132      	bne.n	800a598 <_vfiprintf_r+0x1ac>
 800a532:	9b03      	ldr	r3, [sp, #12]
 800a534:	1d1a      	adds	r2, r3, #4
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	9203      	str	r2, [sp, #12]
 800a53a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a53e:	3402      	adds	r4, #2
 800a540:	9305      	str	r3, [sp, #20]
 800a542:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a618 <_vfiprintf_r+0x22c>
 800a546:	7821      	ldrb	r1, [r4, #0]
 800a548:	2203      	movs	r2, #3
 800a54a:	4650      	mov	r0, sl
 800a54c:	f7f5 fe48 	bl	80001e0 <memchr>
 800a550:	b138      	cbz	r0, 800a562 <_vfiprintf_r+0x176>
 800a552:	9b04      	ldr	r3, [sp, #16]
 800a554:	eba0 000a 	sub.w	r0, r0, sl
 800a558:	2240      	movs	r2, #64	@ 0x40
 800a55a:	4082      	lsls	r2, r0
 800a55c:	4313      	orrs	r3, r2
 800a55e:	3401      	adds	r4, #1
 800a560:	9304      	str	r3, [sp, #16]
 800a562:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a566:	4829      	ldr	r0, [pc, #164]	@ (800a60c <_vfiprintf_r+0x220>)
 800a568:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a56c:	2206      	movs	r2, #6
 800a56e:	f7f5 fe37 	bl	80001e0 <memchr>
 800a572:	2800      	cmp	r0, #0
 800a574:	d03f      	beq.n	800a5f6 <_vfiprintf_r+0x20a>
 800a576:	4b26      	ldr	r3, [pc, #152]	@ (800a610 <_vfiprintf_r+0x224>)
 800a578:	bb1b      	cbnz	r3, 800a5c2 <_vfiprintf_r+0x1d6>
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	3307      	adds	r3, #7
 800a57e:	f023 0307 	bic.w	r3, r3, #7
 800a582:	3308      	adds	r3, #8
 800a584:	9303      	str	r3, [sp, #12]
 800a586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a588:	443b      	add	r3, r7
 800a58a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a58c:	e76a      	b.n	800a464 <_vfiprintf_r+0x78>
 800a58e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a592:	460c      	mov	r4, r1
 800a594:	2001      	movs	r0, #1
 800a596:	e7a8      	b.n	800a4ea <_vfiprintf_r+0xfe>
 800a598:	2300      	movs	r3, #0
 800a59a:	3401      	adds	r4, #1
 800a59c:	9305      	str	r3, [sp, #20]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	f04f 0c0a 	mov.w	ip, #10
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5aa:	3a30      	subs	r2, #48	@ 0x30
 800a5ac:	2a09      	cmp	r2, #9
 800a5ae:	d903      	bls.n	800a5b8 <_vfiprintf_r+0x1cc>
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d0c6      	beq.n	800a542 <_vfiprintf_r+0x156>
 800a5b4:	9105      	str	r1, [sp, #20]
 800a5b6:	e7c4      	b.n	800a542 <_vfiprintf_r+0x156>
 800a5b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5bc:	4604      	mov	r4, r0
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e7f0      	b.n	800a5a4 <_vfiprintf_r+0x1b8>
 800a5c2:	ab03      	add	r3, sp, #12
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	462a      	mov	r2, r5
 800a5c8:	4b12      	ldr	r3, [pc, #72]	@ (800a614 <_vfiprintf_r+0x228>)
 800a5ca:	a904      	add	r1, sp, #16
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f3af 8000 	nop.w
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	1c78      	adds	r0, r7, #1
 800a5d6:	d1d6      	bne.n	800a586 <_vfiprintf_r+0x19a>
 800a5d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5da:	07d9      	lsls	r1, r3, #31
 800a5dc:	d405      	bmi.n	800a5ea <_vfiprintf_r+0x1fe>
 800a5de:	89ab      	ldrh	r3, [r5, #12]
 800a5e0:	059a      	lsls	r2, r3, #22
 800a5e2:	d402      	bmi.n	800a5ea <_vfiprintf_r+0x1fe>
 800a5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5e6:	f7ff f9a9 	bl	800993c <__retarget_lock_release_recursive>
 800a5ea:	89ab      	ldrh	r3, [r5, #12]
 800a5ec:	065b      	lsls	r3, r3, #25
 800a5ee:	f53f af1f 	bmi.w	800a430 <_vfiprintf_r+0x44>
 800a5f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5f4:	e71e      	b.n	800a434 <_vfiprintf_r+0x48>
 800a5f6:	ab03      	add	r3, sp, #12
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	462a      	mov	r2, r5
 800a5fc:	4b05      	ldr	r3, [pc, #20]	@ (800a614 <_vfiprintf_r+0x228>)
 800a5fe:	a904      	add	r1, sp, #16
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff fc8f 	bl	8009f24 <_printf_i>
 800a606:	e7e4      	b.n	800a5d2 <_vfiprintf_r+0x1e6>
 800a608:	0800ad0a 	.word	0x0800ad0a
 800a60c:	0800ad14 	.word	0x0800ad14
 800a610:	00000000 	.word	0x00000000
 800a614:	0800a3c9 	.word	0x0800a3c9
 800a618:	0800ad10 	.word	0x0800ad10

0800a61c <__swbuf_r>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	460e      	mov	r6, r1
 800a620:	4614      	mov	r4, r2
 800a622:	4605      	mov	r5, r0
 800a624:	b118      	cbz	r0, 800a62e <__swbuf_r+0x12>
 800a626:	6a03      	ldr	r3, [r0, #32]
 800a628:	b90b      	cbnz	r3, 800a62e <__swbuf_r+0x12>
 800a62a:	f7fe ff6f 	bl	800950c <__sinit>
 800a62e:	69a3      	ldr	r3, [r4, #24]
 800a630:	60a3      	str	r3, [r4, #8]
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	071a      	lsls	r2, r3, #28
 800a636:	d501      	bpl.n	800a63c <__swbuf_r+0x20>
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	b943      	cbnz	r3, 800a64e <__swbuf_r+0x32>
 800a63c:	4621      	mov	r1, r4
 800a63e:	4628      	mov	r0, r5
 800a640:	f000 f82a 	bl	800a698 <__swsetup_r>
 800a644:	b118      	cbz	r0, 800a64e <__swbuf_r+0x32>
 800a646:	f04f 37ff 	mov.w	r7, #4294967295
 800a64a:	4638      	mov	r0, r7
 800a64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	6922      	ldr	r2, [r4, #16]
 800a652:	1a98      	subs	r0, r3, r2
 800a654:	6963      	ldr	r3, [r4, #20]
 800a656:	b2f6      	uxtb	r6, r6
 800a658:	4283      	cmp	r3, r0
 800a65a:	4637      	mov	r7, r6
 800a65c:	dc05      	bgt.n	800a66a <__swbuf_r+0x4e>
 800a65e:	4621      	mov	r1, r4
 800a660:	4628      	mov	r0, r5
 800a662:	f7ff fe01 	bl	800a268 <_fflush_r>
 800a666:	2800      	cmp	r0, #0
 800a668:	d1ed      	bne.n	800a646 <__swbuf_r+0x2a>
 800a66a:	68a3      	ldr	r3, [r4, #8]
 800a66c:	3b01      	subs	r3, #1
 800a66e:	60a3      	str	r3, [r4, #8]
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	6022      	str	r2, [r4, #0]
 800a676:	701e      	strb	r6, [r3, #0]
 800a678:	6962      	ldr	r2, [r4, #20]
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d004      	beq.n	800a68a <__swbuf_r+0x6e>
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	07db      	lsls	r3, r3, #31
 800a684:	d5e1      	bpl.n	800a64a <__swbuf_r+0x2e>
 800a686:	2e0a      	cmp	r6, #10
 800a688:	d1df      	bne.n	800a64a <__swbuf_r+0x2e>
 800a68a:	4621      	mov	r1, r4
 800a68c:	4628      	mov	r0, r5
 800a68e:	f7ff fdeb 	bl	800a268 <_fflush_r>
 800a692:	2800      	cmp	r0, #0
 800a694:	d0d9      	beq.n	800a64a <__swbuf_r+0x2e>
 800a696:	e7d6      	b.n	800a646 <__swbuf_r+0x2a>

0800a698 <__swsetup_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4b29      	ldr	r3, [pc, #164]	@ (800a740 <__swsetup_r+0xa8>)
 800a69c:	4605      	mov	r5, r0
 800a69e:	6818      	ldr	r0, [r3, #0]
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	b118      	cbz	r0, 800a6ac <__swsetup_r+0x14>
 800a6a4:	6a03      	ldr	r3, [r0, #32]
 800a6a6:	b90b      	cbnz	r3, 800a6ac <__swsetup_r+0x14>
 800a6a8:	f7fe ff30 	bl	800950c <__sinit>
 800a6ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6b0:	0719      	lsls	r1, r3, #28
 800a6b2:	d422      	bmi.n	800a6fa <__swsetup_r+0x62>
 800a6b4:	06da      	lsls	r2, r3, #27
 800a6b6:	d407      	bmi.n	800a6c8 <__swsetup_r+0x30>
 800a6b8:	2209      	movs	r2, #9
 800a6ba:	602a      	str	r2, [r5, #0]
 800a6bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c6:	e033      	b.n	800a730 <__swsetup_r+0x98>
 800a6c8:	0758      	lsls	r0, r3, #29
 800a6ca:	d512      	bpl.n	800a6f2 <__swsetup_r+0x5a>
 800a6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6ce:	b141      	cbz	r1, 800a6e2 <__swsetup_r+0x4a>
 800a6d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6d4:	4299      	cmp	r1, r3
 800a6d6:	d002      	beq.n	800a6de <__swsetup_r+0x46>
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f7ff f95d 	bl	8009998 <_free_r>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a6e8:	81a3      	strh	r3, [r4, #12]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6063      	str	r3, [r4, #4]
 800a6ee:	6923      	ldr	r3, [r4, #16]
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f043 0308 	orr.w	r3, r3, #8
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	b94b      	cbnz	r3, 800a712 <__swsetup_r+0x7a>
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a708:	d003      	beq.n	800a712 <__swsetup_r+0x7a>
 800a70a:	4621      	mov	r1, r4
 800a70c:	4628      	mov	r0, r5
 800a70e:	f000 f88b 	bl	800a828 <__smakebuf_r>
 800a712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a716:	f013 0201 	ands.w	r2, r3, #1
 800a71a:	d00a      	beq.n	800a732 <__swsetup_r+0x9a>
 800a71c:	2200      	movs	r2, #0
 800a71e:	60a2      	str	r2, [r4, #8]
 800a720:	6962      	ldr	r2, [r4, #20]
 800a722:	4252      	negs	r2, r2
 800a724:	61a2      	str	r2, [r4, #24]
 800a726:	6922      	ldr	r2, [r4, #16]
 800a728:	b942      	cbnz	r2, 800a73c <__swsetup_r+0xa4>
 800a72a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a72e:	d1c5      	bne.n	800a6bc <__swsetup_r+0x24>
 800a730:	bd38      	pop	{r3, r4, r5, pc}
 800a732:	0799      	lsls	r1, r3, #30
 800a734:	bf58      	it	pl
 800a736:	6962      	ldrpl	r2, [r4, #20]
 800a738:	60a2      	str	r2, [r4, #8]
 800a73a:	e7f4      	b.n	800a726 <__swsetup_r+0x8e>
 800a73c:	2000      	movs	r0, #0
 800a73e:	e7f7      	b.n	800a730 <__swsetup_r+0x98>
 800a740:	2000001c 	.word	0x2000001c

0800a744 <_raise_r>:
 800a744:	291f      	cmp	r1, #31
 800a746:	b538      	push	{r3, r4, r5, lr}
 800a748:	4605      	mov	r5, r0
 800a74a:	460c      	mov	r4, r1
 800a74c:	d904      	bls.n	800a758 <_raise_r+0x14>
 800a74e:	2316      	movs	r3, #22
 800a750:	6003      	str	r3, [r0, #0]
 800a752:	f04f 30ff 	mov.w	r0, #4294967295
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a75a:	b112      	cbz	r2, 800a762 <_raise_r+0x1e>
 800a75c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a760:	b94b      	cbnz	r3, 800a776 <_raise_r+0x32>
 800a762:	4628      	mov	r0, r5
 800a764:	f000 f830 	bl	800a7c8 <_getpid_r>
 800a768:	4622      	mov	r2, r4
 800a76a:	4601      	mov	r1, r0
 800a76c:	4628      	mov	r0, r5
 800a76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a772:	f000 b817 	b.w	800a7a4 <_kill_r>
 800a776:	2b01      	cmp	r3, #1
 800a778:	d00a      	beq.n	800a790 <_raise_r+0x4c>
 800a77a:	1c59      	adds	r1, r3, #1
 800a77c:	d103      	bne.n	800a786 <_raise_r+0x42>
 800a77e:	2316      	movs	r3, #22
 800a780:	6003      	str	r3, [r0, #0]
 800a782:	2001      	movs	r0, #1
 800a784:	e7e7      	b.n	800a756 <_raise_r+0x12>
 800a786:	2100      	movs	r1, #0
 800a788:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a78c:	4620      	mov	r0, r4
 800a78e:	4798      	blx	r3
 800a790:	2000      	movs	r0, #0
 800a792:	e7e0      	b.n	800a756 <_raise_r+0x12>

0800a794 <raise>:
 800a794:	4b02      	ldr	r3, [pc, #8]	@ (800a7a0 <raise+0xc>)
 800a796:	4601      	mov	r1, r0
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	f7ff bfd3 	b.w	800a744 <_raise_r>
 800a79e:	bf00      	nop
 800a7a0:	2000001c 	.word	0x2000001c

0800a7a4 <_kill_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4d07      	ldr	r5, [pc, #28]	@ (800a7c4 <_kill_r+0x20>)
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	4611      	mov	r1, r2
 800a7b0:	602b      	str	r3, [r5, #0]
 800a7b2:	f7f7 fab9 	bl	8001d28 <_kill>
 800a7b6:	1c43      	adds	r3, r0, #1
 800a7b8:	d102      	bne.n	800a7c0 <_kill_r+0x1c>
 800a7ba:	682b      	ldr	r3, [r5, #0]
 800a7bc:	b103      	cbz	r3, 800a7c0 <_kill_r+0x1c>
 800a7be:	6023      	str	r3, [r4, #0]
 800a7c0:	bd38      	pop	{r3, r4, r5, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20004d28 	.word	0x20004d28

0800a7c8 <_getpid_r>:
 800a7c8:	f7f7 baa6 	b.w	8001d18 <_getpid>

0800a7cc <_malloc_usable_size_r>:
 800a7cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7d0:	1f18      	subs	r0, r3, #4
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	bfbc      	itt	lt
 800a7d6:	580b      	ldrlt	r3, [r1, r0]
 800a7d8:	18c0      	addlt	r0, r0, r3
 800a7da:	4770      	bx	lr

0800a7dc <__swhatbuf_r>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	460c      	mov	r4, r1
 800a7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	b096      	sub	sp, #88	@ 0x58
 800a7e8:	4615      	mov	r5, r2
 800a7ea:	461e      	mov	r6, r3
 800a7ec:	da0d      	bge.n	800a80a <__swhatbuf_r+0x2e>
 800a7ee:	89a3      	ldrh	r3, [r4, #12]
 800a7f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7f4:	f04f 0100 	mov.w	r1, #0
 800a7f8:	bf14      	ite	ne
 800a7fa:	2340      	movne	r3, #64	@ 0x40
 800a7fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a800:	2000      	movs	r0, #0
 800a802:	6031      	str	r1, [r6, #0]
 800a804:	602b      	str	r3, [r5, #0]
 800a806:	b016      	add	sp, #88	@ 0x58
 800a808:	bd70      	pop	{r4, r5, r6, pc}
 800a80a:	466a      	mov	r2, sp
 800a80c:	f000 f848 	bl	800a8a0 <_fstat_r>
 800a810:	2800      	cmp	r0, #0
 800a812:	dbec      	blt.n	800a7ee <__swhatbuf_r+0x12>
 800a814:	9901      	ldr	r1, [sp, #4]
 800a816:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a81a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a81e:	4259      	negs	r1, r3
 800a820:	4159      	adcs	r1, r3
 800a822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a826:	e7eb      	b.n	800a800 <__swhatbuf_r+0x24>

0800a828 <__smakebuf_r>:
 800a828:	898b      	ldrh	r3, [r1, #12]
 800a82a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a82c:	079d      	lsls	r5, r3, #30
 800a82e:	4606      	mov	r6, r0
 800a830:	460c      	mov	r4, r1
 800a832:	d507      	bpl.n	800a844 <__smakebuf_r+0x1c>
 800a834:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	6123      	str	r3, [r4, #16]
 800a83c:	2301      	movs	r3, #1
 800a83e:	6163      	str	r3, [r4, #20]
 800a840:	b003      	add	sp, #12
 800a842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a844:	ab01      	add	r3, sp, #4
 800a846:	466a      	mov	r2, sp
 800a848:	f7ff ffc8 	bl	800a7dc <__swhatbuf_r>
 800a84c:	9f00      	ldr	r7, [sp, #0]
 800a84e:	4605      	mov	r5, r0
 800a850:	4639      	mov	r1, r7
 800a852:	4630      	mov	r0, r6
 800a854:	f7ff f914 	bl	8009a80 <_malloc_r>
 800a858:	b948      	cbnz	r0, 800a86e <__smakebuf_r+0x46>
 800a85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a85e:	059a      	lsls	r2, r3, #22
 800a860:	d4ee      	bmi.n	800a840 <__smakebuf_r+0x18>
 800a862:	f023 0303 	bic.w	r3, r3, #3
 800a866:	f043 0302 	orr.w	r3, r3, #2
 800a86a:	81a3      	strh	r3, [r4, #12]
 800a86c:	e7e2      	b.n	800a834 <__smakebuf_r+0xc>
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	6020      	str	r0, [r4, #0]
 800a872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	9b01      	ldr	r3, [sp, #4]
 800a87a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a87e:	b15b      	cbz	r3, 800a898 <__smakebuf_r+0x70>
 800a880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a884:	4630      	mov	r0, r6
 800a886:	f000 f81d 	bl	800a8c4 <_isatty_r>
 800a88a:	b128      	cbz	r0, 800a898 <__smakebuf_r+0x70>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f023 0303 	bic.w	r3, r3, #3
 800a892:	f043 0301 	orr.w	r3, r3, #1
 800a896:	81a3      	strh	r3, [r4, #12]
 800a898:	89a3      	ldrh	r3, [r4, #12]
 800a89a:	431d      	orrs	r5, r3
 800a89c:	81a5      	strh	r5, [r4, #12]
 800a89e:	e7cf      	b.n	800a840 <__smakebuf_r+0x18>

0800a8a0 <_fstat_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d07      	ldr	r5, [pc, #28]	@ (800a8c0 <_fstat_r+0x20>)
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	4608      	mov	r0, r1
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	602b      	str	r3, [r5, #0]
 800a8ae:	f7f7 fa9b 	bl	8001de8 <_fstat>
 800a8b2:	1c43      	adds	r3, r0, #1
 800a8b4:	d102      	bne.n	800a8bc <_fstat_r+0x1c>
 800a8b6:	682b      	ldr	r3, [r5, #0]
 800a8b8:	b103      	cbz	r3, 800a8bc <_fstat_r+0x1c>
 800a8ba:	6023      	str	r3, [r4, #0]
 800a8bc:	bd38      	pop	{r3, r4, r5, pc}
 800a8be:	bf00      	nop
 800a8c0:	20004d28 	.word	0x20004d28

0800a8c4 <_isatty_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d06      	ldr	r5, [pc, #24]	@ (800a8e0 <_isatty_r+0x1c>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	f7f7 fa9a 	bl	8001e08 <_isatty>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d102      	bne.n	800a8de <_isatty_r+0x1a>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	b103      	cbz	r3, 800a8de <_isatty_r+0x1a>
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	20004d28 	.word	0x20004d28

0800a8e4 <_init>:
 800a8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e6:	bf00      	nop
 800a8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ea:	bc08      	pop	{r3}
 800a8ec:	469e      	mov	lr, r3
 800a8ee:	4770      	bx	lr

0800a8f0 <_fini>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	bf00      	nop
 800a8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f6:	bc08      	pop	{r3}
 800a8f8:	469e      	mov	lr, r3
 800a8fa:	4770      	bx	lr
